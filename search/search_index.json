{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"JavaScript SDK Documentation \u26a0\ufe0f Disclaimer We're doing our best to keep the documentation up to date, but please let us know if you see some out-of-date file . Thanks! Intro There are three different ways of incorporating aepp-sdk-js into your project, depending on the particular scenario: * ES Modules at es/ (recommended) * Node.js bundle at dist/aepp-sdk.js * Browser bundle at dist/aepp-sdk.browser.js * Browser bundle for using through \\<script> tag at dist/aepp-sdk.browser-script.js Also, please be aware that using require instead of module loader syntax ( import ) means that the default export automatically becomes exposed as default , which is reflected below in the code examples. This is due to a recent change in [Babel] compilation and fully compliant with the standard. Flavors / Entry Points The recommended approach to use aepp-sdk is to import one of the following Ae Factories based on the specific use case: @aeternity/aepp-sdk/es/ae/wallet : for Wallet 's focused development @aeternity/aepp-sdk/es/ae/contract : for Contract 's focused development @aeternity/aepp-sdk/es/ae/aepp : for Web Aepp 's focused development \u26a0\ufe0f No Wallet support @aeternity/aepp-sdk/es/ae/aens : for AENs ' focused development @aeternity/aepp-sdk/es/ae/oracle : for Oracle 's focused development @aeternity/aepp-sdk/es/ae/universal : for Universal development (includes all SDK features) In order to cater more specific needs, it is recommended to refer to the contributing Docs . Testing Network When initialising a client, to test, you can use Aeternity's Test Network URL: https://testnet.aeternity.io You can use this URL with any release on npmjs . It offers the last stable version of Node , used by all of Aeternity's Dev Tools.","title":"Overview"},{"location":"#javascript-sdk-documentation","text":"","title":"JavaScript SDK Documentation"},{"location":"#disclaimer","text":"We're doing our best to keep the documentation up to date, but please let us know if you see some out-of-date file . Thanks!","title":"\u26a0\ufe0f Disclaimer"},{"location":"#intro","text":"There are three different ways of incorporating aepp-sdk-js into your project, depending on the particular scenario: * ES Modules at es/ (recommended) * Node.js bundle at dist/aepp-sdk.js * Browser bundle at dist/aepp-sdk.browser.js * Browser bundle for using through \\<script> tag at dist/aepp-sdk.browser-script.js Also, please be aware that using require instead of module loader syntax ( import ) means that the default export automatically becomes exposed as default , which is reflected below in the code examples. This is due to a recent change in [Babel] compilation and fully compliant with the standard.","title":"Intro"},{"location":"#flavors-entry-points","text":"The recommended approach to use aepp-sdk is to import one of the following Ae Factories based on the specific use case: @aeternity/aepp-sdk/es/ae/wallet : for Wallet 's focused development @aeternity/aepp-sdk/es/ae/contract : for Contract 's focused development @aeternity/aepp-sdk/es/ae/aepp : for Web Aepp 's focused development \u26a0\ufe0f No Wallet support @aeternity/aepp-sdk/es/ae/aens : for AENs ' focused development @aeternity/aepp-sdk/es/ae/oracle : for Oracle 's focused development @aeternity/aepp-sdk/es/ae/universal : for Universal development (includes all SDK features) In order to cater more specific needs, it is recommended to refer to the contributing Docs .","title":"Flavors / Entry Points"},{"location":"#testing-network","text":"When initialising a client, to test, you can use Aeternity's Test Network URL: https://testnet.aeternity.io You can use this URL with any release on npmjs . It offers the last stable version of Node , used by all of Aeternity's Dev Tools.","title":"Testing Network"},{"location":"api/","text":"API Table of Contents @aeternity/aepp-sdk/es/account @aeternity/aepp-sdk/es/account/memory @aeternity/aepp-sdk/es/account/selector @aeternity/aepp-sdk/es/accounts @aeternity/aepp-sdk/es/ae/aens @aeternity/aepp-sdk/es/ae/aepp @aeternity/aepp-sdk/es/ae/contract @aeternity/aepp-sdk/es/ae @aeternity/aepp-sdk/es/ae/oracle @aeternity/aepp-sdk/es/ae/universal @aeternity/aepp-sdk/es/ae/wallet @aeternity/aepp-sdk/es/chain @aeternity/aepp-sdk/es/chain/node @aeternity/aepp-sdk/es/channel/index @aeternity/aepp-sdk/es/contract/aci @aeternity/aepp-sdk/es/contract/compiler @aeternity/aepp-sdk/es/contract/ga @aeternity/aepp-sdk/es/contract @aeternity/aepp-sdk/es/node-pool @aeternity/aepp-sdk/es/node @aeternity/aepp-sdk/es/oracle @aeternity/aepp-sdk/es/oracle/node @aeternity/aepp-sdk/es/rpc/client @aeternity/aepp-sdk/es/tx/builder/helpers @aeternity/aepp-sdk/es/tx/builder @aeternity/aepp-sdk/es/tx/builder/schema @aeternity/aepp-sdk/es/tx @aeternity/aepp-sdk/es/tx/tx-object @aeternity/aepp-sdk/es/tx/tx @aeternity/aepp-sdk/es/tx/validator @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector @aeternity/aepp-sdk/es/utils/amount-formatter @aeternity/aepp-sdk/es/utils/bignumber @aeternity/aepp-sdk/es/utils/bytes @aeternity/aepp-sdk/es/utils/crypto @aeternity/aepp-sdk/es/utils/keystore @aeternity/aepp-sdk/es/utils/swagger","title":"API Table of Contents"},{"location":"api/#api-table-of-contents","text":"@aeternity/aepp-sdk/es/account @aeternity/aepp-sdk/es/account/memory @aeternity/aepp-sdk/es/account/selector @aeternity/aepp-sdk/es/accounts @aeternity/aepp-sdk/es/ae/aens @aeternity/aepp-sdk/es/ae/aepp @aeternity/aepp-sdk/es/ae/contract @aeternity/aepp-sdk/es/ae @aeternity/aepp-sdk/es/ae/oracle @aeternity/aepp-sdk/es/ae/universal @aeternity/aepp-sdk/es/ae/wallet @aeternity/aepp-sdk/es/chain @aeternity/aepp-sdk/es/chain/node @aeternity/aepp-sdk/es/channel/index @aeternity/aepp-sdk/es/contract/aci @aeternity/aepp-sdk/es/contract/compiler @aeternity/aepp-sdk/es/contract/ga @aeternity/aepp-sdk/es/contract @aeternity/aepp-sdk/es/node-pool @aeternity/aepp-sdk/es/node @aeternity/aepp-sdk/es/oracle @aeternity/aepp-sdk/es/oracle/node @aeternity/aepp-sdk/es/rpc/client @aeternity/aepp-sdk/es/tx/builder/helpers @aeternity/aepp-sdk/es/tx/builder @aeternity/aepp-sdk/es/tx/builder/schema @aeternity/aepp-sdk/es/tx @aeternity/aepp-sdk/es/tx/tx-object @aeternity/aepp-sdk/es/tx/tx @aeternity/aepp-sdk/es/tx/validator @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector @aeternity/aepp-sdk/es/utils/amount-formatter @aeternity/aepp-sdk/es/utils/bignumber @aeternity/aepp-sdk/es/utils/bytes @aeternity/aepp-sdk/es/utils/crypto @aeternity/aepp-sdk/es/utils/keystore @aeternity/aepp-sdk/es/utils/swagger","title":"API Table of Contents"},{"location":"api/account/","text":"@aeternity/aepp-sdk/es/account Account module Example import Account from '@aeternity/aepp-sdk/es/account' @aeternity/aepp-sdk/es/account Account([options]) \u21d2 Object \u23cf .signTransaction(tx, opt) \u21d2 String .getNetworkId() \u21d2 String .signMessage(message, opt) \u21d2 String .verifyMessage(message, signature, opt) \u21d2 Boolean .sign(data) \u21d2 String .address() \u21d2 String Account([options]) \u21d2 Object \u23cf Basic Account Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Account is one of the three basic building blocks of an Ae client and provides access to a signing key pair. Kind : Exported function Returns : Object - Account instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.networkId String NETWORK_ID using for signing transaction's account.signTransaction(tx, opt) \u21d2 String Sign encoded transaction Kind : instance method of Account Returns : String - Signed transaction Category : async rtype : (tx: String) => tx: Promise[String], throws: Error Param Type Description tx String Transaction to sign opt Object Options account.getNetworkId() \u21d2 String Get network Id Kind : instance method of Account Returns : String - Network Id Category : async rtype : () => networkId: String account.signMessage(message, opt) \u21d2 String Sign message Kind : instance method of Account Returns : String - Signature Category : async rtype : (msg: String) => signature: Promise[String], throws: Error Param Type Description message String Message to sign opt Object Options account.verifyMessage(message, signature, opt) \u21d2 Boolean Verify message Kind : instance method of Account Category : async rtype : (msg: String, signature: String, publicKey: String) => signature: Promise[String], throws: Error Param Type Description message String Message to verify signature String Signature opt Object Options account.sign(data) \u21d2 String Sign data blob Kind : instance abstract method of Account Returns : String - Signed data blob Category : async rtype : (data: String) => data: Promise[String] Param Type Description data String Data blob to sign account.address() \u21d2 String Obtain account address Kind : instance abstract method of Account Returns : String - Public account address Category : async rtype : () => address: Promise[String]","title":"Account"},{"location":"api/account/#aeternityaepp-sdkesaccount","text":"Account module Example import Account from '@aeternity/aepp-sdk/es/account' @aeternity/aepp-sdk/es/account Account([options]) \u21d2 Object \u23cf .signTransaction(tx, opt) \u21d2 String .getNetworkId() \u21d2 String .signMessage(message, opt) \u21d2 String .verifyMessage(message, signature, opt) \u21d2 Boolean .sign(data) \u21d2 String .address() \u21d2 String","title":"@aeternity/aepp-sdk/es/account"},{"location":"api/account/#accountoptions-object","text":"Basic Account Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Account is one of the three basic building blocks of an Ae client and provides access to a signing key pair. Kind : Exported function Returns : Object - Account instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.networkId String NETWORK_ID using for signing transaction's","title":"Account([options]) \u21d2 Object \u23cf"},{"location":"api/account/#accountsigntransactiontx-opt-string","text":"Sign encoded transaction Kind : instance method of Account Returns : String - Signed transaction Category : async rtype : (tx: String) => tx: Promise[String], throws: Error Param Type Description tx String Transaction to sign opt Object Options","title":"account.signTransaction(tx, opt) \u21d2 String"},{"location":"api/account/#accountgetnetworkid-string","text":"Get network Id Kind : instance method of Account Returns : String - Network Id Category : async rtype : () => networkId: String","title":"account.getNetworkId() \u21d2 String"},{"location":"api/account/#accountsignmessagemessage-opt-string","text":"Sign message Kind : instance method of Account Returns : String - Signature Category : async rtype : (msg: String) => signature: Promise[String], throws: Error Param Type Description message String Message to sign opt Object Options","title":"account.signMessage(message, opt) \u21d2 String"},{"location":"api/account/#accountverifymessagemessage-signature-opt-boolean","text":"Verify message Kind : instance method of Account Category : async rtype : (msg: String, signature: String, publicKey: String) => signature: Promise[String], throws: Error Param Type Description message String Message to verify signature String Signature opt Object Options","title":"account.verifyMessage(message, signature, opt) \u21d2 Boolean"},{"location":"api/account/#accountsigndata-string","text":"Sign data blob Kind : instance abstract method of Account Returns : String - Signed data blob Category : async rtype : (data: String) => data: Promise[String] Param Type Description data String Data blob to sign","title":"account.sign(data) \u21d2 String"},{"location":"api/account/#accountaddress-string","text":"Obtain account address Kind : instance abstract method of Account Returns : String - Public account address Category : async rtype : () => address: Promise[String]","title":"account.address() \u21d2 String"},{"location":"api/accounts/","text":"@aeternity/aepp-sdk/es/accounts Accounts module Example import Accounts from '@aeternity/aepp-sdk/es/accounts' @aeternity/aepp-sdk/es/accounts removeAccount(address) \u21d2 Void \u23cf addresses() \u21d2 Array.&lt;String&gt; \u23cf Accounts([options]) \u21d2 Object \u23cf async signWith(address, data) \u21d2 String \u23cf addAccount(account, [options]) \u21d2 Void \u23cf removeAccount(address) \u21d2 Void \u23cf Remove specific account Kind : Exported function rtype : (address: String) => Void Param Type Description address String Address of account to remove Example removeAccount(address) addresses() \u21d2 Array.&lt;String&gt; \u23cf Get accounts addresses Kind : Exported function rtype : () => String[] Example addresses() Accounts([options]) \u21d2 Object \u23cf Accounts Stamp The purpose of the Accounts Stamp is to wrap up Account objects and provide a common interface to all of them. Accounts are a substantial part of module:@aeternity/aepp-sdk/es/ae/wallet--Wallet s. Kind : Exported function Returns : Object - Accounts instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.accounts] Array Accounts array Example const accounts = await Accounts({ accounts: [ MemmoryAccount({ keypair: 'keypair_object' }) ] }) await accounts.addAccount(account, { select: true }) // Add account and make it selected accounts.removeAccount(address) // Remove account accounts.selectAccount(address) // Select account accounts.addresses() // Get available accounts signWith(address, data) \u21d2 String \u23cf Sign data blob with specific key Kind : Exported function Returns : String - Signed data blob Category : async rtype : (address: String, data: String) => data: Promise[String], throws: Error Param Type Description address String Public key of account to sign with data String Data blob to sign addAccount(account, [options]) \u21d2 Void \u23cf Add specific account Kind : Exported function Category : async rtype : (account: Account, { select: Boolean }) => Void Param Type Default Description account Object Account instance [options] Object {} Options [options.select] Boolean Select account Example addAccount(account)","title":"Account Handling"},{"location":"api/accounts/#aeternityaepp-sdkesaccounts","text":"Accounts module Example import Accounts from '@aeternity/aepp-sdk/es/accounts' @aeternity/aepp-sdk/es/accounts removeAccount(address) \u21d2 Void \u23cf addresses() \u21d2 Array.&lt;String&gt; \u23cf Accounts([options]) \u21d2 Object \u23cf async signWith(address, data) \u21d2 String \u23cf addAccount(account, [options]) \u21d2 Void \u23cf","title":"@aeternity/aepp-sdk/es/accounts"},{"location":"api/accounts/#removeaccountaddress-void","text":"Remove specific account Kind : Exported function rtype : (address: String) => Void Param Type Description address String Address of account to remove Example removeAccount(address)","title":"removeAccount(address) \u21d2 Void \u23cf"},{"location":"api/accounts/#addresses-arrayltstringgt","text":"Get accounts addresses Kind : Exported function rtype : () => String[] Example addresses()","title":"addresses() \u21d2 Array.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/accounts/#accountsoptions-object","text":"Accounts Stamp The purpose of the Accounts Stamp is to wrap up Account objects and provide a common interface to all of them. Accounts are a substantial part of module:@aeternity/aepp-sdk/es/ae/wallet--Wallet s. Kind : Exported function Returns : Object - Accounts instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.accounts] Array Accounts array Example const accounts = await Accounts({ accounts: [ MemmoryAccount({ keypair: 'keypair_object' }) ] }) await accounts.addAccount(account, { select: true }) // Add account and make it selected accounts.removeAccount(address) // Remove account accounts.selectAccount(address) // Select account accounts.addresses() // Get available accounts","title":"Accounts([options]) \u21d2 Object \u23cf"},{"location":"api/accounts/#signwithaddress-data-string","text":"Sign data blob with specific key Kind : Exported function Returns : String - Signed data blob Category : async rtype : (address: String, data: String) => data: Promise[String], throws: Error Param Type Description address String Public key of account to sign with data String Data blob to sign","title":"signWith(address, data) \u21d2 String \u23cf"},{"location":"api/accounts/#addaccountaccount-options-void","text":"Add specific account Kind : Exported function Category : async rtype : (account: Account, { select: Boolean }) => Void Param Type Default Description account Object Account instance [options] Object {} Options [options.select] Boolean Select account Example addAccount(account)","title":"addAccount(account, [options]) \u21d2 Void \u23cf"},{"location":"api/ae/","text":"@aeternity/aepp-sdk/es/ae Ae module Example import Ae from '@aeternity/aepp-sdk/es/ae' @aeternity/aepp-sdk/es/ae Ae([options]) \u21d2 Object \u23cf .destroyInstance() \u21d2 void async .send(tx, [options]) \u21d2 Object .spend(amount, recipientIdOrName, [options]) \u21d2 Object .transferFunds(fraction, recipientIdOrName, [options]) \u21d2 Object Ae([options]) \u21d2 Object \u23cf Basic Ae Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Ae objects are the composition of three basic building blocks: * Tx * Account * Chain Only by providing the joint functionality of those three, most more advanced operations, i.e. the ones with actual use value on the chain, become available. Kind : Exported function Returns : Object - Ae instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object ae.destroyInstance() \u21d2 void Remove all listeners for RPC Kind : instance method of Ae ae.send(tx, [options]) \u21d2 Object Sign and post a transaction to the chain Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (tx: String, options: Object) => Promise[String] Param Type Default Description tx String Transaction [options] Object {} options - Options [options.verify] Object verify - Verify transaction before broadcast, throw error if not valid ae.spend(amount, recipientIdOrName, [options]) \u21d2 Object Send tokens to another account Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (amount: Number|String, recipientIdOrName: String, options?: Object) => Promise[String] Param Type Description amount Number | String Amount to spend recipientIdOrName String Address or name of recipient account [options] Object Options ae.transferFunds(fraction, recipientIdOrName, [options]) \u21d2 Object Send a fraction of token balance to another account Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (fraction: Number|String, recipientIdOrName: String, options?: Object) => Promise[String] Param Type Description fraction Number | String Fraction of balance to spend (between 0 and 1) recipientIdOrName String Address or name of recipient account [options] Object Options","title":"AE Utilities"},{"location":"api/ae/#aeternityaepp-sdkesae","text":"Ae module Example import Ae from '@aeternity/aepp-sdk/es/ae' @aeternity/aepp-sdk/es/ae Ae([options]) \u21d2 Object \u23cf .destroyInstance() \u21d2 void async .send(tx, [options]) \u21d2 Object .spend(amount, recipientIdOrName, [options]) \u21d2 Object .transferFunds(fraction, recipientIdOrName, [options]) \u21d2 Object","title":"@aeternity/aepp-sdk/es/ae"},{"location":"api/ae/#aeoptions-object","text":"Basic Ae Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Ae objects are the composition of three basic building blocks: * Tx * Account * Chain Only by providing the joint functionality of those three, most more advanced operations, i.e. the ones with actual use value on the chain, become available. Kind : Exported function Returns : Object - Ae instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Ae([options]) \u21d2 Object \u23cf"},{"location":"api/ae/#aedestroyinstance-void","text":"Remove all listeners for RPC Kind : instance method of Ae","title":"ae.destroyInstance() \u21d2 void"},{"location":"api/ae/#aesendtx-options-object","text":"Sign and post a transaction to the chain Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (tx: String, options: Object) => Promise[String] Param Type Default Description tx String Transaction [options] Object {} options - Options [options.verify] Object verify - Verify transaction before broadcast, throw error if not valid","title":"ae.send(tx, [options]) \u21d2 Object"},{"location":"api/ae/#aespendamount-recipientidorname-options-object","text":"Send tokens to another account Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (amount: Number|String, recipientIdOrName: String, options?: Object) => Promise[String] Param Type Description amount Number | String Amount to spend recipientIdOrName String Address or name of recipient account [options] Object Options","title":"ae.spend(amount, recipientIdOrName, [options]) \u21d2 Object"},{"location":"api/ae/#aetransferfundsfraction-recipientidorname-options-object","text":"Send a fraction of token balance to another account Kind : instance method of Ae Returns : Object - Transaction Category : async rtype : (fraction: Number|String, recipientIdOrName: String, options?: Object) => Promise[String] Param Type Description fraction Number | String Fraction of balance to spend (between 0 and 1) recipientIdOrName String Address or name of recipient account [options] Object Options","title":"ae.transferFunds(fraction, recipientIdOrName, [options]) \u21d2 Object"},{"location":"api/chain/","text":"@aeternity/aepp-sdk/es/chain Chain module Example import Chain from '@aeternity/aepp-sdk/es/chain' @aeternity/aepp-sdk/es/chain Chain([options]) \u21d2 Object \u23cf instance async .sendTransaction(tx, [options]) \u21d2 Object .height() \u21d2 Number .awaitHeight([options]) \u21d2 Number .poll([options]) \u21d2 Object .balance(address, [options]) \u21d2 Object .tx(hash, info) \u21d2 Object .getTxInfo(hash) \u21d2 Object .mempool() \u21d2 Array.&lt;Object&gt; .getCurrentGeneration() \u21d2 Object .getGeneration(hashOrHeight) \u21d2 Object .waitForTxConfirm(txHash, [options]) \u21d2 Promise.&lt;Number&gt; .getMicroBlockTransactions() \u21d2 Array.&lt;Object&gt; .getKeyBlock() \u21d2 Object .getMicroBlockHeader() \u21d2 Object .getAccount(address, [options]) \u21d2 Object .txDryRun(txs, accounts, hashOrHeight) \u21d2 Object .getInfo() \u21d2 Object static .waitMined(bool) \u21d2 Stamp Chain([options]) \u21d2 Object \u23cf Basic Chain Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Chain instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object chain.sendTransaction(tx, [options]) \u21d2 Object Submit a signed transaction for mining Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (tx: String, options?: Object) => tx: Promise[Object]|txHash: Promise[String] Param Type Default Description tx String Transaction to submit [options] String {} Options to pass to the implementation [options.verify] String false Verify transaction before broadcast. chain.height() \u21d2 Number Obtain current height of the chain Kind : instance abstract method of Chain Returns : Number - Current chain height Category : async rtype : () => height: Number chain.awaitHeight([options]) \u21d2 Number Wait for the chain to reach a specific height Kind : instance abstract method of Chain Returns : Number - Current chain height Category : async rtype : (height: Number, options?: Object) => height: Number Param Type Default Description [options] Object {} Options options.interval Number Interval (in ms) at which to poll the chain options.attempts Number Number of polling attempts after which to fail chain.poll([options]) \u21d2 Object Wait for a transaction to be mined Kind : instance abstract method of Chain Returns : Object - The transaction as it was mined Category : async rtype : (th: String, options?: Object) => tx: Object Param Type Default Description [options] Object {} Options options.interval Number Interval (in ms) at which to poll the chain options.blocks Number Number of blocks mined after which to fail chain.balance(address, [options]) \u21d2 Object Request the balance of specified account Kind : instance abstract method of Chain Returns : Object - The transaction as it was mined Category : async rtype : (address: String, options?: Object) => balance: Number Param Type Default Description address String The public account address to obtain the balance for [options] Object {} Options options.height Number The chain height at which to obtain the balance for (default: top of chain) options.hash String The block hash on which to obtain the balance for (default: top of chain) chain.tx(hash, info) \u21d2 Object Obtain a transaction based on its hash Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (hash: String, info = false) => tx: Object Param Type Description hash String Transaction hash info Boolean Retrieve additional transaction date. Works only for (ContractCreate and ContractCall transaction's) chain.getTxInfo(hash) \u21d2 Object Obtain a transaction info based on its hash Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (hash: String) => tx: Object Param Type Description hash String Transaction hash chain.mempool() \u21d2 Array.&lt;Object&gt; Obtain transaction's from mempool Kind : instance abstract method of Chain Returns : Array.&lt;Object&gt; - Transactions Category : async rtype : () => txs: [...Object] chain.getCurrentGeneration() \u21d2 Object Obtain current generation Kind : instance abstract method of Chain Returns : Object - Current Generation Category : async rtype : () => generation: Object chain.getGeneration(hashOrHeight) \u21d2 Object Get generation by hash or height Kind : instance abstract method of Chain Returns : Object - Generation Category : async rtype : (hashOrHeight) => generation: Object Param Type Description hashOrHeight String | Number Generation hash or height chain.waitForTxConfirm(txHash, [options]) \u21d2 Promise.&lt;Number&gt; Wait for transaction confirmation Kind : instance abstract method of Chain Returns : Promise.&lt;Number&gt; - Current Height Category : async rtype : (txHash: String, { confirm: Number | Boolean } = { confirm: 3 }) => Promise<Number> Param Type Default Description txHash String Generation hash or height [options] String {} options [options.confirm] String 3 Block confirmation count chain.getMicroBlockTransactions() \u21d2 Array.&lt;Object&gt; Get micro block transactions Kind : instance abstract method of Chain Returns : Array.&lt;Object&gt; - Transactions Category : async rtype : (hash) => txs: [...Object] chain.getKeyBlock() \u21d2 Object Get key block Kind : instance abstract method of Chain Returns : Object - Key Block Category : async rtype : (hashOrHeight) => keyBlock: Object chain.getMicroBlockHeader() \u21d2 Object Get micro block header Kind : instance abstract method of Chain Returns : Object - Micro block header Category : async rtype : (hash) => header: Object chain.getAccount(address, [options]) \u21d2 Object Get account by account public key Kind : instance abstract method of Chain Returns : Object - Account Category : async rtype : (address, { hash, height }) => account: Object Param Type Default Description address String Account public key [options] Object {} Options [options.height] Number Get account on specific block by block height [options.hash] String Get account on specific block by block hash chain.txDryRun(txs, accounts, hashOrHeight) \u21d2 Object Transaction dry-run Kind : instance abstract method of Chain Returns : Object - Result Category : async rtype : (txs, accounts, hashOrHeight) => result: Object Param Type Description txs Array Array of transaction's accounts Array Array of account's hashOrHeight String | Number hash or height of block on which to make dry-run chain.getInfo() \u21d2 Object Get Node Info Kind : instance abstract method of Chain Returns : Object - Result Category : async rtype : () => result: Object Chain.waitMined(bool) \u21d2 Stamp Reconfigure Stamp to (not) wait until transactions are mined Kind : static method of Chain Returns : Stamp - Reconfigured Chain Stamp rtype : (bool: Boolean) => Stamp Param Type Description bool boolean Whether to wait for transactions","title":"Chain"},{"location":"api/chain/#aeternityaepp-sdkeschain","text":"Chain module Example import Chain from '@aeternity/aepp-sdk/es/chain' @aeternity/aepp-sdk/es/chain Chain([options]) \u21d2 Object \u23cf instance async .sendTransaction(tx, [options]) \u21d2 Object .height() \u21d2 Number .awaitHeight([options]) \u21d2 Number .poll([options]) \u21d2 Object .balance(address, [options]) \u21d2 Object .tx(hash, info) \u21d2 Object .getTxInfo(hash) \u21d2 Object .mempool() \u21d2 Array.&lt;Object&gt; .getCurrentGeneration() \u21d2 Object .getGeneration(hashOrHeight) \u21d2 Object .waitForTxConfirm(txHash, [options]) \u21d2 Promise.&lt;Number&gt; .getMicroBlockTransactions() \u21d2 Array.&lt;Object&gt; .getKeyBlock() \u21d2 Object .getMicroBlockHeader() \u21d2 Object .getAccount(address, [options]) \u21d2 Object .txDryRun(txs, accounts, hashOrHeight) \u21d2 Object .getInfo() \u21d2 Object static .waitMined(bool) \u21d2 Stamp","title":"@aeternity/aepp-sdk/es/chain"},{"location":"api/chain/#chainoptions-object","text":"Basic Chain Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Chain instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Chain([options]) \u21d2 Object \u23cf"},{"location":"api/chain/#chainsendtransactiontx-options-object","text":"Submit a signed transaction for mining Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (tx: String, options?: Object) => tx: Promise[Object]|txHash: Promise[String] Param Type Default Description tx String Transaction to submit [options] String {} Options to pass to the implementation [options.verify] String false Verify transaction before broadcast.","title":"chain.sendTransaction(tx, [options]) \u21d2 Object"},{"location":"api/chain/#chainheight-number","text":"Obtain current height of the chain Kind : instance abstract method of Chain Returns : Number - Current chain height Category : async rtype : () => height: Number","title":"chain.height() \u21d2 Number"},{"location":"api/chain/#chainawaitheightoptions-number","text":"Wait for the chain to reach a specific height Kind : instance abstract method of Chain Returns : Number - Current chain height Category : async rtype : (height: Number, options?: Object) => height: Number Param Type Default Description [options] Object {} Options options.interval Number Interval (in ms) at which to poll the chain options.attempts Number Number of polling attempts after which to fail","title":"chain.awaitHeight([options]) \u21d2 Number"},{"location":"api/chain/#chainpolloptions-object","text":"Wait for a transaction to be mined Kind : instance abstract method of Chain Returns : Object - The transaction as it was mined Category : async rtype : (th: String, options?: Object) => tx: Object Param Type Default Description [options] Object {} Options options.interval Number Interval (in ms) at which to poll the chain options.blocks Number Number of blocks mined after which to fail","title":"chain.poll([options]) \u21d2 Object"},{"location":"api/chain/#chainbalanceaddress-options-object","text":"Request the balance of specified account Kind : instance abstract method of Chain Returns : Object - The transaction as it was mined Category : async rtype : (address: String, options?: Object) => balance: Number Param Type Default Description address String The public account address to obtain the balance for [options] Object {} Options options.height Number The chain height at which to obtain the balance for (default: top of chain) options.hash String The block hash on which to obtain the balance for (default: top of chain)","title":"chain.balance(address, [options]) \u21d2 Object"},{"location":"api/chain/#chaintxhash-info-object","text":"Obtain a transaction based on its hash Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (hash: String, info = false) => tx: Object Param Type Description hash String Transaction hash info Boolean Retrieve additional transaction date. Works only for (ContractCreate and ContractCall transaction's)","title":"chain.tx(hash, info) \u21d2 Object"},{"location":"api/chain/#chaingettxinfohash-object","text":"Obtain a transaction info based on its hash Kind : instance abstract method of Chain Returns : Object - Transaction Category : async rtype : (hash: String) => tx: Object Param Type Description hash String Transaction hash","title":"chain.getTxInfo(hash) \u21d2 Object"},{"location":"api/chain/#chainmempool-arrayltobjectgt","text":"Obtain transaction's from mempool Kind : instance abstract method of Chain Returns : Array.&lt;Object&gt; - Transactions Category : async rtype : () => txs: [...Object]","title":"chain.mempool() \u21d2 Array.&amp;lt;Object&amp;gt;"},{"location":"api/chain/#chaingetcurrentgeneration-object","text":"Obtain current generation Kind : instance abstract method of Chain Returns : Object - Current Generation Category : async rtype : () => generation: Object","title":"chain.getCurrentGeneration() \u21d2 Object"},{"location":"api/chain/#chaingetgenerationhashorheight-object","text":"Get generation by hash or height Kind : instance abstract method of Chain Returns : Object - Generation Category : async rtype : (hashOrHeight) => generation: Object Param Type Description hashOrHeight String | Number Generation hash or height","title":"chain.getGeneration(hashOrHeight) \u21d2 Object"},{"location":"api/chain/#chainwaitfortxconfirmtxhash-options-promiseltnumbergt","text":"Wait for transaction confirmation Kind : instance abstract method of Chain Returns : Promise.&lt;Number&gt; - Current Height Category : async rtype : (txHash: String, { confirm: Number | Boolean } = { confirm: 3 }) => Promise<Number> Param Type Default Description txHash String Generation hash or height [options] String {} options [options.confirm] String 3 Block confirmation count","title":"chain.waitForTxConfirm(txHash, [options]) \u21d2 Promise.&amp;lt;Number&amp;gt;"},{"location":"api/chain/#chaingetmicroblocktransactions-arrayltobjectgt","text":"Get micro block transactions Kind : instance abstract method of Chain Returns : Array.&lt;Object&gt; - Transactions Category : async rtype : (hash) => txs: [...Object]","title":"chain.getMicroBlockTransactions() \u21d2 Array.&amp;lt;Object&amp;gt;"},{"location":"api/chain/#chaingetkeyblock-object","text":"Get key block Kind : instance abstract method of Chain Returns : Object - Key Block Category : async rtype : (hashOrHeight) => keyBlock: Object","title":"chain.getKeyBlock() \u21d2 Object"},{"location":"api/chain/#chaingetmicroblockheader-object","text":"Get micro block header Kind : instance abstract method of Chain Returns : Object - Micro block header Category : async rtype : (hash) => header: Object","title":"chain.getMicroBlockHeader() \u21d2 Object"},{"location":"api/chain/#chaingetaccountaddress-options-object","text":"Get account by account public key Kind : instance abstract method of Chain Returns : Object - Account Category : async rtype : (address, { hash, height }) => account: Object Param Type Default Description address String Account public key [options] Object {} Options [options.height] Number Get account on specific block by block height [options.hash] String Get account on specific block by block hash","title":"chain.getAccount(address, [options]) \u21d2 Object"},{"location":"api/chain/#chaintxdryruntxs-accounts-hashorheight-object","text":"Transaction dry-run Kind : instance abstract method of Chain Returns : Object - Result Category : async rtype : (txs, accounts, hashOrHeight) => result: Object Param Type Description txs Array Array of transaction's accounts Array Array of account's hashOrHeight String | Number hash or height of block on which to make dry-run","title":"chain.txDryRun(txs, accounts, hashOrHeight) \u21d2 Object"},{"location":"api/chain/#chaingetinfo-object","text":"Get Node Info Kind : instance abstract method of Chain Returns : Object - Result Category : async rtype : () => result: Object","title":"chain.getInfo() \u21d2 Object"},{"location":"api/chain/#chainwaitminedbool-stamp","text":"Reconfigure Stamp to (not) wait until transactions are mined Kind : static method of Chain Returns : Stamp - Reconfigured Chain Stamp rtype : (bool: Boolean) => Stamp Param Type Description bool boolean Whether to wait for transactions","title":"Chain.waitMined(bool) \u21d2 Stamp"},{"location":"api/contract/","text":"@aeternity/aepp-sdk/es/contract Contract Base module Example import ContractBase from '@aeternity/aepp-sdk/es/contract' @aeternity/aepp-sdk/es/contract ContractBase([options]) \u21d2 Object \u23cf .contractGetACI(source, [options]) \u21d2 Object .contractEncodeCallDataAPI(source, name, args, [options]) \u21d2 String .contractDecodeDataAPI(type, data) \u21d2 String .contractDecodeCallResultAPI(source, fn, callValue, callResult, [options]) \u21d2 String .contractDecodeCallDataBySourceAPI(source, function, callData, [options]) \u21d2 String .contractDecodeCallDataByCodeAPI(code, callData, backend) \u21d2 String .compileContractAPI(code, [options]) \u21d2 Object .setCompilerUrl(url) \u21d2 void .getCompilerVersion() \u21d2 String ContractBase([options]) \u21d2 Object \u23cf Basic Contract Stamp This stamp include api call's related to contract functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Contract instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object contractBase.contractGetACI(source, [options]) \u21d2 Object Get contract ACI Kind : instance abstract method of ContractBase Returns : Object - - Contract aci object Category : async rtype : (source: String, options: Array) => aciObject: Promise[Object] Param Type Default Description source String Contract source code [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm) contractBase.contractEncodeCallDataAPI(source, name, args, [options]) \u21d2 String Encode contract data Kind : instance abstract method of ContractBase Returns : String - - Contract encoded data Category : async rtype : (source: String, name: String, args: Array, options: Array) => callData: Promise[String] Param Type Default Description source String Contract source code name String Function name args Array Function argument's [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm) contractBase.contractDecodeDataAPI(type, data) \u21d2 String Decode data Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call result Category : async rtype : (type: String, data: String) => decodedResult: Promise[String] Param Type Description type String Contract call result type data String Encoded contract call result contractBase.contractDecodeCallResultAPI(source, fn, callValue, callResult, [options]) \u21d2 String Decode contract call result data Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call result Category : async rtype : (source: String, fn: String, callValue: String, callResult: String, options: Array) => decodedResult: Promise[String] Param Type Default Description source String Contract source fn String Fn name callValue String result data (cb_das...) callResult String contract call result status('ok', 'revert', ...) [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm) contractBase.contractDecodeCallDataBySourceAPI(source, function, callData, [options]) \u21d2 String Decode call data by source Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call data Category : async rtype : (source: String, function: String, callData: String, options: Array) => decodedResult: Promise[String] Param Type Default Description source String contract source function String function name callData String Encoded contract call data [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm) contractBase.contractDecodeCallDataByCodeAPI(code, callData, backend) \u21d2 String Decode call data by bytecode Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call data Category : async rtype : (code: String, callData: String) => decodedResult: Promise[String] Param Type Description code String contract byte code callData String Encoded contract call data backend String Contract vm(default: aevm) contractBase.compileContractAPI(code, [options]) \u21d2 Object Compile contract Kind : instance abstract method of ContractBase Returns : Object - Object which contain bytecode of contract Category : async rtype : (code: String, options?: Object) => compiledContract: Object Param Type Default Description code String Contract source code [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm) contractBase.setCompilerUrl(url) \u21d2 void Set compiler url Kind : instance abstract method of ContractBase Category : async rtype : (url: String) => void Param Type Description url String Compiler url contractBase.getCompilerVersion() \u21d2 String Get Compiler Version Kind : instance abstract method of ContractBase Returns : String - Compiler version Category : async rtype : () => String","title":"Contract"},{"location":"api/contract/#aeternityaepp-sdkescontract","text":"Contract Base module Example import ContractBase from '@aeternity/aepp-sdk/es/contract' @aeternity/aepp-sdk/es/contract ContractBase([options]) \u21d2 Object \u23cf .contractGetACI(source, [options]) \u21d2 Object .contractEncodeCallDataAPI(source, name, args, [options]) \u21d2 String .contractDecodeDataAPI(type, data) \u21d2 String .contractDecodeCallResultAPI(source, fn, callValue, callResult, [options]) \u21d2 String .contractDecodeCallDataBySourceAPI(source, function, callData, [options]) \u21d2 String .contractDecodeCallDataByCodeAPI(code, callData, backend) \u21d2 String .compileContractAPI(code, [options]) \u21d2 Object .setCompilerUrl(url) \u21d2 void .getCompilerVersion() \u21d2 String","title":"@aeternity/aepp-sdk/es/contract"},{"location":"api/contract/#contractbaseoptions-object","text":"Basic Contract Stamp This stamp include api call's related to contract functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Contract instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"ContractBase([options]) \u21d2 Object \u23cf"},{"location":"api/contract/#contractbasecontractgetacisource-options-object","text":"Get contract ACI Kind : instance abstract method of ContractBase Returns : Object - - Contract aci object Category : async rtype : (source: String, options: Array) => aciObject: Promise[Object] Param Type Default Description source String Contract source code [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm)","title":"contractBase.contractGetACI(source, [options]) \u21d2 Object"},{"location":"api/contract/#contractbasecontractencodecalldataapisource-name-args-options-string","text":"Encode contract data Kind : instance abstract method of ContractBase Returns : String - - Contract encoded data Category : async rtype : (source: String, name: String, args: Array, options: Array) => callData: Promise[String] Param Type Default Description source String Contract source code name String Function name args Array Function argument's [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm)","title":"contractBase.contractEncodeCallDataAPI(source, name, args, [options]) \u21d2 String"},{"location":"api/contract/#contractbasecontractdecodedataapitype-data-string","text":"Decode data Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call result Category : async rtype : (type: String, data: String) => decodedResult: Promise[String] Param Type Description type String Contract call result type data String Encoded contract call result","title":"contractBase.contractDecodeDataAPI(type, data) \u21d2 String"},{"location":"api/contract/#contractbasecontractdecodecallresultapisource-fn-callvalue-callresult-options-string","text":"Decode contract call result data Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call result Category : async rtype : (source: String, fn: String, callValue: String, callResult: String, options: Array) => decodedResult: Promise[String] Param Type Default Description source String Contract source fn String Fn name callValue String result data (cb_das...) callResult String contract call result status('ok', 'revert', ...) [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm)","title":"contractBase.contractDecodeCallResultAPI(source, fn, callValue, callResult, [options]) \u21d2 String"},{"location":"api/contract/#contractbasecontractdecodecalldatabysourceapisource-function-calldata-options-string","text":"Decode call data by source Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call data Category : async rtype : (source: String, function: String, callData: String, options: Array) => decodedResult: Promise[String] Param Type Default Description source String contract source function String function name callData String Encoded contract call data [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm)","title":"contractBase.contractDecodeCallDataBySourceAPI(source, function, callData, [options]) \u21d2 String"},{"location":"api/contract/#contractbasecontractdecodecalldatabycodeapicode-calldata-backend-string","text":"Decode call data by bytecode Kind : instance abstract method of ContractBase Returns : String - - Decoded contract call data Category : async rtype : (code: String, callData: String) => decodedResult: Promise[String] Param Type Description code String contract byte code callData String Encoded contract call data backend String Contract vm(default: aevm)","title":"contractBase.contractDecodeCallDataByCodeAPI(code, callData, backend) \u21d2 String"},{"location":"api/contract/#contractbasecompilecontractapicode-options-object","text":"Compile contract Kind : instance abstract method of ContractBase Returns : Object - Object which contain bytecode of contract Category : async rtype : (code: String, options?: Object) => compiledContract: Object Param Type Default Description code String Contract source code [options] Object {} Options [options.filesystem] Object Contract external namespaces map [options.backend] Object Contract vm(default: aevm)","title":"contractBase.compileContractAPI(code, [options]) \u21d2 Object"},{"location":"api/contract/#contractbasesetcompilerurlurl-void","text":"Set compiler url Kind : instance abstract method of ContractBase Category : async rtype : (url: String) => void Param Type Description url String Compiler url","title":"contractBase.setCompilerUrl(url) \u21d2 void"},{"location":"api/contract/#contractbasegetcompilerversion-string","text":"Get Compiler Version Kind : instance abstract method of ContractBase Returns : String - Compiler version Category : async rtype : () => String","title":"contractBase.getCompilerVersion() \u21d2 String"},{"location":"api/node-pool/","text":"@aeternity/aepp-sdk/es/node-pool NodePool module Example import NodePool from '@aeternity/aepp-sdk/es/node-pool' @aeternity/aepp-sdk/es/node-pool exports.NodePool([options]) \u21d2 Object \u23cf addNode(name, nodeInstance, select) \u21d2 Void \u23cf selectNode(name) \u21d2 Void \u23cf getNetworkId() \u21d2 String \u23cf isNodeConnected() \u21d2 Boolean \u23cf getNodeInfo() \u21d2 Object \u23cf getNodesInPool() \u21d2 Array.&lt;Object&gt; \u23cf exports.NodePool([options]) \u21d2 Object \u23cf Node Pool Stamp This stamp allow you to make basic manipulation(add, remove, select) on list of nodes Kind : Exported function Returns : Object - NodePool instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.nodes] Array Array with Node instances addNode(name, nodeInstance, select) \u21d2 Void \u23cf Add Node Kind : Exported function rtype : (name: String, nodeInstance: Object, select: Boolean) => Void Param Type Description name String Node name nodeInstance Object Node instance select Boolean Select this node as current Example nodePool.addNode('testNode', awaitNode({ url, internalUrl }), true) // add and select new node with name 'testNode' selectNode(name) \u21d2 Void \u23cf Select Node Kind : Exported function rtype : (name: String) => Void Param Type Description name String Node name Example nodePool.selectNode('testNode') getNetworkId() \u21d2 String \u23cf Get NetworkId of current Node Kind : Exported function rtype : () => String Example nodePool.getNetworkId() isNodeConnected() \u21d2 Boolean \u23cf Check if you have selected node Kind : Exported function rtype : () => Boolean Example nodePool.isNodeConnected() getNodeInfo() \u21d2 Object \u23cf Get information about node Kind : Exported function rtype : () => Object Example nodePool.getNodeInfo() // { name, version, networkId, protocol, ... } getNodesInPool() \u21d2 Array.&lt;Object&gt; \u23cf Get array of available nodes Kind : Exported function rtype : () => Object[] Example nodePool.getNodesInPool()","title":"Node pool"},{"location":"api/node-pool/#aeternityaepp-sdkesnode-pool","text":"NodePool module Example import NodePool from '@aeternity/aepp-sdk/es/node-pool' @aeternity/aepp-sdk/es/node-pool exports.NodePool([options]) \u21d2 Object \u23cf addNode(name, nodeInstance, select) \u21d2 Void \u23cf selectNode(name) \u21d2 Void \u23cf getNetworkId() \u21d2 String \u23cf isNodeConnected() \u21d2 Boolean \u23cf getNodeInfo() \u21d2 Object \u23cf getNodesInPool() \u21d2 Array.&lt;Object&gt; \u23cf","title":"@aeternity/aepp-sdk/es/node-pool"},{"location":"api/node-pool/#exportsnodepooloptions-object","text":"Node Pool Stamp This stamp allow you to make basic manipulation(add, remove, select) on list of nodes Kind : Exported function Returns : Object - NodePool instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.nodes] Array Array with Node instances","title":"exports.NodePool([options]) \u21d2 Object \u23cf"},{"location":"api/node-pool/#addnodename-nodeinstance-select-void","text":"Add Node Kind : Exported function rtype : (name: String, nodeInstance: Object, select: Boolean) => Void Param Type Description name String Node name nodeInstance Object Node instance select Boolean Select this node as current Example nodePool.addNode('testNode', awaitNode({ url, internalUrl }), true) // add and select new node with name 'testNode'","title":"addNode(name, nodeInstance, select) \u21d2 Void \u23cf"},{"location":"api/node-pool/#selectnodename-void","text":"Select Node Kind : Exported function rtype : (name: String) => Void Param Type Description name String Node name Example nodePool.selectNode('testNode')","title":"selectNode(name) \u21d2 Void \u23cf"},{"location":"api/node-pool/#getnetworkid-string","text":"Get NetworkId of current Node Kind : Exported function rtype : () => String Example nodePool.getNetworkId()","title":"getNetworkId() \u21d2 String \u23cf"},{"location":"api/node-pool/#isnodeconnected-boolean","text":"Check if you have selected node Kind : Exported function rtype : () => Boolean Example nodePool.isNodeConnected()","title":"isNodeConnected() \u21d2 Boolean \u23cf"},{"location":"api/node-pool/#getnodeinfo-object","text":"Get information about node Kind : Exported function rtype : () => Object Example nodePool.getNodeInfo() // { name, version, networkId, protocol, ... }","title":"getNodeInfo() \u21d2 Object \u23cf"},{"location":"api/node-pool/#getnodesinpool-arrayltobjectgt","text":"Get array of available nodes Kind : Exported function rtype : () => Object[] Example nodePool.getNodesInPool()","title":"getNodesInPool() \u21d2 Array.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/node/","text":"@aeternity/aepp-sdk/es/node Node module Example import Node from '@aeternity/aepp-sdk/es/node' @aeternity/aepp-sdk/es/node Node([options]) \u21d2 Object \u23cf static async .getNetworkId() \u21d2 String inner ~loader(options) \u21d2 function ~getConsensusProtocolVersion(protocols, height) \u21d2 Number async ~remoteSwag(url, axiosConfig) \u21d2 Object Node([options]) \u21d2 Object \u23cf Swagger based Node remote API Stamp Kind : Exported function Returns : Object - Node client rtype : Stamp Param Type Default Description [options] Object {} Options options.url String Base URL for Node options.internalUrl String Base URL for internal requests options.axiosConfig String Object with axios configuration. Example { config: {}, errorHandler: (err) => throw err } Example Node({url: 'https://testnet.aeternity.io'}) Node.getNetworkId() \u21d2 String Obtain networkId from account or node Kind : static method of Node Returns : String - NetworkId Category : async rtype : () => networkId: String Node~loader(options) \u21d2 function Node specific loader for urlFor Kind : inner method of Node Returns : function - Implementation for urlFor rtype : ({url: String, internalUrl?: String}) => (path: String, definition: Object) => tx: String Param Type Description options Object options.url String Base URL for Node options.internalUrl String Base URL for internal requests Node~getConsensusProtocolVersion(protocols, height) \u21d2 Number get consensus protocol version Kind : inner method of Node Returns : Number - version Protocol version Param Type Description protocols Array Array of protocols height Number Height Node~remoteSwag(url, axiosConfig) \u21d2 Object Obtain Swagger configuration from Node node Kind : inner method of Node Returns : Object - Swagger configuration Category : async rtype : (url: String) => swagger: Object Param Type Description url String Node base URL axiosConfig Object Axios configuration object","title":"Node"},{"location":"api/node/#aeternityaepp-sdkesnode","text":"Node module Example import Node from '@aeternity/aepp-sdk/es/node' @aeternity/aepp-sdk/es/node Node([options]) \u21d2 Object \u23cf static async .getNetworkId() \u21d2 String inner ~loader(options) \u21d2 function ~getConsensusProtocolVersion(protocols, height) \u21d2 Number async ~remoteSwag(url, axiosConfig) \u21d2 Object","title":"@aeternity/aepp-sdk/es/node"},{"location":"api/node/#nodeoptions-object","text":"Swagger based Node remote API Stamp Kind : Exported function Returns : Object - Node client rtype : Stamp Param Type Default Description [options] Object {} Options options.url String Base URL for Node options.internalUrl String Base URL for internal requests options.axiosConfig String Object with axios configuration. Example { config: {}, errorHandler: (err) => throw err } Example Node({url: 'https://testnet.aeternity.io'})","title":"Node([options]) \u21d2 Object \u23cf"},{"location":"api/node/#nodegetnetworkid-string","text":"Obtain networkId from account or node Kind : static method of Node Returns : String - NetworkId Category : async rtype : () => networkId: String","title":"Node.getNetworkId() \u21d2 String"},{"location":"api/node/#nodeloaderoptions-function","text":"Node specific loader for urlFor Kind : inner method of Node Returns : function - Implementation for urlFor rtype : ({url: String, internalUrl?: String}) => (path: String, definition: Object) => tx: String Param Type Description options Object options.url String Base URL for Node options.internalUrl String Base URL for internal requests","title":"Node~loader(options) \u21d2 function"},{"location":"api/node/#nodegetconsensusprotocolversionprotocols-height-number","text":"get consensus protocol version Kind : inner method of Node Returns : Number - version Protocol version Param Type Description protocols Array Array of protocols height Number Height","title":"Node~getConsensusProtocolVersion(protocols, height) \u21d2 Number"},{"location":"api/node/#noderemoteswagurl-axiosconfig-object","text":"Obtain Swagger configuration from Node node Kind : inner method of Node Returns : Object - Swagger configuration Category : async rtype : (url: String) => swagger: Object Param Type Description url String Node base URL axiosConfig Object Axios configuration object","title":"Node~remoteSwag(url, axiosConfig) \u21d2 Object"},{"location":"api/oracle/","text":"@aeternity/aepp-sdk/es/oracle Oracle Base module Example import ContractBase from '@aeternity/aepp-sdk/es/oracle' @aeternity/aepp-sdk/es/oracle OracleBase([options]) \u21d2 Object \u23cf .getOracle(oracleId) \u21d2 Object .getOracleQueries(oracleId-) \u21d2 Object .getOracleQuery(oracleId, queryId) \u21d2 Object OracleBase([options]) \u21d2 Object \u23cf Basic Oracle Stamp This stamp include api call's related to oracle functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Oracle instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object oracleBase.getOracle(oracleId) \u21d2 Object Get oracle by oracle public key Kind : instance abstract method of OracleBase Returns : Object - - Oracle object Category : async rtype : (oracleId: String) => oracle: Promise[Object] Param Type Description oracleId String Oracle public key oracleBase.getOracleQueries(oracleId-) \u21d2 Object Get oracle queries Kind : instance abstract method of OracleBase Returns : Object - - Oracle queries Category : async rtype : (oracleId: String) => oracleQueries: Promise[Object] Param Type Description oracleId- String Oracle public key oracleBase.getOracleQuery(oracleId, queryId) \u21d2 Object Get oracle query Kind : instance abstract method of OracleBase Returns : Object - - Oracle query object Category : async rtype : (oracleId: String, queryId: String) => oracleQuery: Promise[Object] Param Type Description oracleId String Oracle public key queryId String Query id","title":"Oracle"},{"location":"api/oracle/#aeternityaepp-sdkesoracle","text":"Oracle Base module Example import ContractBase from '@aeternity/aepp-sdk/es/oracle' @aeternity/aepp-sdk/es/oracle OracleBase([options]) \u21d2 Object \u23cf .getOracle(oracleId) \u21d2 Object .getOracleQueries(oracleId-) \u21d2 Object .getOracleQuery(oracleId, queryId) \u21d2 Object","title":"@aeternity/aepp-sdk/es/oracle"},{"location":"api/oracle/#oraclebaseoptions-object","text":"Basic Oracle Stamp This stamp include api call's related to oracle functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - Oracle instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"OracleBase([options]) \u21d2 Object \u23cf"},{"location":"api/oracle/#oraclebasegetoracleoracleid-object","text":"Get oracle by oracle public key Kind : instance abstract method of OracleBase Returns : Object - - Oracle object Category : async rtype : (oracleId: String) => oracle: Promise[Object] Param Type Description oracleId String Oracle public key","title":"oracleBase.getOracle(oracleId) \u21d2 Object"},{"location":"api/oracle/#oraclebasegetoraclequeriesoracleid-object","text":"Get oracle queries Kind : instance abstract method of OracleBase Returns : Object - - Oracle queries Category : async rtype : (oracleId: String) => oracleQueries: Promise[Object] Param Type Description oracleId- String Oracle public key","title":"oracleBase.getOracleQueries(oracleId-) \u21d2 Object"},{"location":"api/oracle/#oraclebasegetoraclequeryoracleid-queryid-object","text":"Get oracle query Kind : instance abstract method of OracleBase Returns : Object - - Oracle query object Category : async rtype : (oracleId: String, queryId: String) => oracleQuery: Promise[Object] Param Type Description oracleId String Oracle public key queryId String Query id","title":"oracleBase.getOracleQuery(oracleId, queryId) \u21d2 Object"},{"location":"api/tx/","text":"@aeternity/aepp-sdk/es/tx Tx module Example import Tx from '@aeternity/aepp-sdk/es/tx' @aeternity/aepp-sdk/es/tx Tx([options]) \u21d2 Object \u23cf .spendTx(options) \u21d2 String .namePreclaimTx(options) \u21d2 String .nameClaimTx(options) \u21d2 String .nameTransferTx(options) \u21d2 String .nameUpdateTx(options) \u21d2 String .nameRevokeTx(options) \u21d2 String .contractCreateTx(options) \u21d2 String .contractCallTx(options) \u21d2 String .oracleRegisterTx(options) \u21d2 String .oracleExtendTx(options) \u21d2 String .oraclePostQuery(options) \u21d2 String .oracleRespondTx(options) \u21d2 String .getAccountNonce(address) \u21d2 Number Tx([options]) \u21d2 Object \u23cf Basic Tx Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Tx is one of the three basic building blocks of an Ae client and provides methods to create aeternity transactions. Kind : Exported function Returns : Object - Tx instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example Tx() tx.spendTx(options) \u21d2 String Create a spend_tx transaction Kind : instance abstract method of Tx Returns : String - spend_tx transaction Category : async rtype : ({sender?: String, recipientId: String, amount: Number, fee?: Number, ttl?: Number, nonce?: Number, payload?: String}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.namePreclaimTx(options) \u21d2 String Create a name_preclaim_tx transaction Kind : instance abstract method of Tx Returns : String - name_preclaim_tx transaction Category : async rtype : ({account?: String, commitment: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.nameClaimTx(options) \u21d2 String Create a name_claim_tx transaction Kind : instance abstract method of Tx Returns : String - name_claim_tx transaction Category : async rtype : ({account?: String, name: String, nameSalt: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.nameTransferTx(options) \u21d2 String Create a name_transfer_tx transaction Kind : instance abstract method of Tx Returns : String - name_transfer_tx transaction Category : async rtype : ({account?: String, nameId: String, recipientId: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.nameUpdateTx(options) \u21d2 String Create a name_update_tx transaction Kind : instance abstract method of Tx Returns : String - name_update_tx transaction Category : async rtype : ({account?: String, nameId: String, pointers: Object, nameTtl: Number, clientTtl: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.nameRevokeTx(options) \u21d2 String Create a name_revoke_tx transaction Kind : instance abstract method of Tx Returns : String - name_revoke_tx transaction Category : async rtype : ({account?: String, nameId: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.contractCreateTx(options) \u21d2 String Create a contract_create_tx transaction Kind : instance abstract method of Tx Returns : String - contract_create_tx transaction Category : async rtype : ({owner: String, code: String, callData: String, vmVersion: Number, deposit: Number, amount: Number, gas: Number, gasPrice: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.contractCallTx(options) \u21d2 String Create a contract_call_tx transaction Kind : instance abstract method of Tx Returns : String - contract_call_tx transaction Category : async rtype : ({callerId: String, contract: String, callData: String, vmVersion: Number, amount: Number, gas: Number, gasPrice: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.oracleRegisterTx(options) \u21d2 String Create a oracle_register_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_register_tx transaction Category : async rtype : ({ accountId: String, queryFormat: String, responseFormat: String, queryFee: String|Number, oracleTtl: Object, vmVersion: Number = ORACLE_VM_VERSION, fee?: Number, ttl?: Number, nonce?: Number }) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.oracleExtendTx(options) \u21d2 String Create a oracle_extend_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_extend_tx transaction Category : async rtype : ({ oracleId: String, callerId: String, oracleTtl: Object, fee?: Number, ttl: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.oraclePostQuery(options) \u21d2 String Create a oracle_post_query_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_post_query_tx transaction Category : async rtype : ({ oracleId: String, responseTtl: Object, query: String, queryTtl: Object, queryFee: String|Number, senderId: String, fee?: Number, ttl: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.oracleRespondTx(options) \u21d2 String Create a oracle_respond_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_respond_tx transaction Category : async rtype : ({ oracleId: String, callerId: String, responseTtl: Object, queryId: String, response: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from tx.getAccountNonce(address) \u21d2 Number Get Account Nonce Kind : instance abstract method of Tx Returns : Number - Result Category : async rtype : (address) => result: Number Param Type Description address String Account public key","title":"tx"},{"location":"api/tx/#aeternityaepp-sdkestx","text":"Tx module Example import Tx from '@aeternity/aepp-sdk/es/tx' @aeternity/aepp-sdk/es/tx Tx([options]) \u21d2 Object \u23cf .spendTx(options) \u21d2 String .namePreclaimTx(options) \u21d2 String .nameClaimTx(options) \u21d2 String .nameTransferTx(options) \u21d2 String .nameUpdateTx(options) \u21d2 String .nameRevokeTx(options) \u21d2 String .contractCreateTx(options) \u21d2 String .contractCallTx(options) \u21d2 String .oracleRegisterTx(options) \u21d2 String .oracleExtendTx(options) \u21d2 String .oraclePostQuery(options) \u21d2 String .oracleRespondTx(options) \u21d2 String .getAccountNonce(address) \u21d2 Number","title":"@aeternity/aepp-sdk/es/tx"},{"location":"api/tx/#txoptions-object","text":"Basic Tx Stamp Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Tx is one of the three basic building blocks of an Ae client and provides methods to create aeternity transactions. Kind : Exported function Returns : Object - Tx instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example Tx()","title":"Tx([options]) \u21d2 Object \u23cf"},{"location":"api/tx/#txspendtxoptions-string","text":"Create a spend_tx transaction Kind : instance abstract method of Tx Returns : String - spend_tx transaction Category : async rtype : ({sender?: String, recipientId: String, amount: Number, fee?: Number, ttl?: Number, nonce?: Number, payload?: String}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.spendTx(options) \u21d2 String"},{"location":"api/tx/#txnamepreclaimtxoptions-string","text":"Create a name_preclaim_tx transaction Kind : instance abstract method of Tx Returns : String - name_preclaim_tx transaction Category : async rtype : ({account?: String, commitment: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.namePreclaimTx(options) \u21d2 String"},{"location":"api/tx/#txnameclaimtxoptions-string","text":"Create a name_claim_tx transaction Kind : instance abstract method of Tx Returns : String - name_claim_tx transaction Category : async rtype : ({account?: String, name: String, nameSalt: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.nameClaimTx(options) \u21d2 String"},{"location":"api/tx/#txnametransfertxoptions-string","text":"Create a name_transfer_tx transaction Kind : instance abstract method of Tx Returns : String - name_transfer_tx transaction Category : async rtype : ({account?: String, nameId: String, recipientId: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.nameTransferTx(options) \u21d2 String"},{"location":"api/tx/#txnameupdatetxoptions-string","text":"Create a name_update_tx transaction Kind : instance abstract method of Tx Returns : String - name_update_tx transaction Category : async rtype : ({account?: String, nameId: String, pointers: Object, nameTtl: Number, clientTtl: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.nameUpdateTx(options) \u21d2 String"},{"location":"api/tx/#txnamerevoketxoptions-string","text":"Create a name_revoke_tx transaction Kind : instance abstract method of Tx Returns : String - name_revoke_tx transaction Category : async rtype : ({account?: String, nameId: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.nameRevokeTx(options) \u21d2 String"},{"location":"api/tx/#txcontractcreatetxoptions-string","text":"Create a contract_create_tx transaction Kind : instance abstract method of Tx Returns : String - contract_create_tx transaction Category : async rtype : ({owner: String, code: String, callData: String, vmVersion: Number, deposit: Number, amount: Number, gas: Number, gasPrice: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.contractCreateTx(options) \u21d2 String"},{"location":"api/tx/#txcontractcalltxoptions-string","text":"Create a contract_call_tx transaction Kind : instance abstract method of Tx Returns : String - contract_call_tx transaction Category : async rtype : ({callerId: String, contract: String, callData: String, vmVersion: Number, amount: Number, gas: Number, gasPrice: Number, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.contractCallTx(options) \u21d2 String"},{"location":"api/tx/#txoracleregistertxoptions-string","text":"Create a oracle_register_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_register_tx transaction Category : async rtype : ({ accountId: String, queryFormat: String, responseFormat: String, queryFee: String|Number, oracleTtl: Object, vmVersion: Number = ORACLE_VM_VERSION, fee?: Number, ttl?: Number, nonce?: Number }) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.oracleRegisterTx(options) \u21d2 String"},{"location":"api/tx/#txoracleextendtxoptions-string","text":"Create a oracle_extend_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_extend_tx transaction Category : async rtype : ({ oracleId: String, callerId: String, oracleTtl: Object, fee?: Number, ttl: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.oracleExtendTx(options) \u21d2 String"},{"location":"api/tx/#txoraclepostqueryoptions-string","text":"Create a oracle_post_query_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_post_query_tx transaction Category : async rtype : ({ oracleId: String, responseTtl: Object, query: String, queryTtl: Object, queryFee: String|Number, senderId: String, fee?: Number, ttl: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.oraclePostQuery(options) \u21d2 String"},{"location":"api/tx/#txoraclerespondtxoptions-string","text":"Create a oracle_respond_tx transaction Kind : instance abstract method of Tx Returns : String - oracle_respond_tx transaction Category : async rtype : ({ oracleId: String, callerId: String, responseTtl: Object, queryId: String, response: String, fee?: Number, ttl?: Number, nonce?: Number}) => tx: Promise[String] Param Type Description options Object The object to extract properties from","title":"tx.oracleRespondTx(options) \u21d2 String"},{"location":"api/tx/#txgetaccountnonceaddress-number","text":"Get Account Nonce Kind : instance abstract method of Tx Returns : Number - Result Category : async rtype : (address) => result: Number Param Type Description address String Account public key","title":"tx.getAccountNonce(address) \u21d2 Number"},{"location":"api/account/memory/","text":"@aeternity/aepp-sdk/es/account/memory Memory Account module Example import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' MemoryAccount([options]) \u21d2 Account \u23cf In-memory Account factory Kind : Exported function rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.keypair Object Key pair to use options.keypair.publicKey String Public key options.keypair.secretKey String Private key","title":"Memory"},{"location":"api/account/memory/#aeternityaepp-sdkesaccountmemory","text":"Memory Account module Example import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory'","title":"@aeternity/aepp-sdk/es/account/memory"},{"location":"api/account/memory/#memoryaccountoptions-account","text":"In-memory Account factory Kind : Exported function rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.keypair Object Key pair to use options.keypair.publicKey String Public key options.keypair.secretKey String Private key","title":"MemoryAccount([options]) \u21d2 Account \u23cf"},{"location":"api/account/selector/","text":"@aeternity/aepp-sdk/es/account/selector Accounts Selector module This is the complement to @aeternity/aepp-sdk/es/accounts . Example import Selector from '@aeternity/aepp-sdk/es/account/selector' @aeternity/aepp-sdk/es/account/selector Selector([options]) \u21d2 Account \u23cf instance .selectAccount(address) \u23cf Selector([options]) \u21d2 Account \u23cf Selector Stamp Kind : Exported function Returns : Account - Account instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example Selector() .selectAccount(address) \u23cf Select specific account Kind : instance method of @aeternity/aepp-sdk/es/account/selector rtype : (address: String) => Void Param Type Description address String Address of account to select Example selectAccount('ak_xxxxxxxx')","title":"Selector"},{"location":"api/account/selector/#aeternityaepp-sdkesaccountselector","text":"Accounts Selector module This is the complement to @aeternity/aepp-sdk/es/accounts . Example import Selector from '@aeternity/aepp-sdk/es/account/selector' @aeternity/aepp-sdk/es/account/selector Selector([options]) \u21d2 Account \u23cf instance .selectAccount(address) \u23cf","title":"@aeternity/aepp-sdk/es/account/selector"},{"location":"api/account/selector/#selectoroptions-account","text":"Selector Stamp Kind : Exported function Returns : Account - Account instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example Selector()","title":"Selector([options]) \u21d2 Account \u23cf"},{"location":"api/account/selector/#selectaccountaddress","text":"Select specific account Kind : instance method of @aeternity/aepp-sdk/es/account/selector rtype : (address: String) => Void Param Type Description address String Address of account to select Example selectAccount('ak_xxxxxxxx')","title":".selectAccount(address) \u23cf"},{"location":"api/ae/aens/","text":"@aeternity/aepp-sdk/es/ae/aens Aens module - routines to interact with the \u00e6ternity naming system The high-level description of the naming system is https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol repository. Example import Aens from '@aeternity/aepp-sdk/es/ae/aens' @aeternity/aepp-sdk/es/ae/aens Aens([options]) \u21d2 Object \u23cf instance async .revoke(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .update(name, pointers, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .transfer(name, account, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .query(name, opt) \u21d2 Promise.&lt;Object&gt; \u23cf .claim(name, salt, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .preclaim(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .bid(name, nameFee, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Aens([options]) \u21d2 Object \u23cf Aens Stamp Aens provides name-system related methods atop Ae clients. Kind : Exported function Returns : Object - Aens instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object .revoke(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Revoke a name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String Name hash [options] Object {} options [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensRevoke(name, { fee, ttl , nonce }) // or await nameObject.revoke({ fee, ttl, nonce }) .update(name, pointers, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Update a name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Throws : Invalid pointer array error Param Type Default Description name String AENS name pointers Array.&lt;String&gt; Array of name pointers. Can be oracle [options] Object {} [options.extendPointers] Boolean false extendPointers Get the pointers from the node and merge with provided one. Pointers with the same type will be overwrited [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce [options.nameTtl] Number | String | BigNumber 50000 nameTtl Name ttl represented in number of blocks (Max value is 50000 blocks) [options.clientTtl] Number | String | BigNumber 84600 clientTtl a suggestion as to how long any clients should cache this information Example const name = 'test.chain' const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...'] const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl }) // or await nameObject.update(pointersArray, { nameTtl, ttl, fee, nonce, clientTtl }) .transfer(name, account, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Transfer a domain to another account Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String AENS name account String Recipient account publick key [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const recipientPub = 'ak_asd23dasdas...' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce }) // or await nameObject.transfer(recipientPub, { ttl, fee, nonce }) .query(name, opt) \u21d2 Promise.&lt;Object&gt; \u23cf Query the AENS name info from the node and return the object with info and predefined functions for manipulating name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Param Type Description name String opt Object Options Example const nameObject = sdkInstance.aensQuery('test.chain') console.log(nameObject) { id, // name hash pointers, // array of pointers update, // Update name function extendTtl, // Extend Ttl name function transfer, // Transfer name function revoke // Revoke name function } .claim(name, salt, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Claim a previously preclaimed registration. This can only be done after the preclaim step Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - the result of the claim Category : async Param Type Default Description name String salt Number Salt from pre-claim, or 0 if it's a bid [options] Object {} options [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce [options.nameFee] Number | String Name Fee (By default calculated by sdk) [options.vsn] Number | String 2 Transaction vsn from Lima is 2 Example const name = 'test.chain' const salt = preclaimResult.salt // salt from pre-claim transaction await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee }) .preclaim(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Preclaim a name. Sends a hash of the name and a random salt to the node Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Param Type Default Description name String [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const salt = preclaimResult.salt // salt from pre-claim transaction await sdkInstance.aensPreclaim(name, { ttl, fee, nonce }) { ...transactionResult, claim, // Claim function (options={}) => claimTransactionResult salt, commitmentId } .bid(name, nameFee, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Bid to name auction Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String Domain name nameFee String | Number Name fee (bid fee) [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const bidFee = computeBidFee(name, startFee, incrementPercentage) await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })","title":"Aens"},{"location":"api/ae/aens/#aeternityaepp-sdkesaeaens","text":"Aens module - routines to interact with the \u00e6ternity naming system The high-level description of the naming system is https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol repository. Example import Aens from '@aeternity/aepp-sdk/es/ae/aens' @aeternity/aepp-sdk/es/ae/aens Aens([options]) \u21d2 Object \u23cf instance async .revoke(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .update(name, pointers, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .transfer(name, account, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .query(name, opt) \u21d2 Promise.&lt;Object&gt; \u23cf .claim(name, salt, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .preclaim(name, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .bid(name, nameFee, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf","title":"@aeternity/aepp-sdk/es/ae/aens"},{"location":"api/ae/aens/#aensoptions-object","text":"Aens Stamp Aens provides name-system related methods atop Ae clients. Kind : Exported function Returns : Object - Aens instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Aens([options]) \u21d2 Object \u23cf"},{"location":"api/ae/aens/#revokename-options-promiseltobjectgt","text":"Revoke a name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String Name hash [options] Object {} options [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensRevoke(name, { fee, ttl , nonce }) // or await nameObject.revoke({ fee, ttl, nonce })","title":".revoke(name, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#updatename-pointers-options-promiseltobjectgt","text":"Update a name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Throws : Invalid pointer array error Param Type Default Description name String AENS name pointers Array.&lt;String&gt; Array of name pointers. Can be oracle [options] Object {} [options.extendPointers] Boolean false extendPointers Get the pointers from the node and merge with provided one. Pointers with the same type will be overwrited [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce [options.nameTtl] Number | String | BigNumber 50000 nameTtl Name ttl represented in number of blocks (Max value is 50000 blocks) [options.clientTtl] Number | String | BigNumber 84600 clientTtl a suggestion as to how long any clients should cache this information Example const name = 'test.chain' const pointersArray = ['ak_asd23dasdas...,' 'ct_asdf34fasdasd...'] const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensUpdate(name, pointersArray, { nameTtl, ttl, fee, nonce, clientTtl }) // or await nameObject.update(pointersArray, { nameTtl, ttl, fee, nonce, clientTtl })","title":".update(name, pointers, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#transfername-account-options-promiseltobjectgt","text":"Transfer a domain to another account Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String AENS name account String Recipient account publick key [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const recipientPub = 'ak_asd23dasdas...' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensTransfer(name, recipientPub, { ttl, fee, nonce }) // or await nameObject.transfer(recipientPub, { ttl, fee, nonce })","title":".transfer(name, account, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#queryname-opt-promiseltobjectgt","text":"Query the AENS name info from the node and return the object with info and predefined functions for manipulating name Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Param Type Description name String opt Object Options Example const nameObject = sdkInstance.aensQuery('test.chain') console.log(nameObject) { id, // name hash pointers, // array of pointers update, // Update name function extendTtl, // Extend Ttl name function transfer, // Transfer name function revoke // Revoke name function }","title":".query(name, opt) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#claimname-salt-options-promiseltobjectgt","text":"Claim a previously preclaimed registration. This can only be done after the preclaim step Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - the result of the claim Category : async Param Type Default Description name String salt Number Salt from pre-claim, or 0 if it's a bid [options] Object {} options [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce [options.nameFee] Number | String Name Fee (By default calculated by sdk) [options.vsn] Number | String 2 Transaction vsn from Lima is 2 Example const name = 'test.chain' const salt = preclaimResult.salt // salt from pre-claim transaction await sdkInstance.aensClaim(name, salt, { ttl, fee, nonce, nameFee })","title":".claim(name, salt, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#preclaimname-options-promiseltobjectgt","text":"Preclaim a name. Sends a hash of the name and a random salt to the node Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Category : async Param Type Default Description name String [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const salt = preclaimResult.salt // salt from pre-claim transaction await sdkInstance.aensPreclaim(name, { ttl, fee, nonce }) { ...transactionResult, claim, // Claim function (options={}) => claimTransactionResult salt, commitmentId }","title":".preclaim(name, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aens/#bidname-namefee-options-promiseltobjectgt","text":"Bid to name auction Kind : instance method of @aeternity/aepp-sdk/es/ae/aens Returns : Promise.&lt;Object&gt; - Transaction result Category : async Param Type Default Description name String Domain name nameFee String | Number Name fee (bid fee) [options] Object {} [options.onAccount] String | Object onAccount Make operation on specific account from sdk(you pass publickKey) or using provided KeyPair(Can be keypair object or MemoryAccount) [options.fee] Number | String | BigNumber fee [options.ttl] Number | String | BigNumber ttl [options.nonce] Number | String | BigNumber nonce Example const name = 'test.chain' const bidFee = computeBidFee(name, startFee, incrementPercentage) await sdkInstance.aensBid(name, 213109412839123, { ttl, fee, nonce })","title":".bid(name, nameFee, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/aepp/","text":"@aeternity/aepp-sdk/es/ae/aepp Aepp module Example import Ae from '@aeternity/aepp-sdk/es/ae/aepp' exports.Aepp([options]) \u21d2 Object \u23cf Aepp Stamp Aepp provides Ae base functionality with Contract and Aens. This stamp can be used only with Wallet, all Aepp method's going through RPC to Wallet. Ae clients. Kind : Exported function Returns : Object - Aepp instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Aepp"},{"location":"api/ae/aepp/#aeternityaepp-sdkesaeaepp","text":"Aepp module Example import Ae from '@aeternity/aepp-sdk/es/ae/aepp'","title":"@aeternity/aepp-sdk/es/ae/aepp"},{"location":"api/ae/aepp/#exportsaeppoptions-object","text":"Aepp Stamp Aepp provides Ae base functionality with Contract and Aens. This stamp can be used only with Wallet, all Aepp method's going through RPC to Wallet. Ae clients. Kind : Exported function Returns : Object - Aepp instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"exports.Aepp([options]) \u21d2 Object \u23cf"},{"location":"api/ae/contract/","text":"@aeternity/aepp-sdk/es/ae/contract Contract module - routines to interact with the \u00e6ternity contract High level documentation of the contracts are available at https://github.com/aeternity/protocol/tree/master/contracts and Example import Contract from '@aeternity/aepp-sdk/es/ae/contract' (Using tree-shaking) Example import { Contract } from '@aeternity/aepp-sdk' (Using bundle) @aeternity/aepp-sdk/es/ae/contract exports.ContractAPI([options]) \u21d2 Object \u23cf async handleCallError(result, tx) \u21d2 Promise.&lt;void&gt; \u23cf contractEncodeCall(source, name, args, [options]) \u21d2 Promise.&lt;String&gt; \u23cf contractDecodeData(source, fn, callValue, callResult, [options]) \u21d2 Promise.&lt;String&gt; \u23cf contractCallStatic(source, address, name, args, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf contractCall(source, address, name, argsOrCallData, [options]) \u23cf contractDeploy(code, source, initState, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf contractCompile(source, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf delegateSignatureCommon(ids, [opt], [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNamePreclaimSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameClaimSignature(name, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameTransferSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameRevokeSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleRegisterSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleExtendSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleRespondSignature(queryId, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf exports.ContractAPI([options]) \u21d2 Object \u23cf Contract Stamp Provide contract implementation Ae clients. Kind : Exported function Returns : Object - Contract instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example import Transaction from '@aeternity/aepp-sdk/es/tx/tx import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory import ChainNode from '@aeternity/aepp-sdk/es/chain/node import ContractCompilerAPI from '@aeternity/aepp-sdk/es/contract/compiler // or using bundle import { Transaction, MemoryAccount, ChainNode, ContractCompilerAPI } from '@aeternity/aepp-sdk const ContractWithAE = await Contract .compose(Transaction, MemoryAccount, ChainNode) // AE implementation .compose(ContractCompilerAPI) // ContractBase implementation const client = await ContractWithAe({ url, internalUrl, compilerUrl, keypair, ... }) handleCallError(result, tx) \u21d2 Promise.&lt;void&gt; \u23cf Handle contract call error Kind : Exported function Category : async Throws : Error Decoded error Param Type Description result Object call result object tx Object Unpacked transaction contractEncodeCall(source, name, args, [options]) \u21d2 Promise.&lt;String&gt; \u23cf Encode call data for contract call Kind : Exported function Category : async Param Type Default Description source String Contract source code name String Name of function to call args Array Argument's for call [options] Object {} Options [options.filesystem] Object {} Contract external namespaces map [options.backend] Object 'fate' Compiler backend contractDecodeData(source, fn, callValue, callResult, [options]) \u21d2 Promise.&lt;String&gt; \u23cf Decode contract call result data Kind : Exported function Returns : Promise.&lt;String&gt; - Result object Category : async Param Type Default Description source String source code fn String function name callValue String result call data callResult String result status [options] Object {} Options [options.filesystem] Object {} Contract external namespaces map Example const decodedData = await client.contractDecodeData(SourceCode ,'functionName', 'cb_asdasdasd...', 'ok|revert')lt contractCallStatic(source, address, name, args, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Static contract call(using dry-run) Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description source String Contract source code address String Contract address name String Name of function to call args Array | String Argument's or callData for call/deploy transaction [options] Object {} Options [options.top] String Block hash on which you want to call contract [options.bytecode] String Block hash on which you want to call contract [options.options] Object Transaction options (fee, ttl, gas, amount, deposit) [options.options.filesystem] Object Contract external namespaces map Example const callResult = await client.contractCallStatic(source, address, fnName, args = [], { top, options = {} }) { result: TX_DATA, decode: (type) => Decode call result } contractCall(source, address, name, argsOrCallData, [options]) \u23cf Call contract function Kind : Exported function Category : async Param Type Default Description source String Contract source code address String Contract address or AENS name name String Name of function to call argsOrCallData Array | String Argument's array or callData for call function [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object Example const callResult = await client.contractCall(source, address, fnName, args = [], options) { hash: TX_HASH, result: TX_DATA, decode: (type) => Decode call result } contractDeploy(code, source, initState, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Deploy contract to the node Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description code String Compiled contract source String Contract source code initState Array | String Arguments of contract constructor(init) function. Can be array of arguments or callData string [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object Example const deployed = await client.contractDeploy(bytecode, source, init = [], options) { owner: OWNER_PUB_KEY, transaction: TX_HASH, address: CONTRACT_ADDRESS, createdAt: Date, result: DEPLOY_TX_DATA, call: (fnName, args = [], options) => Call contract function, callStatic: (fnName, args = [], options) => Static all contract function } contractCompile(source, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Compile contract source code Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description source String Contract sourece code [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object [options.backend] Object 'aevm' Contract backend version (aevm Example const compiled = await client.contractCompile(SOURCE_CODE) { bytecode: CONTRACT_BYTE_CODE, deploy: (init = [], options = {}) => Deploy Contract, encodeCall: (fnName, args = []) => Prepare callData } delegateSignatureCommon(ids, [opt], [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Utility method to create a delegate signature for a contract Kind : Exported function Returns : Promise.&lt;String&gt; - Signature in hex representation Category : async Param Type Default Description ids Array.&lt;String&gt; The list of id's to prepend [opt] Object {} options [opt] Object {} opt Options delegateNamePreclaimSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a name pre-claim to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options delegateNameClaimSignature(name, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a name claim to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description name String The name being claimed contractId String Contract Id [opt] Object {} opt Options delegateNameTransferSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a name transfer to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id name String The name being transferred [opt] Object {} opt Options delegateNameRevokeSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a name revoke to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id name String The name being revoked [opt] Object {} opt Options delegateOracleRegisterSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a Oracle register to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options delegateOracleExtendSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a Oracle extend to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options delegateOracleRespondSignature(queryId, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf Helper to generate a signature to delegate a Oracle respond to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description queryId String Oracle Query Id contractId String Contract Id [opt] Object {} opt Options","title":"Contract"},{"location":"api/ae/contract/#aeternityaepp-sdkesaecontract","text":"Contract module - routines to interact with the \u00e6ternity contract High level documentation of the contracts are available at https://github.com/aeternity/protocol/tree/master/contracts and Example import Contract from '@aeternity/aepp-sdk/es/ae/contract' (Using tree-shaking) Example import { Contract } from '@aeternity/aepp-sdk' (Using bundle) @aeternity/aepp-sdk/es/ae/contract exports.ContractAPI([options]) \u21d2 Object \u23cf async handleCallError(result, tx) \u21d2 Promise.&lt;void&gt; \u23cf contractEncodeCall(source, name, args, [options]) \u21d2 Promise.&lt;String&gt; \u23cf contractDecodeData(source, fn, callValue, callResult, [options]) \u21d2 Promise.&lt;String&gt; \u23cf contractCallStatic(source, address, name, args, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf contractCall(source, address, name, argsOrCallData, [options]) \u23cf contractDeploy(code, source, initState, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf contractCompile(source, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf delegateSignatureCommon(ids, [opt], [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNamePreclaimSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameClaimSignature(name, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameTransferSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateNameRevokeSignature(contractId, name, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleRegisterSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleExtendSignature(contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf delegateOracleRespondSignature(queryId, contractId, [opt]) \u21d2 Promise.&lt;String&gt; \u23cf","title":"@aeternity/aepp-sdk/es/ae/contract"},{"location":"api/ae/contract/#exportscontractapioptions-object","text":"Contract Stamp Provide contract implementation Ae clients. Kind : Exported function Returns : Object - Contract instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example import Transaction from '@aeternity/aepp-sdk/es/tx/tx import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory import ChainNode from '@aeternity/aepp-sdk/es/chain/node import ContractCompilerAPI from '@aeternity/aepp-sdk/es/contract/compiler // or using bundle import { Transaction, MemoryAccount, ChainNode, ContractCompilerAPI } from '@aeternity/aepp-sdk const ContractWithAE = await Contract .compose(Transaction, MemoryAccount, ChainNode) // AE implementation .compose(ContractCompilerAPI) // ContractBase implementation const client = await ContractWithAe({ url, internalUrl, compilerUrl, keypair, ... })","title":"exports.ContractAPI([options]) \u21d2 Object \u23cf"},{"location":"api/ae/contract/#handlecallerrorresult-tx-promiseltvoidgt","text":"Handle contract call error Kind : Exported function Category : async Throws : Error Decoded error Param Type Description result Object call result object tx Object Unpacked transaction","title":"handleCallError(result, tx) \u21d2 Promise.&amp;lt;void&amp;gt; \u23cf"},{"location":"api/ae/contract/#contractencodecallsource-name-args-options-promiseltstringgt","text":"Encode call data for contract call Kind : Exported function Category : async Param Type Default Description source String Contract source code name String Name of function to call args Array Argument's for call [options] Object {} Options [options.filesystem] Object {} Contract external namespaces map [options.backend] Object 'fate' Compiler backend","title":"contractEncodeCall(source, name, args, [options]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#contractdecodedatasource-fn-callvalue-callresult-options-promiseltstringgt","text":"Decode contract call result data Kind : Exported function Returns : Promise.&lt;String&gt; - Result object Category : async Param Type Default Description source String source code fn String function name callValue String result call data callResult String result status [options] Object {} Options [options.filesystem] Object {} Contract external namespaces map Example const decodedData = await client.contractDecodeData(SourceCode ,'functionName', 'cb_asdasdasd...', 'ok|revert')lt","title":"contractDecodeData(source, fn, callValue, callResult, [options]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#contractcallstaticsource-address-name-args-options-promiseltobjectgt","text":"Static contract call(using dry-run) Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description source String Contract source code address String Contract address name String Name of function to call args Array | String Argument's or callData for call/deploy transaction [options] Object {} Options [options.top] String Block hash on which you want to call contract [options.bytecode] String Block hash on which you want to call contract [options.options] Object Transaction options (fee, ttl, gas, amount, deposit) [options.options.filesystem] Object Contract external namespaces map Example const callResult = await client.contractCallStatic(source, address, fnName, args = [], { top, options = {} }) { result: TX_DATA, decode: (type) => Decode call result }","title":"contractCallStatic(source, address, name, args, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/contract/#contractcallsource-address-name-argsorcalldata-options","text":"Call contract function Kind : Exported function Category : async Param Type Default Description source String Contract source code address String Contract address or AENS name name String Name of function to call argsOrCallData Array | String Argument's array or callData for call function [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object Example const callResult = await client.contractCall(source, address, fnName, args = [], options) { hash: TX_HASH, result: TX_DATA, decode: (type) => Decode call result }","title":"contractCall(source, address, name, argsOrCallData, [options]) \u23cf"},{"location":"api/ae/contract/#contractdeploycode-source-initstate-options-promiseltobjectgt","text":"Deploy contract to the node Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description code String Compiled contract source String Contract source code initState Array | String Arguments of contract constructor(init) function. Can be array of arguments or callData string [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object Example const deployed = await client.contractDeploy(bytecode, source, init = [], options) { owner: OWNER_PUB_KEY, transaction: TX_HASH, address: CONTRACT_ADDRESS, createdAt: Date, result: DEPLOY_TX_DATA, call: (fnName, args = [], options) => Call contract function, callStatic: (fnName, args = [], options) => Static all contract function }","title":"contractDeploy(code, source, initState, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/contract/#contractcompilesource-options-promiseltobjectgt","text":"Compile contract source code Kind : Exported function Returns : Promise.&lt;Object&gt; - Result object Category : async Param Type Default Description source String Contract sourece code [options] Object {} Transaction options (fee, ttl, gas, amount, deposit) [options.filesystem] Object {} Contract external namespaces map* @return {Promise } Result object [options.backend] Object 'aevm' Contract backend version (aevm Example const compiled = await client.contractCompile(SOURCE_CODE) { bytecode: CONTRACT_BYTE_CODE, deploy: (init = [], options = {}) => Deploy Contract, encodeCall: (fnName, args = []) => Prepare callData }","title":"contractCompile(source, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegatesignaturecommonids-opt-opt-promiseltstringgt","text":"Utility method to create a delegate signature for a contract Kind : Exported function Returns : Promise.&lt;String&gt; - Signature in hex representation Category : async Param Type Default Description ids Array.&lt;String&gt; The list of id's to prepend [opt] Object {} options [opt] Object {} opt Options","title":"delegateSignatureCommon(ids, [opt], [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegatenamepreclaimsignaturecontractid-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a name pre-claim to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options","title":"delegateNamePreclaimSignature(contractId, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegatenameclaimsignaturename-contractid-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a name claim to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description name String The name being claimed contractId String Contract Id [opt] Object {} opt Options","title":"delegateNameClaimSignature(name, contractId, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegatenametransfersignaturecontractid-name-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a name transfer to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id name String The name being transferred [opt] Object {} opt Options","title":"delegateNameTransferSignature(contractId, name, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegatenamerevokesignaturecontractid-name-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a name revoke to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id name String The name being revoked [opt] Object {} opt Options","title":"delegateNameRevokeSignature(contractId, name, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegateoracleregistersignaturecontractid-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a Oracle register to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options","title":"delegateOracleRegisterSignature(contractId, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegateoracleextendsignaturecontractid-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a Oracle extend to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description contractId String Contract Id [opt] Object {} opt Options","title":"delegateOracleExtendSignature(contractId, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/contract/#delegateoraclerespondsignaturequeryid-contractid-opt-promiseltstringgt","text":"Helper to generate a signature to delegate a Oracle respond to a contract. Kind : Exported function Returns : Promise.&lt;String&gt; - Signature for delegation Category : async Param Type Default Description queryId String Oracle Query Id contractId String Contract Id [opt] Object {} opt Options","title":"delegateOracleRespondSignature(queryId, contractId, [opt]) \u21d2 Promise.&amp;lt;String&amp;gt; \u23cf"},{"location":"api/ae/oracle/","text":"@aeternity/aepp-sdk/es/ae/oracle Oracle module - routines to interact with the \u00e6ternity oracle system The high-level description of the oracle system is https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol repository. Example import Oracle from '@aeternity/aepp-sdk/es/ae/oracle' @aeternity/aepp-sdk/es/ae/oracle Oracle([options]) \u21d2 Object \u23cf instance async .getOracleObject(oracleId) \u21d2 Promise.&lt;Object&gt; \u23cf .pollForQueries(oracleId, onQuery, [options]) \u21d2 function \u23cf .getQueryObject(oracleId, queryId) \u21d2 Promise.&lt;Object&gt; \u23cf .exports.pollForQueryResponse(oracleId, queryId, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .registerOracle(queryFormat, responseFormat, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .postQueryToOracle(oracleId, query, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .extendOracleTtl(oracleId, oracleTtl, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .respondToQuery(oracleId, queryId, response, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Oracle([options]) \u21d2 Object \u23cf Oracle Stamp Oracle provides oracle-system related methods atop Ae clients. Kind : Exported function Returns : Object - Oracle instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object .getOracleObject(oracleId) \u21d2 Promise.&lt;Object&gt; \u23cf Constructor for Oracle Object (helper object for using Oracle) Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Description oracleId String Oracle public key .pollForQueries(oracleId, onQuery, [options]) \u21d2 function \u23cf Poll for oracle queries Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : function - stopPolling - Stop polling function Category : async Param Type Description oracleId String Oracle public key onQuery function OnQuery callback [options] Object Options object [options.interval] Number Poll interval(default: 5000) .getQueryObject(oracleId, queryId) \u21d2 Promise.&lt;Object&gt; \u23cf Constructor for OracleQuery Object (helper object for using OracleQuery) Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - OracleQuery object Category : async Param Type Description oracleId String Oracle public key queryId String Oracle Query id .exports.pollForQueryResponse(oracleId, queryId, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Poll for oracle query response Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - OracleQuery object Category : async Param Type Description oracleId String Oracle public key queryId String Oracle Query id [options] Object Options object [options.attempts] Object Poll attempt's(default: 20) [options.interval] Object Poll interval(default: 5000) .registerOracle(queryFormat, responseFormat, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Register oracle Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description queryFormat String Format of query responseFormat String Format of query response [options] Object {} Options [options.queryFee] String | Number queryFee Oracle query Fee [options.oracleTtl] Object oracleTtl OracleTtl object {type: 'delta [options.abiVersion] Number abiVersion Always 0 (do not use virtual machine) [options.fee] Number | String fee Transaction fee [options.ttl] Number | String Transaction time to leave .postQueryToOracle(oracleId, query, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Post query to oracle Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Query object Category : async Param Type Default Description oracleId String Oracle public key query String Oracle query object [options] Object {} [options.queryTtl] String | Number queryTtl Oracle query time to leave [options.responseTtl] String | Number queryFee Oracle query response time to leave [options.queryFee] String | Number queryFee Oracle query fee [options.fee] Number fee Transaction fee [options.ttl] Number Transaction time to leave .extendOracleTtl(oracleId, oracleTtl, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Extend oracle ttl Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description oracleId String Oracle public key oracleTtl String Oracle time to leave for extend [options] Object {} [options.fee] Number fee Transaction fee [options.ttl] Number Transaction time to leave .respondToQuery(oracleId, queryId, response, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Extend oracle ttl Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description oracleId String Oracle public key queryId String Oracle query id response String Oracle query response [options] Object {} [options.responseTtl] Number responseTtl Query response time to leave [options.fee] Number Transaction fee [options.ttl] Number Transaction time to leave","title":"Oracle"},{"location":"api/ae/oracle/#aeternityaepp-sdkesaeoracle","text":"Oracle module - routines to interact with the \u00e6ternity oracle system The high-level description of the oracle system is https://github.com/aeternity/protocol/blob/master/ORACLE.md in the protocol repository. Example import Oracle from '@aeternity/aepp-sdk/es/ae/oracle' @aeternity/aepp-sdk/es/ae/oracle Oracle([options]) \u21d2 Object \u23cf instance async .getOracleObject(oracleId) \u21d2 Promise.&lt;Object&gt; \u23cf .pollForQueries(oracleId, onQuery, [options]) \u21d2 function \u23cf .getQueryObject(oracleId, queryId) \u21d2 Promise.&lt;Object&gt; \u23cf .exports.pollForQueryResponse(oracleId, queryId, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .registerOracle(queryFormat, responseFormat, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .postQueryToOracle(oracleId, query, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .extendOracleTtl(oracleId, oracleTtl, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf .respondToQuery(oracleId, queryId, response, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf","title":"@aeternity/aepp-sdk/es/ae/oracle"},{"location":"api/ae/oracle/#oracleoptions-object","text":"Oracle Stamp Oracle provides oracle-system related methods atop Ae clients. Kind : Exported function Returns : Object - Oracle instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Oracle([options]) \u21d2 Object \u23cf"},{"location":"api/ae/oracle/#getoracleobjectoracleid-promiseltobjectgt","text":"Constructor for Oracle Object (helper object for using Oracle) Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Description oracleId String Oracle public key","title":".getOracleObject(oracleId) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#pollforqueriesoracleid-onquery-options-function","text":"Poll for oracle queries Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : function - stopPolling - Stop polling function Category : async Param Type Description oracleId String Oracle public key onQuery function OnQuery callback [options] Object Options object [options.interval] Number Poll interval(default: 5000)","title":".pollForQueries(oracleId, onQuery, [options]) \u21d2 function \u23cf"},{"location":"api/ae/oracle/#getqueryobjectoracleid-queryid-promiseltobjectgt","text":"Constructor for OracleQuery Object (helper object for using OracleQuery) Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - OracleQuery object Category : async Param Type Description oracleId String Oracle public key queryId String Oracle Query id","title":".getQueryObject(oracleId, queryId) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#exportspollforqueryresponseoracleid-queryid-options-promiseltobjectgt","text":"Poll for oracle query response Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - OracleQuery object Category : async Param Type Description oracleId String Oracle public key queryId String Oracle Query id [options] Object Options object [options.attempts] Object Poll attempt's(default: 20) [options.interval] Object Poll interval(default: 5000)","title":".exports.pollForQueryResponse(oracleId, queryId, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#registeroraclequeryformat-responseformat-options-promiseltobjectgt","text":"Register oracle Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description queryFormat String Format of query responseFormat String Format of query response [options] Object {} Options [options.queryFee] String | Number queryFee Oracle query Fee [options.oracleTtl] Object oracleTtl OracleTtl object {type: 'delta [options.abiVersion] Number abiVersion Always 0 (do not use virtual machine) [options.fee] Number | String fee Transaction fee [options.ttl] Number | String Transaction time to leave","title":".registerOracle(queryFormat, responseFormat, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#postquerytooracleoracleid-query-options-promiseltobjectgt","text":"Post query to oracle Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Query object Category : async Param Type Default Description oracleId String Oracle public key query String Oracle query object [options] Object {} [options.queryTtl] String | Number queryTtl Oracle query time to leave [options.responseTtl] String | Number queryFee Oracle query response time to leave [options.queryFee] String | Number queryFee Oracle query fee [options.fee] Number fee Transaction fee [options.ttl] Number Transaction time to leave","title":".postQueryToOracle(oracleId, query, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#extendoraclettloracleid-oraclettl-options-promiseltobjectgt","text":"Extend oracle ttl Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description oracleId String Oracle public key oracleTtl String Oracle time to leave for extend [options] Object {} [options.fee] Number fee Transaction fee [options.ttl] Number Transaction time to leave","title":".extendOracleTtl(oracleId, oracleTtl, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/oracle/#respondtoqueryoracleid-queryid-response-options-promiseltobjectgt","text":"Extend oracle ttl Kind : instance method of @aeternity/aepp-sdk/es/ae/oracle Returns : Promise.&lt;Object&gt; - Oracle object Category : async Param Type Default Description oracleId String Oracle public key queryId String Oracle query id response String Oracle query response [options] Object {} [options.responseTtl] Number responseTtl Query response time to leave [options.fee] Number Transaction fee [options.ttl] Number Transaction time to leave","title":".respondToQuery(oracleId, queryId, response, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/ae/universal/","text":"@aeternity/aepp-sdk/es/ae/universal Universal module Example import Ae from '@aeternity/aepp-sdk/es/ae/universal' exports.Universal([options]) \u21d2 Object \u23cf Universal Stamp Universal provides Ae base functionality with Contract and Aens Ae clients. Kind : Exported function Returns : Object - Universal instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"Universal"},{"location":"api/ae/universal/#aeternityaepp-sdkesaeuniversal","text":"Universal module Example import Ae from '@aeternity/aepp-sdk/es/ae/universal'","title":"@aeternity/aepp-sdk/es/ae/universal"},{"location":"api/ae/universal/#exportsuniversaloptions-object","text":"Universal Stamp Universal provides Ae base functionality with Contract and Aens Ae clients. Kind : Exported function Returns : Object - Universal instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"exports.Universal([options]) \u21d2 Object \u23cf"},{"location":"api/ae/wallet/","text":"@aeternity/aepp-sdk/es/ae/wallet Wallet module Example import Wallet from '@aeternity/aepp-sdk/es/ae/wallet' exports.Wallet([options]) \u21d2 Object \u23cf Wallet Stamp Kind : Exported function Returns : Object - Wallet instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.url String Node instance to connect to [options.accounts] Array.&lt;Account&gt; Accounts to initialize with [options.account] String Public key of account to preselect [options.onTx] function Tx method protector function [options.onChain] function Chain method protector function [options.onAccount] function Account method protector function [options.onContract] function Contract method protector function Example Wallet({ url: 'https://testnet.aeternity.io/', accounts: [MemoryAccount({keypair})], address: keypair.publicKey, onTx: confirm, onChain: confirm, onAccount: confirm onContract: confirm })","title":"Wallet"},{"location":"api/ae/wallet/#aeternityaepp-sdkesaewallet","text":"Wallet module Example import Wallet from '@aeternity/aepp-sdk/es/ae/wallet'","title":"@aeternity/aepp-sdk/es/ae/wallet"},{"location":"api/ae/wallet/#exportswalletoptions-object","text":"Wallet Stamp Kind : Exported function Returns : Object - Wallet instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object options.url String Node instance to connect to [options.accounts] Array.&lt;Account&gt; Accounts to initialize with [options.account] String Public key of account to preselect [options.onTx] function Tx method protector function [options.onChain] function Chain method protector function [options.onAccount] function Account method protector function [options.onContract] function Contract method protector function Example Wallet({ url: 'https://testnet.aeternity.io/', accounts: [MemoryAccount({keypair})], address: keypair.publicKey, onTx: confirm, onChain: confirm, onAccount: confirm onContract: confirm })","title":"exports.Wallet([options]) \u21d2 Object \u23cf"},{"location":"api/chain/node/","text":"@aeternity/aepp-sdk/es/chain/node ChainNode module This is the complement to @aeternity/aepp-sdk/es/chain . Example import ChainNode from '@aeternity/aepp-sdk/es/chain/node' ChainNode([options]) \u21d2 Object \u23cf ChainNode Stamp This is implementation of Chain composed with module:@aeternity/aepp-sdk/es/contract/node--ContractNodeAPI and module:@aeternity/aepp-sdk/es/oracle/node--OracleNodeAPI Kind : Exported function Returns : Object - ChainNode instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example ChainNode({url: 'https://testnet.aeternity.io/'})","title":"Node"},{"location":"api/chain/node/#aeternityaepp-sdkeschainnode","text":"ChainNode module This is the complement to @aeternity/aepp-sdk/es/chain . Example import ChainNode from '@aeternity/aepp-sdk/es/chain/node'","title":"@aeternity/aepp-sdk/es/chain/node"},{"location":"api/chain/node/#chainnodeoptions-object","text":"ChainNode Stamp This is implementation of Chain composed with module:@aeternity/aepp-sdk/es/contract/node--ContractNodeAPI and module:@aeternity/aepp-sdk/es/oracle/node--OracleNodeAPI Kind : Exported function Returns : Object - ChainNode instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example ChainNode({url: 'https://testnet.aeternity.io/'})","title":"ChainNode([options]) \u21d2 Object \u23cf"},{"location":"api/channel/","text":"@aeternity/aepp-sdk/es/channel/index Channel module Example import Channel from '@aeternity/aepp-sdk/es/channel/index' @aeternity/aepp-sdk/es/channel/index Channel(options) \u21d2 Promise.&lt;Object&gt; \u23cf ~on(event, callback) ~off(event, callback) ~disconnect() ~status() \u21d2 String ~state() \u21d2 Promise.&lt;Object&gt; ~round() \u21d2 Number ~id() \u21d2 String ~fsmId() \u21d2 String ~update(from, to, amount, sign, metadata) \u21d2 Promise.&lt;Object&gt; ~poi(addresses) \u21d2 Promise.&lt;String&gt; ~balances(accounts) \u21d2 Promise.&lt;Object&gt; ~leave() \u21d2 Promise.&lt;Object&gt; ~shutdown(sign) \u21d2 Promise.&lt;String&gt; ~withdraw(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; ~deposit(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; ~createContract(options, sign) \u21d2 Promise.&lt;Object&gt; ~callContract(options, sign) \u21d2 Promise.&lt;Object&gt; ~forceProgress(options, sign, callbacks) \u21d2 Promise.&lt;Object&gt; ~callContractStatic(options) \u21d2 Promise.&lt;Object&gt; ~getContractCall(options) \u21d2 Promise.&lt;Object&gt; ~getContractState(contract) \u21d2 Promise.&lt;Object&gt; ~cleanContractCalls() \u21d2 Promise ~sendMessage(message, recipient) Channel(options) \u21d2 Promise.&lt;Object&gt; \u23cf Channel Kind : Exported function Returns : Promise.&lt;Object&gt; - Channel instance rtype : Channel Param Type Default Description options Object Channel params options.url String Channel url (for example: \"ws://localhost:3001\") options.role String Participant role (\"initiator\" or \"responder\") options.initiatorId String Initiator's public key options.responderId String Responder's public key options.pushAmount Number Initial deposit in favour of the responder by the initiator options.initiatorAmount Number Amount of tokens the initiator has committed to the channel options.responderAmount Number Amount of tokens the responder has committed to the channel options.channelReserve Number The minimum amount both peers need to maintain [options.ttl] Number Minimum block height to include the channel_create_tx options.host String Host of the responder's node options.port Number The port of the responders node options.lockPeriod Number Amount of blocks for disputing a solo close [options.existingChannelId] Number Existing channel id (required if reestablishing a channel) [options.offchainTx] Number Offchain transaction (required if reestablishing a channel) [options.timeoutIdle] Number The time waiting for a new event to be initiated (default: 600000) [options.timeoutFundingCreate] Number The time waiting for the initiator to produce the create channel transaction after the noise session had been established (default: 120000) [options.timeoutFundingSign] Number The time frame the other client has to sign an off-chain update after our client had initiated and signed it. This applies only for double signed on-chain intended updates: channel create transaction, deposit, withdrawal and etc. (default: 120000) [options.timeoutFundingLock] Number The time frame the other client has to confirm an on-chain transaction reaching maturity (passing minimum depth) after the local node has detected this. This applies only for double signed on-chain intended updates: channel create transaction, deposit, withdrawal and etc. (default: 360000) [options.timeoutSign] Number The time frame the client has to return a signed off-chain update or to decline it. This applies for all off-chain updates (default: 500000) [options.timeoutAccept] Number The time frame the other client has to react to an event. This applies for all off-chain updates that are not meant to land on-chain, as well as some special cases: opening a noise connection, mutual closing acknowledgement and reestablishing an existing channel (default: 120000) [options.timeoutInitialized] Number the time frame the responder has to accept an incoming noise session. Applicable only for initiator (default: timeout_accept's value) [options.timeoutAwaitingOpen] Number The time frame the initiator has to start an outgoing noise session to the responder's node. Applicable only for responder (default: timeout_idle's value) [options.debug] Number false Log websocket communication options.sign function Function which verifies and signs transactions Example Channel({ url: 'ws://localhost:3001', role: 'initiator' initiatorId: 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', responderId: 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E', initiatorAmount: 1e18, responderAmount: 1e18, pushAmount: 0, channelReserve: 0, ttl: 1000, host: 'localhost', port: 3002, lockPeriod: 10, async sign (tag, tx) => await account.signTransaction(tx) }) Channel~on(event, callback) Register event listener function Possible events: \"error\" \"onChainTx\" \"ownWithdrawLocked\" \"withdrawLocked\" \"ownDepositLocked\" \"depositLocked\" Kind : inner method of Channel Param Type Description event String Event name callback function Callback function Channel~off(event, callback) Remove event listener function Kind : inner method of Channel Param Type Description event String Event name callback function Callback function Channel~disconnect() Close the connection Kind : inner method of Channel Channel~status() \u21d2 String Get current status Kind : inner method of Channel Channel~state() \u21d2 Promise.&lt;Object&gt; Get current state Kind : inner method of Channel Channel~round() \u21d2 Number Get current round If round cannot be determined (for example when channel has not been opened) it will return null . Kind : inner method of Channel Channel~id() \u21d2 String Get channel id Kind : inner method of Channel Channel~fsmId() \u21d2 String Get channel's fsm id Kind : inner method of Channel Channel~update(from, to, amount, sign, metadata) \u21d2 Promise.&lt;Object&gt; Trigger a transfer update The transfer update is moving tokens from one channel account to another. The update is a change to be applied on top of the latest state. Sender and receiver are the channel parties. Both the initiator and responder can take those roles. Any public key outside of the channel is considered invalid. Kind : inner method of Channel Param Type Description from String Sender's public address to String Receiver's public address amount Number Transaction amount sign function Function which verifies and signs offchain transaction metadata Array.&lt;String&gt; Example channel.update( 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E', 10, async (tx) => await account.signTransaction(tx) ).then(({ accepted, signedTx }) => if (accepted) { console.log('Update has been accepted') } ) Channel~poi(addresses) \u21d2 Promise.&lt;String&gt; Get proof of inclusion If a certain address of an account or a contract is not found in the state tree - the response is an error. Kind : inner method of Channel Param Type Description addresses Object [addresses.accounts] Array.&lt;String&gt; List of account addresses to include in poi [addresses.contracts] Array.&lt;String&gt; List of contract addresses to include in poi Example channel.poi({ accounts: [ 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E' ], contracts: ['ct_2dCUAWYZdrWfACz3a2faJeKVTVrfDYxCQHCqAt5zM15f3u2UfA'] }).then(poi => console.log(poi)) Channel~balances(accounts) \u21d2 Promise.&lt;Object&gt; Get balances The accounts paramcontains a list of addresses to fetch balances of. Those can be either account balances or a contract ones, encoded as an account addresses. If a certain account address had not being found in the state tree - it is simply skipped in the response. Kind : inner method of Channel Param Type Description accounts Array.&lt;String&gt; List of addresses to fetch balances from Example channel.balances([ 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E' 'ct_2dCUAWYZdrWfACz3a2faJeKVTVrfDYxCQHCqAt5zM15f3u2UfA' ]).then(balances => console.log(balances['ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH']) ) Channel~leave() \u21d2 Promise.&lt;Object&gt; Leave channel It is possible to leave a channel and then later reestablish the channel off-chain state and continue operation. When a leave method is called, the channel fsm passes it on to the peer fsm, reports the current mutually signed state and then terminates. The channel can be reestablished by instantiating another Channel instance with two extra params: existingChannelId and offchainTx (returned from leave method as channelId and signedTx respectively). Kind : inner method of Channel Example channel.leave().then(({ channelId, signedTx }) => { console.log(channelId) console.log(signedTx) }) Channel~shutdown(sign) \u21d2 Promise.&lt;String&gt; Trigger mutual close At any moment after the channel is opened, a closing procedure can be triggered. This can be done by either of the parties. The process is similar to the off-chain updates. Kind : inner method of Channel Param Type Description sign function Function which verifies and signs mutual close transaction Example channel.shutdown( async (tx) => await account.signTransaction(tx) ).then(tx => console.log('on_chain_tx', tx)) Channel~withdraw(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; Withdraw tokens from the channel After the channel had been opened any of the participants can initiate a withdrawal. The process closely resembles the update. The most notable difference is that the transaction has been co-signed: it is channel_withdraw_tx and after the procedure is finished - it is being posted on-chain. Any of the participants can initiate a withdrawal. The only requirements are: Channel is already opened No off-chain update/deposit/withdrawal is currently being performed Channel is not being closed or in a solo closing state The withdrawal amount must be equal to or greater than zero, and cannot exceed the available balance on the channel (minus the channel_reserve) After the other party had signed the withdraw transaction, the transaction is posted on-chain and onOnChainTx callback is called with on-chain transaction as first argument. After computing transaction hash it can be tracked on the chain: entering the mempool, block inclusion and a number of confirmations. After the minimum_depth block confirmations onOwnWithdrawLocked callback is called (without any arguments). When the other party had confirmed that the block height needed is reached onWithdrawLocked callback is called (without any arguments). Kind : inner method of Channel Param Type Description amount Number Amount of tokens to withdraw sign function Function which verifies and signs withdraw transaction [callbacks] Object [callbacks.onOnChainTx] function Called when withdraw transaction has been posted on chain [callbacks.onOwnWithdrawLocked] function [callbacks.onWithdrawLocked] function Example channel.withdraw( 100, async (tx) => await account.signTransaction(tx), { onOnChainTx: (tx) => console.log('on_chain_tx', tx) } ).then(({ accepted, signedTx }) => { if (accepted) { console.log('Withdrawal has been accepted') } else { console.log('Withdrawal has been rejected') } }) Channel~deposit(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; Deposit tokens into the channel After the channel had been opened any of the participants can initiate a deposit. The process closely resembles the update. The most notable difference is that the transaction has been co-signed: it is channel_deposit_tx and after the procedure is finished - it is being posted on-chain. Any of the participants can initiate a deposit. The only requirements are: Channel is already opened No off-chain update/deposit/withdrawal is currently being performed Channel is not being closed or in a solo closing state The deposit amount must be equal to or greater than zero, and cannot exceed the available balance on the channel (minus the channel_reserve) After the other party had signed the deposit transaction, the transaction is posted on-chain and onOnChainTx callback is called with on-chain transaction as first argument. After computing transaction hash it can be tracked on the chain: entering the mempool, block inclusion and a number of confirmations. After the minimum_depth block confirmations onOwnDepositLocked callback is called (without any arguments). When the other party had confirmed that the block height needed is reached onDepositLocked callback is called (without any arguments). Kind : inner method of Channel Param Type Description amount Number Amount of tokens to deposit sign function Function which verifies and signs deposit transaction [callbacks] Object [callbacks.onOnChainTx] function Called when deposit transaction has been posted on chain [callbacks.onOwnDepositLocked] function [callbacks.onDepositLocked] function Example channel.deposit( 100, async (tx) => await account.signTransaction(tx), { onOnChainTx: (tx) => console.log('on_chain_tx', tx) } ).then(({ accepted, state }) => { if (accepted) { console.log('Deposit has been accepted') console.log('The new state is:', state) } else { console.log('Deposit has been rejected') } }) Channel~createContract(options, sign) \u21d2 Promise.&lt;Object&gt; Trigger create contract update The create contract update is creating a contract inside the channel's internal state tree. The update is a change to be applied on top of the latest state. That would create a contract with the poster being the owner of it. Poster commits initially a deposit amount of tokens to the new contract. Kind : inner method of Channel Param Type Description options Object options.code String Api encoded compiled AEVM byte code options.callData String Api encoded compiled AEVM call data for the code options.deposit Number Initial amount the owner of the contract commits to it options.vmVersion Number Version of the AEVM options.abiVersion Number Version of the ABI sign function Function which verifies and signs create contract transaction Example channel.createContract({ code: 'cb_HKtpipK4aCgYb17wZ...', callData: 'cb_1111111111111111...', deposit: 10, vmVersion: 3, abiVersion: 1 }).then(({ accepted, signedTx, address }) => { if (accepted) { console.log('New contract has been created') console.log('Contract address:', address) } else { console.log('New contract has been rejected') } }) Channel~callContract(options, sign) \u21d2 Promise.&lt;Object&gt; Trigger call a contract update The call contract update is calling a preexisting contract inside the channel's internal state tree. The update is a change to be applied on top of the latest state. That would call a contract with the poster being the caller of it. Poster commits an amount of tokens to the contract. The call would also create a call object inside the channel state tree. It contains the result of the contract call. It is worth mentioning that the gas is not consumed, because this is an off-chain contract call. It would be consumed if it were a on-chain one. This could happen if a call with a similar computation amount is to be forced on-chain. Kind : inner method of Channel Param Type Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI sign function Function which verifies and signs contract call transaction Example channel.callContract({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1 }).then(({ accepted, signedTx }) => { if (accepted) { console.log('Contract called succesfully') } else { console.log('Contract call has been rejected') } }) Channel~forceProgress(options, sign, callbacks) \u21d2 Promise.&lt;Object&gt; Trigger a force progress contract call This call is going on-chain Kind : inner method of Channel Param Type Default Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI [options.gasPrice] Number 1000000000 Gas price [options.gas] Number 1000000 Gas limit sign function Function which verifies and signs contract force progress transaction callbacks Object Example channel.forceProgress({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1, gasPrice: 1000005554 }).then(({ accepted, signedTx }) => { if (accepted) { console.log('Contract force progress call successful') } else { console.log('Contract force progress call has been rejected') } }) Channel~callContractStatic(options) \u21d2 Promise.&lt;Object&gt; Call contract using dry-run In order to get the result of a potential contract call, one might need to dry-run a contract call. It takes the exact same arguments as a call would and returns the call object. The call is executed in the channel's state but it does not impact the state whatsoever. It uses as an environment the latest channel's state and the current top of the blockchain as seen by the node. Kind : inner method of Channel Param Type Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI Example channel.callContractStatic({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1 }).then(({ returnValue, gasUsed }) => { console.log('Returned value:', returnValue) console.log('Gas used:', gasUsed) }) Channel~getContractCall(options) \u21d2 Promise.&lt;Object&gt; Get contract call result The combination of a caller, contract and a round of execution determines the contract call. Providing an incorrect set of those results in an error response. Kind : inner method of Channel Param Type Description options Object [options.caller] String Address of contract caller [options.contract] String Address of the contract [options.round] Number Round when contract was called Example channel.getContractCall({ caller: 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', round: 3 }).then(({ returnType, returnValue }) => { if (returnType === 'ok') console.log(returnValue) }) Channel~getContractState(contract) \u21d2 Promise.&lt;Object&gt; Get contract latest state Kind : inner method of Channel Param Type Description contract String Address of the contract Example channel.getContractState( 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa' ).then(({ contract }) => { console.log('deposit:', contract.deposit) }) Channel~cleanContractCalls() \u21d2 Promise Clean up all locally stored contract calls Contract calls are kept locally in order for the participant to be able to look them up. They consume memory and in order for the participant to free it - one can prune all messages. This cleans up all locally stored contract calls and those will no longer be available for fetching and inspection. Kind : inner method of Channel Channel~sendMessage(message, recipient) Send generic message If message is an object it will be serialized into JSON string before sending. If there is ongoing update that has not yet been finished the message will be sent after that update is finalized. Kind : inner method of Channel Param Type Description message String | Object recipient String Address of the recipient Example channel.sendMessage( 'hello world', 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH' )","title":"channel"},{"location":"api/channel/#aeternityaepp-sdkeschannelindex","text":"Channel module Example import Channel from '@aeternity/aepp-sdk/es/channel/index' @aeternity/aepp-sdk/es/channel/index Channel(options) \u21d2 Promise.&lt;Object&gt; \u23cf ~on(event, callback) ~off(event, callback) ~disconnect() ~status() \u21d2 String ~state() \u21d2 Promise.&lt;Object&gt; ~round() \u21d2 Number ~id() \u21d2 String ~fsmId() \u21d2 String ~update(from, to, amount, sign, metadata) \u21d2 Promise.&lt;Object&gt; ~poi(addresses) \u21d2 Promise.&lt;String&gt; ~balances(accounts) \u21d2 Promise.&lt;Object&gt; ~leave() \u21d2 Promise.&lt;Object&gt; ~shutdown(sign) \u21d2 Promise.&lt;String&gt; ~withdraw(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; ~deposit(amount, sign, [callbacks]) \u21d2 Promise.&lt;Object&gt; ~createContract(options, sign) \u21d2 Promise.&lt;Object&gt; ~callContract(options, sign) \u21d2 Promise.&lt;Object&gt; ~forceProgress(options, sign, callbacks) \u21d2 Promise.&lt;Object&gt; ~callContractStatic(options) \u21d2 Promise.&lt;Object&gt; ~getContractCall(options) \u21d2 Promise.&lt;Object&gt; ~getContractState(contract) \u21d2 Promise.&lt;Object&gt; ~cleanContractCalls() \u21d2 Promise ~sendMessage(message, recipient)","title":"@aeternity/aepp-sdk/es/channel/index"},{"location":"api/channel/#channeloptions-promiseltobjectgt","text":"Channel Kind : Exported function Returns : Promise.&lt;Object&gt; - Channel instance rtype : Channel Param Type Default Description options Object Channel params options.url String Channel url (for example: \"ws://localhost:3001\") options.role String Participant role (\"initiator\" or \"responder\") options.initiatorId String Initiator's public key options.responderId String Responder's public key options.pushAmount Number Initial deposit in favour of the responder by the initiator options.initiatorAmount Number Amount of tokens the initiator has committed to the channel options.responderAmount Number Amount of tokens the responder has committed to the channel options.channelReserve Number The minimum amount both peers need to maintain [options.ttl] Number Minimum block height to include the channel_create_tx options.host String Host of the responder's node options.port Number The port of the responders node options.lockPeriod Number Amount of blocks for disputing a solo close [options.existingChannelId] Number Existing channel id (required if reestablishing a channel) [options.offchainTx] Number Offchain transaction (required if reestablishing a channel) [options.timeoutIdle] Number The time waiting for a new event to be initiated (default: 600000) [options.timeoutFundingCreate] Number The time waiting for the initiator to produce the create channel transaction after the noise session had been established (default: 120000) [options.timeoutFundingSign] Number The time frame the other client has to sign an off-chain update after our client had initiated and signed it. This applies only for double signed on-chain intended updates: channel create transaction, deposit, withdrawal and etc. (default: 120000) [options.timeoutFundingLock] Number The time frame the other client has to confirm an on-chain transaction reaching maturity (passing minimum depth) after the local node has detected this. This applies only for double signed on-chain intended updates: channel create transaction, deposit, withdrawal and etc. (default: 360000) [options.timeoutSign] Number The time frame the client has to return a signed off-chain update or to decline it. This applies for all off-chain updates (default: 500000) [options.timeoutAccept] Number The time frame the other client has to react to an event. This applies for all off-chain updates that are not meant to land on-chain, as well as some special cases: opening a noise connection, mutual closing acknowledgement and reestablishing an existing channel (default: 120000) [options.timeoutInitialized] Number the time frame the responder has to accept an incoming noise session. Applicable only for initiator (default: timeout_accept's value) [options.timeoutAwaitingOpen] Number The time frame the initiator has to start an outgoing noise session to the responder's node. Applicable only for responder (default: timeout_idle's value) [options.debug] Number false Log websocket communication options.sign function Function which verifies and signs transactions Example Channel({ url: 'ws://localhost:3001', role: 'initiator' initiatorId: 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', responderId: 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E', initiatorAmount: 1e18, responderAmount: 1e18, pushAmount: 0, channelReserve: 0, ttl: 1000, host: 'localhost', port: 3002, lockPeriod: 10, async sign (tag, tx) => await account.signTransaction(tx) })","title":"Channel(options) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/channel/#channelonevent-callback","text":"Register event listener function Possible events: \"error\" \"onChainTx\" \"ownWithdrawLocked\" \"withdrawLocked\" \"ownDepositLocked\" \"depositLocked\" Kind : inner method of Channel Param Type Description event String Event name callback function Callback function","title":"Channel~on(event, callback)"},{"location":"api/channel/#channeloffevent-callback","text":"Remove event listener function Kind : inner method of Channel Param Type Description event String Event name callback function Callback function","title":"Channel~off(event, callback)"},{"location":"api/channel/#channeldisconnect","text":"Close the connection Kind : inner method of Channel","title":"Channel~disconnect()"},{"location":"api/channel/#channelstatus-string","text":"Get current status Kind : inner method of Channel","title":"Channel~status() \u21d2 String"},{"location":"api/channel/#channelstate-promiseltobjectgt","text":"Get current state Kind : inner method of Channel","title":"Channel~state() \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelround-number","text":"Get current round If round cannot be determined (for example when channel has not been opened) it will return null . Kind : inner method of Channel","title":"Channel~round() \u21d2 Number"},{"location":"api/channel/#channelid-string","text":"Get channel id Kind : inner method of Channel","title":"Channel~id() \u21d2 String"},{"location":"api/channel/#channelfsmid-string","text":"Get channel's fsm id Kind : inner method of Channel","title":"Channel~fsmId() \u21d2 String"},{"location":"api/channel/#channelupdatefrom-to-amount-sign-metadata-promiseltobjectgt","text":"Trigger a transfer update The transfer update is moving tokens from one channel account to another. The update is a change to be applied on top of the latest state. Sender and receiver are the channel parties. Both the initiator and responder can take those roles. Any public key outside of the channel is considered invalid. Kind : inner method of Channel Param Type Description from String Sender's public address to String Receiver's public address amount Number Transaction amount sign function Function which verifies and signs offchain transaction metadata Array.&lt;String&gt; Example channel.update( 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E', 10, async (tx) => await account.signTransaction(tx) ).then(({ accepted, signedTx }) => if (accepted) { console.log('Update has been accepted') } )","title":"Channel~update(from, to, amount, sign, metadata) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelpoiaddresses-promiseltstringgt","text":"Get proof of inclusion If a certain address of an account or a contract is not found in the state tree - the response is an error. Kind : inner method of Channel Param Type Description addresses Object [addresses.accounts] Array.&lt;String&gt; List of account addresses to include in poi [addresses.contracts] Array.&lt;String&gt; List of contract addresses to include in poi Example channel.poi({ accounts: [ 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E' ], contracts: ['ct_2dCUAWYZdrWfACz3a2faJeKVTVrfDYxCQHCqAt5zM15f3u2UfA'] }).then(poi => console.log(poi))","title":"Channel~poi(addresses) \u21d2 Promise.&amp;lt;String&amp;gt;"},{"location":"api/channel/#channelbalancesaccounts-promiseltobjectgt","text":"Get balances The accounts paramcontains a list of addresses to fetch balances of. Those can be either account balances or a contract ones, encoded as an account addresses. If a certain account address had not being found in the state tree - it is simply skipped in the response. Kind : inner method of Channel Param Type Description accounts Array.&lt;String&gt; List of addresses to fetch balances from Example channel.balances([ 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', 'ak_V6an1xhec1xVaAhLuak7QoEbi6t7w5hEtYWp9bMKaJ19i6A9E' 'ct_2dCUAWYZdrWfACz3a2faJeKVTVrfDYxCQHCqAt5zM15f3u2UfA' ]).then(balances => console.log(balances['ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH']) )","title":"Channel~balances(accounts) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelleave-promiseltobjectgt","text":"Leave channel It is possible to leave a channel and then later reestablish the channel off-chain state and continue operation. When a leave method is called, the channel fsm passes it on to the peer fsm, reports the current mutually signed state and then terminates. The channel can be reestablished by instantiating another Channel instance with two extra params: existingChannelId and offchainTx (returned from leave method as channelId and signedTx respectively). Kind : inner method of Channel Example channel.leave().then(({ channelId, signedTx }) => { console.log(channelId) console.log(signedTx) })","title":"Channel~leave() \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelshutdownsign-promiseltstringgt","text":"Trigger mutual close At any moment after the channel is opened, a closing procedure can be triggered. This can be done by either of the parties. The process is similar to the off-chain updates. Kind : inner method of Channel Param Type Description sign function Function which verifies and signs mutual close transaction Example channel.shutdown( async (tx) => await account.signTransaction(tx) ).then(tx => console.log('on_chain_tx', tx))","title":"Channel~shutdown(sign) \u21d2 Promise.&amp;lt;String&amp;gt;"},{"location":"api/channel/#channelwithdrawamount-sign-callbacks-promiseltobjectgt","text":"Withdraw tokens from the channel After the channel had been opened any of the participants can initiate a withdrawal. The process closely resembles the update. The most notable difference is that the transaction has been co-signed: it is channel_withdraw_tx and after the procedure is finished - it is being posted on-chain. Any of the participants can initiate a withdrawal. The only requirements are: Channel is already opened No off-chain update/deposit/withdrawal is currently being performed Channel is not being closed or in a solo closing state The withdrawal amount must be equal to or greater than zero, and cannot exceed the available balance on the channel (minus the channel_reserve) After the other party had signed the withdraw transaction, the transaction is posted on-chain and onOnChainTx callback is called with on-chain transaction as first argument. After computing transaction hash it can be tracked on the chain: entering the mempool, block inclusion and a number of confirmations. After the minimum_depth block confirmations onOwnWithdrawLocked callback is called (without any arguments). When the other party had confirmed that the block height needed is reached onWithdrawLocked callback is called (without any arguments). Kind : inner method of Channel Param Type Description amount Number Amount of tokens to withdraw sign function Function which verifies and signs withdraw transaction [callbacks] Object [callbacks.onOnChainTx] function Called when withdraw transaction has been posted on chain [callbacks.onOwnWithdrawLocked] function [callbacks.onWithdrawLocked] function Example channel.withdraw( 100, async (tx) => await account.signTransaction(tx), { onOnChainTx: (tx) => console.log('on_chain_tx', tx) } ).then(({ accepted, signedTx }) => { if (accepted) { console.log('Withdrawal has been accepted') } else { console.log('Withdrawal has been rejected') } })","title":"Channel~withdraw(amount, sign, [callbacks]) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channeldepositamount-sign-callbacks-promiseltobjectgt","text":"Deposit tokens into the channel After the channel had been opened any of the participants can initiate a deposit. The process closely resembles the update. The most notable difference is that the transaction has been co-signed: it is channel_deposit_tx and after the procedure is finished - it is being posted on-chain. Any of the participants can initiate a deposit. The only requirements are: Channel is already opened No off-chain update/deposit/withdrawal is currently being performed Channel is not being closed or in a solo closing state The deposit amount must be equal to or greater than zero, and cannot exceed the available balance on the channel (minus the channel_reserve) After the other party had signed the deposit transaction, the transaction is posted on-chain and onOnChainTx callback is called with on-chain transaction as first argument. After computing transaction hash it can be tracked on the chain: entering the mempool, block inclusion and a number of confirmations. After the minimum_depth block confirmations onOwnDepositLocked callback is called (without any arguments). When the other party had confirmed that the block height needed is reached onDepositLocked callback is called (without any arguments). Kind : inner method of Channel Param Type Description amount Number Amount of tokens to deposit sign function Function which verifies and signs deposit transaction [callbacks] Object [callbacks.onOnChainTx] function Called when deposit transaction has been posted on chain [callbacks.onOwnDepositLocked] function [callbacks.onDepositLocked] function Example channel.deposit( 100, async (tx) => await account.signTransaction(tx), { onOnChainTx: (tx) => console.log('on_chain_tx', tx) } ).then(({ accepted, state }) => { if (accepted) { console.log('Deposit has been accepted') console.log('The new state is:', state) } else { console.log('Deposit has been rejected') } })","title":"Channel~deposit(amount, sign, [callbacks]) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelcreatecontractoptions-sign-promiseltobjectgt","text":"Trigger create contract update The create contract update is creating a contract inside the channel's internal state tree. The update is a change to be applied on top of the latest state. That would create a contract with the poster being the owner of it. Poster commits initially a deposit amount of tokens to the new contract. Kind : inner method of Channel Param Type Description options Object options.code String Api encoded compiled AEVM byte code options.callData String Api encoded compiled AEVM call data for the code options.deposit Number Initial amount the owner of the contract commits to it options.vmVersion Number Version of the AEVM options.abiVersion Number Version of the ABI sign function Function which verifies and signs create contract transaction Example channel.createContract({ code: 'cb_HKtpipK4aCgYb17wZ...', callData: 'cb_1111111111111111...', deposit: 10, vmVersion: 3, abiVersion: 1 }).then(({ accepted, signedTx, address }) => { if (accepted) { console.log('New contract has been created') console.log('Contract address:', address) } else { console.log('New contract has been rejected') } })","title":"Channel~createContract(options, sign) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelcallcontractoptions-sign-promiseltobjectgt","text":"Trigger call a contract update The call contract update is calling a preexisting contract inside the channel's internal state tree. The update is a change to be applied on top of the latest state. That would call a contract with the poster being the caller of it. Poster commits an amount of tokens to the contract. The call would also create a call object inside the channel state tree. It contains the result of the contract call. It is worth mentioning that the gas is not consumed, because this is an off-chain contract call. It would be consumed if it were a on-chain one. This could happen if a call with a similar computation amount is to be forced on-chain. Kind : inner method of Channel Param Type Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI sign function Function which verifies and signs contract call transaction Example channel.callContract({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1 }).then(({ accepted, signedTx }) => { if (accepted) { console.log('Contract called succesfully') } else { console.log('Contract call has been rejected') } })","title":"Channel~callContract(options, sign) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelforceprogressoptions-sign-callbacks-promiseltobjectgt","text":"Trigger a force progress contract call This call is going on-chain Kind : inner method of Channel Param Type Default Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI [options.gasPrice] Number 1000000000 Gas price [options.gas] Number 1000000 Gas limit sign function Function which verifies and signs contract force progress transaction callbacks Object Example channel.forceProgress({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1, gasPrice: 1000005554 }).then(({ accepted, signedTx }) => { if (accepted) { console.log('Contract force progress call successful') } else { console.log('Contract force progress call has been rejected') } })","title":"Channel~forceProgress(options, sign, callbacks) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelcallcontractstaticoptions-promiseltobjectgt","text":"Call contract using dry-run In order to get the result of a potential contract call, one might need to dry-run a contract call. It takes the exact same arguments as a call would and returns the call object. The call is executed in the channel's state but it does not impact the state whatsoever. It uses as an environment the latest channel's state and the current top of the blockchain as seen by the node. Kind : inner method of Channel Param Type Description options Object [options.amount] String Amount the caller of the contract commits to it [options.callData] String ABI encoded compiled AEVM call data for the code [options.contract] Number Address of the contract to call [options.abiVersion] Number Version of the ABI Example channel.callContractStatic({ contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', callData: 'cb_1111111111111111...', amount: 0, abiVersion: 1 }).then(({ returnValue, gasUsed }) => { console.log('Returned value:', returnValue) console.log('Gas used:', gasUsed) })","title":"Channel~callContractStatic(options) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelgetcontractcalloptions-promiseltobjectgt","text":"Get contract call result The combination of a caller, contract and a round of execution determines the contract call. Providing an incorrect set of those results in an error response. Kind : inner method of Channel Param Type Description options Object [options.caller] String Address of contract caller [options.contract] String Address of the contract [options.round] Number Round when contract was called Example channel.getContractCall({ caller: 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH', contract: 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa', round: 3 }).then(({ returnType, returnValue }) => { if (returnType === 'ok') console.log(returnValue) })","title":"Channel~getContractCall(options) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelgetcontractstatecontract-promiseltobjectgt","text":"Get contract latest state Kind : inner method of Channel Param Type Description contract String Address of the contract Example channel.getContractState( 'ct_9sRA9AVE4BYTAkh5RNfJYmwQe1NZ4MErasQLXZkFWG43TPBqa' ).then(({ contract }) => { console.log('deposit:', contract.deposit) })","title":"Channel~getContractState(contract) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/channel/#channelcleancontractcalls-promise","text":"Clean up all locally stored contract calls Contract calls are kept locally in order for the participant to be able to look them up. They consume memory and in order for the participant to free it - one can prune all messages. This cleans up all locally stored contract calls and those will no longer be available for fetching and inspection. Kind : inner method of Channel","title":"Channel~cleanContractCalls() \u21d2 Promise"},{"location":"api/channel/#channelsendmessagemessage-recipient","text":"Send generic message If message is an object it will be serialized into JSON string before sending. If there is ongoing update that has not yet been finished the message will be sent after that update is finalized. Kind : inner method of Channel Param Type Description message String | Object recipient String Address of the recipient Example channel.sendMessage( 'hello world', 'ak_Y1NRjHuoc3CGMYMvCmdHSBpJsMDR6Ra2t5zjhRcbtMeXXLpLH' )","title":"Channel~sendMessage(message, recipient)"},{"location":"api/contract/aci/","text":"@aeternity/aepp-sdk/es/contract/aci ContractACI module Example import ContractACI from '@aeternity/aepp-sdk/es/contract/aci' @aeternity/aepp-sdk/es/contract/aci instance.compile \u21d2 ContractInstance \u23cf instance.deploy \u21d2 ContractInstance \u23cf instance.call \u21d2 Object \u23cf instance.decodeEvents \u21d2 Object \u23cf getContractInstance(source, [options]) \u21d2 ContractInstance \u23cf exports.ContractACI() \u21d2 Object \u23cf instance.compile \u21d2 ContractInstance \u23cf Compile contract Kind : Exported member Returns : ContractInstance - Contract ACI object with predefined js methods for contract usage rtype : () => ContractInstance: Object instance.deploy \u21d2 ContractInstance \u23cf Deploy contract Kind : Exported member Returns : ContractInstance - Contract ACI object with predefined js methods for contract usage rtype : (init: Array, options: Object = { skipArgsConvert: false }) => ContractInstance: Object Param Type Default Description init Array Contract init function arguments array [options] Object {} options Options object [options.skipArgsConvert] Boolean false Skip Validation and Transforming arguments before prepare call-data instance.call \u21d2 Object \u23cf Call contract function Kind : Exported member Returns : Object - CallResult rtype : (init: Array, options: Object = { skipArgsConvert: false, skipTransformDecoded: false, callStatic: false }) => CallResult: Object Param Type Default Description fn String Function name params Array Array of function arguments [options] Object {} Array of function arguments [options.skipArgsConvert] Boolean false Skip Validation and Transforming arguments before prepare call-data [options.skipTransformDecoded] Boolean false Skip Transform decoded data to JS type [options.callStatic] Boolean false Static function call instance.decodeEvents \u21d2 Object \u23cf Decode Events Kind : Exported member Returns : Object - DecodedEvents rtype : (fn: String, events: Array) => DecodedEvents: Array Param Type Description fn String Function name events Array Array of encoded events(callRes.result.log) getContractInstance(source, [options]) \u21d2 ContractInstance \u23cf Generate contract ACI object with predefined js methods for contract usage - can be used for creating a reference to already deployed contracts Kind : Exported function Returns : ContractInstance - JS Contract API Param Type Default Description source String Contract source code [options] Object {} Options object [options.aci] String Contract ACI [options.contractAddress] String Contract address [options.filesystem] Object Contact source external namespaces map [options.forceCodeCheck] Object true Don't check contract code [options.opt] Object Contract options Example const contractIns = await client.getContractInstance(sourceCode) await contractIns.deploy([321]) or await contractIns.methods.init(321) const callResult = await contractIns.call('setState', [123]) or await contractIns.methods.setState.send(123, options) const staticCallResult = await contractIns.call('setState', [123], { callStatic: true }) or await contractIns.methods.setState.get(123, options) Also you can call contract like: await contractIns.methods.setState(123, options) Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is stateful or not exports.ContractACI() \u21d2 Object \u23cf Contract ACI Stamp Kind : Exported function Returns : Object - Contract compiler instance rtype : Stamp Example ContractACI()","title":"Aci"},{"location":"api/contract/aci/#aeternityaepp-sdkescontractaci","text":"ContractACI module Example import ContractACI from '@aeternity/aepp-sdk/es/contract/aci' @aeternity/aepp-sdk/es/contract/aci instance.compile \u21d2 ContractInstance \u23cf instance.deploy \u21d2 ContractInstance \u23cf instance.call \u21d2 Object \u23cf instance.decodeEvents \u21d2 Object \u23cf getContractInstance(source, [options]) \u21d2 ContractInstance \u23cf exports.ContractACI() \u21d2 Object \u23cf","title":"@aeternity/aepp-sdk/es/contract/aci"},{"location":"api/contract/aci/#instancecompile-contractinstance","text":"Compile contract Kind : Exported member Returns : ContractInstance - Contract ACI object with predefined js methods for contract usage rtype : () => ContractInstance: Object","title":"instance.compile \u21d2 ContractInstance \u23cf"},{"location":"api/contract/aci/#instancedeploy-contractinstance","text":"Deploy contract Kind : Exported member Returns : ContractInstance - Contract ACI object with predefined js methods for contract usage rtype : (init: Array, options: Object = { skipArgsConvert: false }) => ContractInstance: Object Param Type Default Description init Array Contract init function arguments array [options] Object {} options Options object [options.skipArgsConvert] Boolean false Skip Validation and Transforming arguments before prepare call-data","title":"instance.deploy \u21d2 ContractInstance \u23cf"},{"location":"api/contract/aci/#instancecall-object","text":"Call contract function Kind : Exported member Returns : Object - CallResult rtype : (init: Array, options: Object = { skipArgsConvert: false, skipTransformDecoded: false, callStatic: false }) => CallResult: Object Param Type Default Description fn String Function name params Array Array of function arguments [options] Object {} Array of function arguments [options.skipArgsConvert] Boolean false Skip Validation and Transforming arguments before prepare call-data [options.skipTransformDecoded] Boolean false Skip Transform decoded data to JS type [options.callStatic] Boolean false Static function call","title":"instance.call \u21d2 Object \u23cf"},{"location":"api/contract/aci/#instancedecodeevents-object","text":"Decode Events Kind : Exported member Returns : Object - DecodedEvents rtype : (fn: String, events: Array) => DecodedEvents: Array Param Type Description fn String Function name events Array Array of encoded events(callRes.result.log)","title":"instance.decodeEvents \u21d2 Object \u23cf"},{"location":"api/contract/aci/#getcontractinstancesource-options-contractinstance","text":"Generate contract ACI object with predefined js methods for contract usage - can be used for creating a reference to already deployed contracts Kind : Exported function Returns : ContractInstance - JS Contract API Param Type Default Description source String Contract source code [options] Object {} Options object [options.aci] String Contract ACI [options.contractAddress] String Contract address [options.filesystem] Object Contact source external namespaces map [options.forceCodeCheck] Object true Don't check contract code [options.opt] Object Contract options Example const contractIns = await client.getContractInstance(sourceCode) await contractIns.deploy([321]) or await contractIns.methods.init(321) const callResult = await contractIns.call('setState', [123]) or await contractIns.methods.setState.send(123, options) const staticCallResult = await contractIns.call('setState', [123], { callStatic: true }) or await contractIns.methods.setState.get(123, options) Also you can call contract like: await contractIns.methods.setState(123, options) Then sdk decide to make on-chain or static call(dry-run API) transaction based on function is stateful or not","title":"getContractInstance(source, [options]) \u21d2 ContractInstance \u23cf"},{"location":"api/contract/aci/#exportscontractaci-object","text":"Contract ACI Stamp Kind : Exported function Returns : Object - Contract compiler instance rtype : Stamp Example ContractACI()","title":"exports.ContractACI() \u21d2 Object \u23cf"},{"location":"api/contract/compiler/","text":"@aeternity/aepp-sdk/es/contract/compiler ContractCompilerAPI module This is the complement to @aeternity/aepp-sdk/es/contract . Example import ContractCompilerAPI from '@aeternity/aepp-sdk/es/contract/compiler' ContractCompilerAPI([options]) \u21d2 Object \u23cf Contract Compiler Stamp This stamp include api call's related to contract compiler functionality. Kind : Exported function Returns : Object - Contract compiler instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.compilerUrl] String compilerUrl - Url for compiler API Example ContractCompilerAPI({ compilerUrl: 'COMPILER_URL' })","title":"Compiler"},{"location":"api/contract/compiler/#aeternityaepp-sdkescontractcompiler","text":"ContractCompilerAPI module This is the complement to @aeternity/aepp-sdk/es/contract . Example import ContractCompilerAPI from '@aeternity/aepp-sdk/es/contract/compiler'","title":"@aeternity/aepp-sdk/es/contract/compiler"},{"location":"api/contract/compiler/#contractcompilerapioptions-object","text":"Contract Compiler Stamp This stamp include api call's related to contract compiler functionality. Kind : Exported function Returns : Object - Contract compiler instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.compilerUrl] String compilerUrl - Url for compiler API Example ContractCompilerAPI({ compilerUrl: 'COMPILER_URL' })","title":"ContractCompilerAPI([options]) \u21d2 Object \u23cf"},{"location":"api/contract/ga/","text":"@aeternity/aepp-sdk/es/contract/ga Generalize Account module - routines to use generalize account Example import GeneralizeAccount from '@aeternity/aepp-sdk/es/contract/ga' (Using tree-shaking) Example import { GeneralizeAccount } from '@aeternity/aepp-sdk' (Using bundle) @aeternity/aepp-sdk/es/contract/ga exports.GeneralizeAccount([options]) \u21d2 Object \u23cf createGeneralizeAccount(authFnName, source, args, options) \u21d2 Promise.&lt;Readonly.&lt;{result: \\*, owner: \\*, createdAt: Date, address, rawTx: \\*, transaction: \\*}&gt;&gt; \u23cf createMetaTx(rawTransaction, authData, authFnName, options) \u21d2 String \u23cf exports.GeneralizeAccount([options]) \u21d2 Object \u23cf GeneralizeAccount Stamp Provide Generalize Account implementation @aeternity/aepp-sdk/es/contract/ga clients. Kind : Exported function Returns : Object - GeneralizeAccount instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example const authContract = `` await client.createGeneralizeAccount(authFnName, authContract, [...authFnArguments] // Make spend using GA const callData = 'cb_...' // encoded call data for auth contract await client.spend(10000, receiverPub, { authData: { callData } }) // or await client.spend(10000, receiverPub, { authData: { source: authContract, args: [...authContractArgs] } }) // sdk will prepare callData itself createGeneralizeAccount(authFnName, source, args, options) \u21d2 Promise.&lt;Readonly.&lt;{result: \\*, owner: \\*, createdAt: Date, address, rawTx: \\*, transaction: \\*}&gt;&gt; \u23cf Convert current account to GA account Kind : Exported function Param Type Description authFnName String Authorization function name source String Auth contract source code args Array init arguments options Object Options createMetaTx(rawTransaction, authData, authFnName, options) \u21d2 String \u23cf Create a metaTx transaction Kind : Exported function Param Type Description rawTransaction String Inner transaction authData Object Object with gaMeta params authFnName String Authorization function name options Object Options","title":"Generalized Accounts"},{"location":"api/contract/ga/#aeternityaepp-sdkescontractga","text":"Generalize Account module - routines to use generalize account Example import GeneralizeAccount from '@aeternity/aepp-sdk/es/contract/ga' (Using tree-shaking) Example import { GeneralizeAccount } from '@aeternity/aepp-sdk' (Using bundle) @aeternity/aepp-sdk/es/contract/ga exports.GeneralizeAccount([options]) \u21d2 Object \u23cf createGeneralizeAccount(authFnName, source, args, options) \u21d2 Promise.&lt;Readonly.&lt;{result: \\*, owner: \\*, createdAt: Date, address, rawTx: \\*, transaction: \\*}&gt;&gt; \u23cf createMetaTx(rawTransaction, authData, authFnName, options) \u21d2 String \u23cf","title":"@aeternity/aepp-sdk/es/contract/ga"},{"location":"api/contract/ga/#exportsgeneralizeaccountoptions-object","text":"GeneralizeAccount Stamp Provide Generalize Account implementation @aeternity/aepp-sdk/es/contract/ga clients. Kind : Exported function Returns : Object - GeneralizeAccount instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object Example const authContract = `` await client.createGeneralizeAccount(authFnName, authContract, [...authFnArguments] // Make spend using GA const callData = 'cb_...' // encoded call data for auth contract await client.spend(10000, receiverPub, { authData: { callData } }) // or await client.spend(10000, receiverPub, { authData: { source: authContract, args: [...authContractArgs] } }) // sdk will prepare callData itself","title":"exports.GeneralizeAccount([options]) \u21d2 Object \u23cf"},{"location":"api/contract/ga/#creategeneralizeaccountauthfnname-source-args-options-promiseltreadonlyltresult-owner-createdat-date-address-rawtx-transaction-gtgt","text":"Convert current account to GA account Kind : Exported function Param Type Description authFnName String Authorization function name source String Auth contract source code args Array init arguments options Object Options","title":"createGeneralizeAccount(authFnName, source, args, options) \u21d2 Promise.&amp;lt;Readonly.&amp;lt;{result: \\*, owner: \\*, createdAt: Date, address, rawTx: \\*, transaction: \\*}&amp;gt;&amp;gt; \u23cf"},{"location":"api/contract/ga/#createmetatxrawtransaction-authdata-authfnname-options-string","text":"Create a metaTx transaction Kind : Exported function Param Type Description rawTransaction String Inner transaction authData Object Object with gaMeta params authFnName String Authorization function name options Object Options","title":"createMetaTx(rawTransaction, authData, authFnName, options) \u21d2 String \u23cf"},{"location":"api/oracle/node/","text":"@aeternity/aepp-sdk/es/oracle/node OracleNodeAPI module This is the complement to @aeternity/aepp-sdk/es/oracle . Example import OracleNodeAPI from '@aeternity/aepp-sdk/es/oracle/node'","title":"Node"},{"location":"api/oracle/node/#aeternityaepp-sdkesoraclenode","text":"OracleNodeAPI module This is the complement to @aeternity/aepp-sdk/es/oracle . Example import OracleNodeAPI from '@aeternity/aepp-sdk/es/oracle/node'","title":"@aeternity/aepp-sdk/es/oracle/node"},{"location":"api/rpc/client/","text":"@aeternity/aepp-sdk/es/rpc/client RPC client module Example import RpcClient from '@aeternity/aepp-sdk/es/rpc/client' RpcClient([options]) \u21d2 Object \u23cf RPC client Stamp Kind : Exported function Returns : Object - RPC client rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.parent] Object window.parent IFrame parent window [options.self] Object window IFrame window Example RpcClient()","title":"Deprecated RPC Client"},{"location":"api/rpc/client/#aeternityaepp-sdkesrpcclient","text":"RPC client module Example import RpcClient from '@aeternity/aepp-sdk/es/rpc/client'","title":"@aeternity/aepp-sdk/es/rpc/client"},{"location":"api/rpc/client/#rpcclientoptions-object","text":"RPC client Stamp Kind : Exported function Returns : Object - RPC client rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.parent] Object window.parent IFrame parent window [options.self] Object window IFrame window Example RpcClient()","title":"RpcClient([options]) \u21d2 Object \u23cf"},{"location":"api/tx/builder/","text":"@aeternity/aepp-sdk/es/tx/builder JavaScript-based Transaction builder Example import Transaction from '@aeternity/aepp-sdk/es/tx/builder' @aeternity/aepp-sdk/es/tx/builder exports.calculateFee(fee, txType, options) \u21d2 String | Number \u23cf exports.validateParams(params, schema, excludeKeys) \u21d2 Object \u23cf exports.buildRawTx(params, schema, [options]) \u21d2 Array \u23cf exports.unpackRawTx(binary, schema) \u21d2 Object \u23cf getSchema() \u21d2 Object \u23cf exports.buildTx(params, type, [options]) \u21d2 Object \u23cf exports.unpackTx(encodedTx, fromRlpBinary, prefix) \u21d2 Object \u23cf exports.buildTxHash(rawTx, options) \u21d2 String \u23cf exports.calculateFee(fee, txType, options) \u21d2 String | Number \u23cf Calculate fee Kind : Exported function rtype : (fee, txType, gas = 0) => String Param Type Description fee String | Number fee txType String Transaction type options Options Options object options.gas String | Number Gas amount options.params Object Tx params Example calculateFee(null, 'spendTx', { gas, params }) exports.validateParams(params, schema, excludeKeys) \u21d2 Object \u23cf Validate transaction params Kind : Exported function Returns : Object - Object with validation errors Param Type Description params Object Object with tx params schema Array Transaction schema excludeKeys Array Array of keys to exclude for validation exports.buildRawTx(params, schema, [options]) \u21d2 Array \u23cf Build binary transaction Kind : Exported function Returns : Array - Array with binary fields of transaction Throws : Error Validation error Param Type Default Description params Object Object with tx params schema Array Transaction schema [options] Object {} options [options.excludeKeys] Array [] excludeKeys Array of keys to exclude for validation and build [options.denomination] String 'aettos' denomination Denomination of amounts (default: aettos) exports.unpackRawTx(binary, schema) \u21d2 Object \u23cf Unpack binary transaction Kind : Exported function Returns : Object - Object with transaction field's Param Type Description binary Array Array with binary transaction field's schema Array Transaction schema getSchema() \u21d2 Object \u23cf Get transaction serialization/deserialization schema Kind : Exported function Returns : Object - Schema Throws : Error Schema not found error Type Object exports.buildTx(params, type, [options]) \u21d2 Object \u23cf Build transaction hash Kind : Exported function Returns : Object - { tx, rlpEncoded, binary } Object with tx -> Base64Check transaction hash with 'tx_' prefix, rlp encoded transaction and binary transaction Throws : Error Validation error Param Type Default Description params Object Object with tx params type String Transaction type [options] Object {} options [options.excludeKeys] Object excludeKeys Array of keys to exclude for validation and build [options.prefix] String Prefix of transaction exports.unpackTx(encodedTx, fromRlpBinary, prefix) \u21d2 Object \u23cf Unpack transaction hash Kind : Exported function Returns : Object - { tx, rlpEncoded, binary } Object with tx -> Object with transaction param's, rlp encoded transaction and binary transaction Param Type Description encodedTx String | Buffer String or RLP encoded transaction array (if fromRlpBinary flag is true) fromRlpBinary Boolean Unpack from RLP encoded transaction (default: false) prefix String Prefix of data exports.buildTxHash(rawTx, options) \u21d2 String \u23cf Build a transaction hash Kind : Exported function Returns : String - Transaction hash Param Type Description rawTx String | Buffer base64 or rlp encoded transaction options Object options.raw Boolean","title":"Builder"},{"location":"api/tx/builder/#aeternityaepp-sdkestxbuilder","text":"JavaScript-based Transaction builder Example import Transaction from '@aeternity/aepp-sdk/es/tx/builder' @aeternity/aepp-sdk/es/tx/builder exports.calculateFee(fee, txType, options) \u21d2 String | Number \u23cf exports.validateParams(params, schema, excludeKeys) \u21d2 Object \u23cf exports.buildRawTx(params, schema, [options]) \u21d2 Array \u23cf exports.unpackRawTx(binary, schema) \u21d2 Object \u23cf getSchema() \u21d2 Object \u23cf exports.buildTx(params, type, [options]) \u21d2 Object \u23cf exports.unpackTx(encodedTx, fromRlpBinary, prefix) \u21d2 Object \u23cf exports.buildTxHash(rawTx, options) \u21d2 String \u23cf","title":"@aeternity/aepp-sdk/es/tx/builder"},{"location":"api/tx/builder/#exportscalculatefeefee-txtype-options-string-number","text":"Calculate fee Kind : Exported function rtype : (fee, txType, gas = 0) => String Param Type Description fee String | Number fee txType String Transaction type options Options Options object options.gas String | Number Gas amount options.params Object Tx params Example calculateFee(null, 'spendTx', { gas, params })","title":"exports.calculateFee(fee, txType, options) \u21d2 String | Number \u23cf"},{"location":"api/tx/builder/#exportsvalidateparamsparams-schema-excludekeys-object","text":"Validate transaction params Kind : Exported function Returns : Object - Object with validation errors Param Type Description params Object Object with tx params schema Array Transaction schema excludeKeys Array Array of keys to exclude for validation","title":"exports.validateParams(params, schema, excludeKeys) \u21d2 Object \u23cf"},{"location":"api/tx/builder/#exportsbuildrawtxparams-schema-options-array","text":"Build binary transaction Kind : Exported function Returns : Array - Array with binary fields of transaction Throws : Error Validation error Param Type Default Description params Object Object with tx params schema Array Transaction schema [options] Object {} options [options.excludeKeys] Array [] excludeKeys Array of keys to exclude for validation and build [options.denomination] String 'aettos' denomination Denomination of amounts (default: aettos)","title":"exports.buildRawTx(params, schema, [options]) \u21d2 Array \u23cf"},{"location":"api/tx/builder/#exportsunpackrawtxbinary-schema-object","text":"Unpack binary transaction Kind : Exported function Returns : Object - Object with transaction field's Param Type Description binary Array Array with binary transaction field's schema Array Transaction schema","title":"exports.unpackRawTx(binary, schema) \u21d2 Object \u23cf"},{"location":"api/tx/builder/#getschema-object","text":"Get transaction serialization/deserialization schema Kind : Exported function Returns : Object - Schema Throws : Error Schema not found error Type Object","title":"getSchema() \u21d2 Object \u23cf"},{"location":"api/tx/builder/#exportsbuildtxparams-type-options-object","text":"Build transaction hash Kind : Exported function Returns : Object - { tx, rlpEncoded, binary } Object with tx -> Base64Check transaction hash with 'tx_' prefix, rlp encoded transaction and binary transaction Throws : Error Validation error Param Type Default Description params Object Object with tx params type String Transaction type [options] Object {} options [options.excludeKeys] Object excludeKeys Array of keys to exclude for validation and build [options.prefix] String Prefix of transaction","title":"exports.buildTx(params, type, [options]) \u21d2 Object \u23cf"},{"location":"api/tx/builder/#exportsunpacktxencodedtx-fromrlpbinary-prefix-object","text":"Unpack transaction hash Kind : Exported function Returns : Object - { tx, rlpEncoded, binary } Object with tx -> Object with transaction param's, rlp encoded transaction and binary transaction Param Type Description encodedTx String | Buffer String or RLP encoded transaction array (if fromRlpBinary flag is true) fromRlpBinary Boolean Unpack from RLP encoded transaction (default: false) prefix String Prefix of data","title":"exports.unpackTx(encodedTx, fromRlpBinary, prefix) \u21d2 Object \u23cf"},{"location":"api/tx/builder/#exportsbuildtxhashrawtx-options-string","text":"Build a transaction hash Kind : Exported function Returns : String - Transaction hash Param Type Description rawTx String | Buffer base64 or rlp encoded transaction options Object options.raw Boolean","title":"exports.buildTxHash(rawTx, options) \u21d2 String \u23cf"},{"location":"api/tx/tx-object/","text":"@aeternity/aepp-sdk/es/tx/tx-object TxObject module Example import TxObject from '@aeternity/aepp-sdk/es/tx/tx-object' @aeternity/aepp-sdk/es/tx/tx-object buildTransaction(type, params, [options]) \u21d2 Object \u23cf unpackTransaction(tx) \u21d2 Object \u23cf initTransaction([tx], params, type, [options]) \u21d2 Object \u23cf exports.TxObject([options]) \u21d2 Object \u23cf setProp(props, options) \u21d2 TxObject \u23cf getSignatures() \u21d2 Array \u23cf addSignature(signature) \u21d2 void \u23cf calculateMinFee(props) \u21d2 String \u23cf static .fromString(tx) \u21d2 TxObject \u23cf .fromRlp(tx) \u21d2 TxObject \u23cf buildTransaction(type, params, [options]) \u21d2 Object \u23cf Build transaction from object Kind : Exported function Throws : Error Arguments validation error's Param Type Default Description type String Transaction type params Object Transaction params [options] Object {} Options unpackTransaction(tx) \u21d2 Object \u23cf Unpack transaction from RLP encoded binary or base64c string Kind : Exported function Throws : Error Arguments validation error's Param Type Description tx Buffer | String RLP encoded binary or base64c(rlpBinary) string initTransaction([tx], params, type, [options]) \u21d2 Object \u23cf Helper which build or unpack transaction base on constructor arguments Need to provide one of arguments: [tx] -> unpack flow or [params, type] -> build flow Kind : Exported function Throws : Error Arguments validation error's Param Type Default Description [tx] Buffer | String Transaction rlp binary or vase64c string params Object Transaction params type String Transaction type [options] Object {} Options exports.TxObject([options]) \u21d2 Object \u23cf Transaction Validator Stamp This stamp give us possibility to unpack and validate some of transaction properties, to make sure we can post it to the chain Kind : Exported function Returns : Object - TxObject instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.tx] Buffer | String Rlp binary or base64c transaction [options.params] Object Transaction params [options.type] String Transaction type [options.options] Object Build options Example TxObject({ params: {...}, type: 'spendTx' }) setProp(props, options) \u21d2 TxObject \u23cf Rebuild transaction with new params and recalculate fee Kind : Exported function Param Type Description props Object Transaction properties for update options getSignatures() \u21d2 Array \u23cf Get signatures Kind : Exported function Returns : Array - Array of signatures addSignature(signature) \u21d2 void \u23cf Add signature Kind : Exported function Param Type Description signature Buffer | String Signature to add ( Can be: Buffer calculateMinFee(props) \u21d2 String \u23cf Calculate fee Kind : Exported function Returns : String - fee Param Type props Object .fromString(tx) \u21d2 TxObject \u23cf Create txObject from base64c RLP encoded transaction string with 'tx_' prefix Kind : static method of @aeternity/aepp-sdk/es/tx/tx-object Param Type Description tx String Transaction string (tx_23fsdgsdfg...) .fromRlp(tx) \u21d2 TxObject \u23cf Create txObject from transaction RLP binary Kind : static method of @aeternity/aepp-sdk/es/tx/tx-object Param Type Description tx Buffer Transaction RLP binary","title":"tx object"},{"location":"api/tx/tx-object/#aeternityaepp-sdkestxtx-object","text":"TxObject module Example import TxObject from '@aeternity/aepp-sdk/es/tx/tx-object' @aeternity/aepp-sdk/es/tx/tx-object buildTransaction(type, params, [options]) \u21d2 Object \u23cf unpackTransaction(tx) \u21d2 Object \u23cf initTransaction([tx], params, type, [options]) \u21d2 Object \u23cf exports.TxObject([options]) \u21d2 Object \u23cf setProp(props, options) \u21d2 TxObject \u23cf getSignatures() \u21d2 Array \u23cf addSignature(signature) \u21d2 void \u23cf calculateMinFee(props) \u21d2 String \u23cf static .fromString(tx) \u21d2 TxObject \u23cf .fromRlp(tx) \u21d2 TxObject \u23cf","title":"@aeternity/aepp-sdk/es/tx/tx-object"},{"location":"api/tx/tx-object/#buildtransactiontype-params-options-object","text":"Build transaction from object Kind : Exported function Throws : Error Arguments validation error's Param Type Default Description type String Transaction type params Object Transaction params [options] Object {} Options","title":"buildTransaction(type, params, [options]) \u21d2 Object \u23cf"},{"location":"api/tx/tx-object/#unpacktransactiontx-object","text":"Unpack transaction from RLP encoded binary or base64c string Kind : Exported function Throws : Error Arguments validation error's Param Type Description tx Buffer | String RLP encoded binary or base64c(rlpBinary) string","title":"unpackTransaction(tx) \u21d2 Object \u23cf"},{"location":"api/tx/tx-object/#inittransactiontx-params-type-options-object","text":"Helper which build or unpack transaction base on constructor arguments Need to provide one of arguments: [tx] -> unpack flow or [params, type] -> build flow Kind : Exported function Throws : Error Arguments validation error's Param Type Default Description [tx] Buffer | String Transaction rlp binary or vase64c string params Object Transaction params type String Transaction type [options] Object {} Options","title":"initTransaction([tx], params, type, [options]) \u21d2 Object \u23cf"},{"location":"api/tx/tx-object/#exportstxobjectoptions-object","text":"Transaction Validator Stamp This stamp give us possibility to unpack and validate some of transaction properties, to make sure we can post it to the chain Kind : Exported function Returns : Object - TxObject instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.tx] Buffer | String Rlp binary or base64c transaction [options.params] Object Transaction params [options.type] String Transaction type [options.options] Object Build options Example TxObject({ params: {...}, type: 'spendTx' })","title":"exports.TxObject([options]) \u21d2 Object \u23cf"},{"location":"api/tx/tx-object/#setpropprops-options-txobject","text":"Rebuild transaction with new params and recalculate fee Kind : Exported function Param Type Description props Object Transaction properties for update options","title":"setProp(props, options) \u21d2 TxObject \u23cf"},{"location":"api/tx/tx-object/#getsignatures-array","text":"Get signatures Kind : Exported function Returns : Array - Array of signatures","title":"getSignatures() \u21d2 Array \u23cf"},{"location":"api/tx/tx-object/#addsignaturesignature-void","text":"Add signature Kind : Exported function Param Type Description signature Buffer | String Signature to add ( Can be: Buffer","title":"addSignature(signature) \u21d2 void \u23cf"},{"location":"api/tx/tx-object/#calculateminfeeprops-string","text":"Calculate fee Kind : Exported function Returns : String - fee Param Type props Object","title":"calculateMinFee(props) \u21d2 String \u23cf"},{"location":"api/tx/tx-object/#fromstringtx-txobject","text":"Create txObject from base64c RLP encoded transaction string with 'tx_' prefix Kind : static method of @aeternity/aepp-sdk/es/tx/tx-object Param Type Description tx String Transaction string (tx_23fsdgsdfg...)","title":".fromString(tx) \u21d2 TxObject \u23cf"},{"location":"api/tx/tx-object/#fromrlptx-txobject","text":"Create txObject from transaction RLP binary Kind : static method of @aeternity/aepp-sdk/es/tx/tx-object Param Type Description tx Buffer Transaction RLP binary","title":".fromRlp(tx) \u21d2 TxObject \u23cf"},{"location":"api/tx/tx/","text":"@aeternity/aepp-sdk/es/tx/tx Transaction module Example import Transaction from '@aeternity/aepp-sdk/es/tx/tx' Transaction([options]) \u21d2 Object \u23cf Transaction Stamp This is implementation of Tx relays the creation of transactions to module:@aeternity/aepp-sdk/es/Node . This stamp provide ability to create native transaction's, or transaction's using Node API. As there is no built-in security between Node and client communication, creating transaction using module:@aeternity/aepp-sdk/es/Node API must never be used for production but can be very useful to verify other implementations. Kind : Exported function Returns : Object - Transaction instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.nativeMode] Boolean true options.nativeMode - Use Native build of transaction's options.url String Node url options.internalUrl String Node internal url Example Transaction({url: 'https://testnet.aeternity.io/'})","title":"tx stamp"},{"location":"api/tx/tx/#aeternityaepp-sdkestxtx","text":"Transaction module Example import Transaction from '@aeternity/aepp-sdk/es/tx/tx'","title":"@aeternity/aepp-sdk/es/tx/tx"},{"location":"api/tx/tx/#transactionoptions-object","text":"Transaction Stamp This is implementation of Tx relays the creation of transactions to module:@aeternity/aepp-sdk/es/Node . This stamp provide ability to create native transaction's, or transaction's using Node API. As there is no built-in security between Node and client communication, creating transaction using module:@aeternity/aepp-sdk/es/Node API must never be used for production but can be very useful to verify other implementations. Kind : Exported function Returns : Object - Transaction instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.nativeMode] Boolean true options.nativeMode - Use Native build of transaction's options.url String Node url options.internalUrl String Node internal url Example Transaction({url: 'https://testnet.aeternity.io/'})","title":"Transaction([options]) \u21d2 Object \u23cf"},{"location":"api/tx/validator/","text":"@aeternity/aepp-sdk/es/tx/validator Transaction validator Example import TransactionValidator from '@aeternity/aepp-sdk/es/tx/validator' @aeternity/aepp-sdk/es/tx/validator unpackAndVerify(txHash, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf verifyTx([data], networkId) \u21d2 Promise.&lt;Array&gt; \u23cf TransactionValidator([options]) \u21d2 Object \u23cf unpackAndVerify(txHash, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf Unpack and verify transaction (verify nonce, ttl, fee, signature, account balance) Kind : Exported function Returns : Promise.&lt;Object&gt; - Object with verification errors and warnings Param Type Default Description txHash String Base64Check transaction hash [options] Object {} Options [options.networkId] String networkId Use in signature verification verifyTx([data], networkId) \u21d2 Promise.&lt;Array&gt; \u23cf Verify transaction (verify nonce, ttl, fee, signature, account balance) Kind : Exported function Returns : Promise.&lt;Array&gt; - Object with verification errors and warnings Param Type Default Description [data] Object {} data TX data object [data.tx] String tx Transaction hash [data.signatures] Array signatures Transaction signature's [data.rlpEncoded] Array rlpEncoded RLP encoded transaction networkId String networkId Use in signature verification TransactionValidator([options]) \u21d2 Object \u23cf Transaction Validator Stamp This stamp give us possibility to unpack and validate some of transaction properties, to make sure we can post it to the chain Kind : Exported function Returns : Object - Transaction Validator instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.url] Object Node url [options.internalUrl] Object Node internal url Example TransactionValidator({url: 'https://testnet.aeternity.io'})","title":"tx validator"},{"location":"api/tx/validator/#aeternityaepp-sdkestxvalidator","text":"Transaction validator Example import TransactionValidator from '@aeternity/aepp-sdk/es/tx/validator' @aeternity/aepp-sdk/es/tx/validator unpackAndVerify(txHash, [options]) \u21d2 Promise.&lt;Object&gt; \u23cf verifyTx([data], networkId) \u21d2 Promise.&lt;Array&gt; \u23cf TransactionValidator([options]) \u21d2 Object \u23cf","title":"@aeternity/aepp-sdk/es/tx/validator"},{"location":"api/tx/validator/#unpackandverifytxhash-options-promiseltobjectgt","text":"Unpack and verify transaction (verify nonce, ttl, fee, signature, account balance) Kind : Exported function Returns : Promise.&lt;Object&gt; - Object with verification errors and warnings Param Type Default Description txHash String Base64Check transaction hash [options] Object {} Options [options.networkId] String networkId Use in signature verification","title":"unpackAndVerify(txHash, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt; \u23cf"},{"location":"api/tx/validator/#verifytxdata-networkid-promiseltarraygt","text":"Verify transaction (verify nonce, ttl, fee, signature, account balance) Kind : Exported function Returns : Promise.&lt;Array&gt; - Object with verification errors and warnings Param Type Default Description [data] Object {} data TX data object [data.tx] String tx Transaction hash [data.signatures] Array signatures Transaction signature's [data.rlpEncoded] Array rlpEncoded RLP encoded transaction networkId String networkId Use in signature verification","title":"verifyTx([data], networkId) \u21d2 Promise.&amp;lt;Array&amp;gt; \u23cf"},{"location":"api/tx/validator/#transactionvalidatoroptions-object","text":"Transaction Validator Stamp This stamp give us possibility to unpack and validate some of transaction properties, to make sure we can post it to the chain Kind : Exported function Returns : Object - Transaction Validator instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object [options.url] Object Node url [options.internalUrl] Object Node internal url Example TransactionValidator({url: 'https://testnet.aeternity.io'})","title":"TransactionValidator([options]) \u21d2 Object \u23cf"},{"location":"api/tx/builder/helpers/","text":"@aeternity/aepp-sdk/es/tx/builder/helpers JavaScript-based Transaction builder helper function's Example import TxBuilderHelper from '@aeternity/aepp-sdk/es/tx/builder/helpers' @aeternity/aepp-sdk/es/tx/builder/helpers exports.buildContractId(ownerId, nonce) \u21d2 string \u23cf exports.buildHash(prefix, data, options) \u21d2 String \u23cf exports.formatSalt(salt) \u21d2 string \u23cf exports.produceNameId(name) \u21d2 String \u23cf exports.decode(data, type) \u21d2 Buffer \u23cf exports.encode(data, type) \u21d2 String \u23cf exports.writeId(hashId) \u21d2 Buffer \u23cf exports.readId(buf) \u21d2 String \u23cf exports.writeInt(val) \u21d2 Buffer \u23cf exports.readInt(buf) \u21d2 String \u23cf exports.buildPointers(pointers) \u21d2 Array \u23cf exports.readPointers(pointers) \u21d2 Array \u23cf exports.isNameValid(name, [throwError]) \u21d2 \u23cf exports.validatePointers(pointers) \u21d2 Boolean \u23cf exports.getMinimumNameFee(domain) \u21d2 String \u23cf exports.computeBidFee(domain, startFee, [increment]) \u21d2 String \u23cf exports.computeAuctionEndBlock(domain, claimHeight) \u21d2 String \u23cf exports.getContractBackendFromTx({) \u21d2 String \u23cf exports.isAuctionName(name) \u21d2 Boolean \u23cf exports.buildContractId(ownerId, nonce) \u21d2 string \u23cf Build a contract public key Kind : Exported function Returns : string - Contract public key Param Type Description ownerId string The public key of the owner account nonce number the nonce of the transaction exports.buildHash(prefix, data, options) \u21d2 String \u23cf Build hash Kind : Exported function Returns : String - Transaction hash Param Type Description prefix String Transaction hash prefix data Buffer Rlp encoded transaction buffer options Object options.raw Boolean exports.formatSalt(salt) \u21d2 string \u23cf Format the salt into a 64-byte hex string Kind : Exported function Returns : string - Zero-padded hex string of salt Param Type salt number exports.produceNameId(name) \u21d2 String \u23cf Encode a domain name Kind : Exported function Returns : String - nm_ prefixed encoded domain name Param Type Description name String Name to encode exports.decode(data, type) \u21d2 Buffer \u23cf Decode data using the default encoding/decoding algorithm Kind : Exported function Returns : Buffer - Buffer of decoded Base58check or Base64check data Param Type Description data string An encoded and prefixed string (ex tx_..., sg_..., ak_....) type string Prefix of Transaction exports.encode(data, type) \u21d2 String \u23cf Encode data using the default encoding/decoding algorithm Kind : Exported function Returns : String - Encoded string Base58check or Base64check data Param Type Description data Buffer | String An decoded data type string Prefix of Transaction exports.writeId(hashId) \u21d2 Buffer \u23cf Utility function to create and _id type Kind : Exported function Returns : Buffer - Buffer Buffer with ID tag and decoded HASh Param Type Description hashId string Encoded hash exports.readId(buf) \u21d2 String \u23cf Utility function to read and _id type Kind : Exported function Returns : String - Encoided hash string with prefix Param Type Description buf Buffer Data exports.writeInt(val) \u21d2 Buffer \u23cf Utility function to convert int to bytes Kind : Exported function Returns : Buffer - Buffer Buffer from number(BigEndian) Param Type Description val Number | String | BigNumber Value exports.readInt(buf) \u21d2 String \u23cf Utility function to convert bytes to int Kind : Exported function Returns : String - Buffer Buffer from number(BigEndian) Param Type Description buf Buffer Value exports.buildPointers(pointers) \u21d2 Array \u23cf Helper function to build pointers for name update TX Kind : Exported function Returns : Array - Serialized pointers array Param Type Description pointers Array Array of pointers ([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ]) exports.readPointers(pointers) \u21d2 Array \u23cf Helper function to read pointers from name update TX Kind : Exported function Returns : Array - Deserialize pointer array Param Type Description pointers Array Array of pointers ([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ]) exports.isNameValid(name, [throwError]) \u21d2 \u23cf Is name valid Kind : Exported function Returns : Boolean Throws : Error Param Type Default Description name string [throwError] boolean true Throw error on invalid exports.validatePointers(pointers) \u21d2 Boolean \u23cf Validate name pointers array Kind : Exported function Param Type Description pointers Array.&lt;String&gt; Pointers array. Allowed values is: account(ak_), oracle(ok_), contract(ct_), channel(ch_) exports.getMinimumNameFee(domain) \u21d2 String \u23cf Get the minimum name fee for a domain Kind : Exported function Returns : String - the minimum fee for the domain auction Param Type Description domain String the domain name to get the fee for exports.computeBidFee(domain, startFee, [increment]) \u21d2 String \u23cf Compute bid fee for AENS auction Kind : Exported function Returns : String - Bid fee Param Type Default Description domain String the domain name to get the fee for startFee Number | String Auction start fee [increment] Number 0.5 Bid multiplier(In percentage, must be between 0 and 1) exports.computeAuctionEndBlock(domain, claimHeight) \u21d2 String \u23cf Compute auction end height Kind : Exported function Returns : String - Auction end height Param Type Description domain String the domain name to get the fee for claimHeight Number | String Auction starting height exports.getContractBackendFromTx({) \u21d2 String \u23cf Get contract backend by abiVersion Kind : Exported function Returns : String - Backend Param Type Description { Object abiVersion } abiVersion Transaction abiVersion exports.isAuctionName(name) \u21d2 Boolean \u23cf Is name accept going to auction Kind : Exported function Param Type Description name String Transaction abiVersion","title":"Helpers"},{"location":"api/tx/builder/helpers/#aeternityaepp-sdkestxbuilderhelpers","text":"JavaScript-based Transaction builder helper function's Example import TxBuilderHelper from '@aeternity/aepp-sdk/es/tx/builder/helpers' @aeternity/aepp-sdk/es/tx/builder/helpers exports.buildContractId(ownerId, nonce) \u21d2 string \u23cf exports.buildHash(prefix, data, options) \u21d2 String \u23cf exports.formatSalt(salt) \u21d2 string \u23cf exports.produceNameId(name) \u21d2 String \u23cf exports.decode(data, type) \u21d2 Buffer \u23cf exports.encode(data, type) \u21d2 String \u23cf exports.writeId(hashId) \u21d2 Buffer \u23cf exports.readId(buf) \u21d2 String \u23cf exports.writeInt(val) \u21d2 Buffer \u23cf exports.readInt(buf) \u21d2 String \u23cf exports.buildPointers(pointers) \u21d2 Array \u23cf exports.readPointers(pointers) \u21d2 Array \u23cf exports.isNameValid(name, [throwError]) \u21d2 \u23cf exports.validatePointers(pointers) \u21d2 Boolean \u23cf exports.getMinimumNameFee(domain) \u21d2 String \u23cf exports.computeBidFee(domain, startFee, [increment]) \u21d2 String \u23cf exports.computeAuctionEndBlock(domain, claimHeight) \u21d2 String \u23cf exports.getContractBackendFromTx({) \u21d2 String \u23cf exports.isAuctionName(name) \u21d2 Boolean \u23cf","title":"@aeternity/aepp-sdk/es/tx/builder/helpers"},{"location":"api/tx/builder/helpers/#exportsbuildcontractidownerid-nonce-string","text":"Build a contract public key Kind : Exported function Returns : string - Contract public key Param Type Description ownerId string The public key of the owner account nonce number the nonce of the transaction","title":"exports.buildContractId(ownerId, nonce) \u21d2 string \u23cf"},{"location":"api/tx/builder/helpers/#exportsbuildhashprefix-data-options-string","text":"Build hash Kind : Exported function Returns : String - Transaction hash Param Type Description prefix String Transaction hash prefix data Buffer Rlp encoded transaction buffer options Object options.raw Boolean","title":"exports.buildHash(prefix, data, options) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportsformatsaltsalt-string","text":"Format the salt into a 64-byte hex string Kind : Exported function Returns : string - Zero-padded hex string of salt Param Type salt number","title":"exports.formatSalt(salt) \u21d2 string \u23cf"},{"location":"api/tx/builder/helpers/#exportsproducenameidname-string","text":"Encode a domain name Kind : Exported function Returns : String - nm_ prefixed encoded domain name Param Type Description name String Name to encode","title":"exports.produceNameId(name) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportsdecodedata-type-buffer","text":"Decode data using the default encoding/decoding algorithm Kind : Exported function Returns : Buffer - Buffer of decoded Base58check or Base64check data Param Type Description data string An encoded and prefixed string (ex tx_..., sg_..., ak_....) type string Prefix of Transaction","title":"exports.decode(data, type) \u21d2 Buffer \u23cf"},{"location":"api/tx/builder/helpers/#exportsencodedata-type-string","text":"Encode data using the default encoding/decoding algorithm Kind : Exported function Returns : String - Encoded string Base58check or Base64check data Param Type Description data Buffer | String An decoded data type string Prefix of Transaction","title":"exports.encode(data, type) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportswriteidhashid-buffer","text":"Utility function to create and _id type Kind : Exported function Returns : Buffer - Buffer Buffer with ID tag and decoded HASh Param Type Description hashId string Encoded hash","title":"exports.writeId(hashId) \u21d2 Buffer \u23cf"},{"location":"api/tx/builder/helpers/#exportsreadidbuf-string","text":"Utility function to read and _id type Kind : Exported function Returns : String - Encoided hash string with prefix Param Type Description buf Buffer Data","title":"exports.readId(buf) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportswriteintval-buffer","text":"Utility function to convert int to bytes Kind : Exported function Returns : Buffer - Buffer Buffer from number(BigEndian) Param Type Description val Number | String | BigNumber Value","title":"exports.writeInt(val) \u21d2 Buffer \u23cf"},{"location":"api/tx/builder/helpers/#exportsreadintbuf-string","text":"Utility function to convert bytes to int Kind : Exported function Returns : String - Buffer Buffer from number(BigEndian) Param Type Description buf Buffer Value","title":"exports.readInt(buf) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportsbuildpointerspointers-array","text":"Helper function to build pointers for name update TX Kind : Exported function Returns : Array - Serialized pointers array Param Type Description pointers Array Array of pointers ([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])","title":"exports.buildPointers(pointers) \u21d2 Array \u23cf"},{"location":"api/tx/builder/helpers/#exportsreadpointerspointers-array","text":"Helper function to read pointers from name update TX Kind : Exported function Returns : Array - Deserialize pointer array Param Type Description pointers Array Array of pointers ([ { key: 'account_pubkey', id: 'ak_32klj5j23k23j5423l434l2j3423'} ])","title":"exports.readPointers(pointers) \u21d2 Array \u23cf"},{"location":"api/tx/builder/helpers/#exportsisnamevalidname-throwerror","text":"Is name valid Kind : Exported function Returns : Boolean Throws : Error Param Type Default Description name string [throwError] boolean true Throw error on invalid","title":"exports.isNameValid(name, [throwError]) \u21d2 \u23cf"},{"location":"api/tx/builder/helpers/#exportsvalidatepointerspointers-boolean","text":"Validate name pointers array Kind : Exported function Param Type Description pointers Array.&lt;String&gt; Pointers array. Allowed values is: account(ak_), oracle(ok_), contract(ct_), channel(ch_)","title":"exports.validatePointers(pointers) \u21d2 Boolean \u23cf"},{"location":"api/tx/builder/helpers/#exportsgetminimumnamefeedomain-string","text":"Get the minimum name fee for a domain Kind : Exported function Returns : String - the minimum fee for the domain auction Param Type Description domain String the domain name to get the fee for","title":"exports.getMinimumNameFee(domain) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportscomputebidfeedomain-startfee-increment-string","text":"Compute bid fee for AENS auction Kind : Exported function Returns : String - Bid fee Param Type Default Description domain String the domain name to get the fee for startFee Number | String Auction start fee [increment] Number 0.5 Bid multiplier(In percentage, must be between 0 and 1)","title":"exports.computeBidFee(domain, startFee, [increment]) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportscomputeauctionendblockdomain-claimheight-string","text":"Compute auction end height Kind : Exported function Returns : String - Auction end height Param Type Description domain String the domain name to get the fee for claimHeight Number | String Auction starting height","title":"exports.computeAuctionEndBlock(domain, claimHeight) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportsgetcontractbackendfromtx-string","text":"Get contract backend by abiVersion Kind : Exported function Returns : String - Backend Param Type Description { Object abiVersion } abiVersion Transaction abiVersion","title":"exports.getContractBackendFromTx({) \u21d2 String \u23cf"},{"location":"api/tx/builder/helpers/#exportsisauctionnamename-boolean","text":"Is name accept going to auction Kind : Exported function Param Type Description name String Transaction abiVersion","title":"exports.isAuctionName(name) \u21d2 Boolean \u23cf"},{"location":"api/tx/builder/schema/","text":"@aeternity/aepp-sdk/es/tx/builder/schema Transaction Schema for TxBuilder Example import TxSchema from '@aeternity/aepp-sdk/es/tx/builder/schema' exports.TX_TYPE \u23cf Object with transaction types Kind : Exported constant Properties Name Type signed String spend String nameClaim String namePreClaim String nameUpdate String nameRevoke String nameTransfer String contractCreate String contractCall String oracleRegister String oracleExtend String oracleQuery String oracleResponse String","title":"Schema"},{"location":"api/tx/builder/schema/#aeternityaepp-sdkestxbuilderschema","text":"Transaction Schema for TxBuilder Example import TxSchema from '@aeternity/aepp-sdk/es/tx/builder/schema'","title":"@aeternity/aepp-sdk/es/tx/builder/schema"},{"location":"api/tx/builder/schema/#exportstx_type","text":"Object with transaction types Kind : Exported constant Properties Name Type signed String spend String nameClaim String namePreClaim String nameUpdate String nameRevoke String nameTransfer String contractCreate String contractCall String oracleRegister String oracleExtend String oracleQuery String oracleResponse String","title":"exports.TX_TYPE \u23cf"},{"location":"api/utils/amount-formatter/","text":"@aeternity/aepp-sdk/es/utils/amount-formatter Amount Formatter Example import { format, toAettos, AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter' @aeternity/aepp-sdk/es/utils/amount-formatter .AE_AMOUNT_FORMATS .DENOMINATION_MAGNITUDE .toAe \u21d2 String .toAettos \u21d2 String .formatAmount \u21d2 String @aeternity/aepp-sdk/es/utils/amount-formatter.AE_AMOUNT_FORMATS AE amount formats Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter @aeternity/aepp-sdk/es/utils/amount-formatter.DENOMINATION_MAGNITUDE DENOMINATION_MAGNITUDE Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter @aeternity/aepp-sdk/es/utils/amount-formatter.toAe \u21d2 String Convert amount to AE Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'aettos' denomination of amount, can be ['ae', 'aettos'] @aeternity/aepp-sdk/es/utils/amount-formatter.toAettos \u21d2 String Convert amount to aettos Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'ae' denomination of amount, can be ['ae', 'aettos'] @aeternity/aepp-sdk/es/utils/amount-formatter.formatAmount \u21d2 String Convert amount from one to other denomination Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'aettos' denomination of amount, can be ['ae', 'aettos'] [options.targetDenomination] String 'aettos' target denomination, can be ['ae', 'aettos']","title":"Amount formatter"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formatter","text":"Amount Formatter Example import { format, toAettos, AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter' @aeternity/aepp-sdk/es/utils/amount-formatter .AE_AMOUNT_FORMATS .DENOMINATION_MAGNITUDE .toAe \u21d2 String .toAettos \u21d2 String .formatAmount \u21d2 String","title":"@aeternity/aepp-sdk/es/utils/amount-formatter"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formatterae_amount_formats","text":"AE amount formats Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter","title":"@aeternity/aepp-sdk/es/utils/amount-formatter.AE_AMOUNT_FORMATS"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formatterdenomination_magnitude","text":"DENOMINATION_MAGNITUDE Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter","title":"@aeternity/aepp-sdk/es/utils/amount-formatter.DENOMINATION_MAGNITUDE"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formattertoae-string","text":"Convert amount to AE Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'aettos' denomination of amount, can be ['ae', 'aettos']","title":"@aeternity/aepp-sdk/es/utils/amount-formatter.toAe \u21d2 String"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formattertoaettos-string","text":"Convert amount to aettos Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'ae' denomination of amount, can be ['ae', 'aettos']","title":"@aeternity/aepp-sdk/es/utils/amount-formatter.toAettos \u21d2 String"},{"location":"api/utils/amount-formatter/#aeternityaepp-sdkesutilsamount-formatterformatamount-string","text":"Convert amount from one to other denomination Kind : static constant of @aeternity/aepp-sdk/es/utils/amount-formatter Param Type Default Description value String | Number | BigNumber amount to convert [options] Object {} options [options.denomination] String 'aettos' denomination of amount, can be ['ae', 'aettos'] [options.targetDenomination] String 'aettos' target denomination, can be ['ae', 'aettos']","title":"@aeternity/aepp-sdk/es/utils/amount-formatter.formatAmount \u21d2 String"},{"location":"api/utils/bignumber/","text":"@aeternity/aepp-sdk/es/utils/bignumber Big Number Helpers Example import { parseBigNumber, asBigNumber, isBigNumber, ceil } from '@aeternity/aepp-sdk/es/utils/bignumber' @aeternity/aepp-sdk/es/utils/bignumber .parseBigNumber(number) \u21d2 String .asBigNumber(number) \u21d2 BigNumber .isBigNumber(number) \u21d2 Boolean .ceil(bigNumber) \u21d2 BigNumber @aeternity/aepp-sdk/es/utils/bignumber.parseBigNumber(number) \u21d2 String Convert number to string Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert @aeternity/aepp-sdk/es/utils/bignumber.asBigNumber(number) \u21d2 BigNumber Convert number to BigNumber instance Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert @aeternity/aepp-sdk/es/utils/bignumber.isBigNumber(number) \u21d2 Boolean Check if value is BigNumber, Number or number string representation Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert @aeternity/aepp-sdk/es/utils/bignumber.ceil(bigNumber) \u21d2 BigNumber BigNumber ceil operation Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type bigNumber String | Number | BigNumber","title":"Bignumber"},{"location":"api/utils/bignumber/#aeternityaepp-sdkesutilsbignumber","text":"Big Number Helpers Example import { parseBigNumber, asBigNumber, isBigNumber, ceil } from '@aeternity/aepp-sdk/es/utils/bignumber' @aeternity/aepp-sdk/es/utils/bignumber .parseBigNumber(number) \u21d2 String .asBigNumber(number) \u21d2 BigNumber .isBigNumber(number) \u21d2 Boolean .ceil(bigNumber) \u21d2 BigNumber","title":"@aeternity/aepp-sdk/es/utils/bignumber"},{"location":"api/utils/bignumber/#aeternityaepp-sdkesutilsbignumberparsebignumbernumber-string","text":"Convert number to string Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert","title":"@aeternity/aepp-sdk/es/utils/bignumber.parseBigNumber(number) \u21d2 String"},{"location":"api/utils/bignumber/#aeternityaepp-sdkesutilsbignumberasbignumbernumber-bignumber","text":"Convert number to BigNumber instance Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert","title":"@aeternity/aepp-sdk/es/utils/bignumber.asBigNumber(number) \u21d2 BigNumber"},{"location":"api/utils/bignumber/#aeternityaepp-sdkesutilsbignumberisbignumbernumber-boolean","text":"Check if value is BigNumber, Number or number string representation Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type Description number String | Number | BigNumber number to convert","title":"@aeternity/aepp-sdk/es/utils/bignumber.isBigNumber(number) \u21d2 Boolean"},{"location":"api/utils/bignumber/#aeternityaepp-sdkesutilsbignumberceilbignumber-bignumber","text":"BigNumber ceil operation Kind : static method of @aeternity/aepp-sdk/es/utils/bignumber Param Type bigNumber String | Number | BigNumber","title":"@aeternity/aepp-sdk/es/utils/bignumber.ceil(bigNumber) \u21d2 BigNumber"},{"location":"api/utils/bytes/","text":"@aeternity/aepp-sdk/es/utils/bytes Bytes module Example import * as Crypto from '@aeternity/aepp-sdk/es/utils/bytes' @aeternity/aepp-sdk/es/utils/bytes .leftPad(length, inputBuffer) \u21d2 .rightPad(length, inputBuffer) \u21d2 .bigNumberToByteArray(x) \u21d2 .str2buf(str, [enc]) \u21d2 buffer @aeternity/aepp-sdk/es/utils/bytes.leftPad(length, inputBuffer) \u21d2 Left pad the input data with 0 bytes Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : the padded data Param Description length to pad to inputBuffer data to pad @aeternity/aepp-sdk/es/utils/bytes.rightPad(length, inputBuffer) \u21d2 Right pad the input data with 0 bytes Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : the padded data Param Description length to pad to inputBuffer data to pad @aeternity/aepp-sdk/es/utils/bytes.bigNumberToByteArray(x) \u21d2 Convert bignumber to byte array Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : Buffer Param Description x bignumber instance @aeternity/aepp-sdk/es/utils/bytes.str2buf(str, [enc]) \u21d2 buffer Convert a string to a Buffer. If encoding is not specified, hex-encoding will be used if the input is valid hex. If the input is valid base64 but not valid hex, base64 will be used. Otherwise, utf8 will be used. Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : buffer - Buffer (bytearray) containing the input data. Param Type Description str string String to be converted. [enc] string Encoding of the input string (optional).","title":"Bytes"},{"location":"api/utils/bytes/#aeternityaepp-sdkesutilsbytes","text":"Bytes module Example import * as Crypto from '@aeternity/aepp-sdk/es/utils/bytes' @aeternity/aepp-sdk/es/utils/bytes .leftPad(length, inputBuffer) \u21d2 .rightPad(length, inputBuffer) \u21d2 .bigNumberToByteArray(x) \u21d2 .str2buf(str, [enc]) \u21d2 buffer","title":"@aeternity/aepp-sdk/es/utils/bytes"},{"location":"api/utils/bytes/#aeternityaepp-sdkesutilsbytesleftpadlength-inputbuffer","text":"Left pad the input data with 0 bytes Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : the padded data Param Description length to pad to inputBuffer data to pad","title":"@aeternity/aepp-sdk/es/utils/bytes.leftPad(length, inputBuffer) \u21d2"},{"location":"api/utils/bytes/#aeternityaepp-sdkesutilsbytesrightpadlength-inputbuffer","text":"Right pad the input data with 0 bytes Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : the padded data Param Description length to pad to inputBuffer data to pad","title":"@aeternity/aepp-sdk/es/utils/bytes.rightPad(length, inputBuffer) \u21d2"},{"location":"api/utils/bytes/#aeternityaepp-sdkesutilsbytesbignumbertobytearrayx","text":"Convert bignumber to byte array Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : Buffer Param Description x bignumber instance","title":"@aeternity/aepp-sdk/es/utils/bytes.bigNumberToByteArray(x) \u21d2"},{"location":"api/utils/bytes/#aeternityaepp-sdkesutilsbytesstr2bufstr-enc-buffer","text":"Convert a string to a Buffer. If encoding is not specified, hex-encoding will be used if the input is valid hex. If the input is valid base64 but not valid hex, base64 will be used. Otherwise, utf8 will be used. Kind : static method of @aeternity/aepp-sdk/es/utils/bytes Returns : buffer - Buffer (bytearray) containing the input data. Param Type Description str string String to be converted. [enc] string Encoding of the input string (optional).","title":"@aeternity/aepp-sdk/es/utils/bytes.str2buf(str, [enc]) \u21d2 buffer"},{"location":"api/utils/crypto/","text":"@aeternity/aepp-sdk/es/utils/crypto Crypto module Example import * as Crypto from '@aeternity/aepp-sdk/es/utils/crypto' @aeternity/aepp-sdk/es/utils/crypto static .decode \u21d2 Array .formatAddress(format, address) \u21d2 String .getAddressFromPriv(secret) \u21d2 String .isAddressValid(address, prefix) \u21d2 Boolean .addressToHex(base58CheckAddress) \u21d2 String .addressFromDecimal(decimalAddress) \u21d2 String .hash(input) \u21d2 Buffer .sha256hash(input) \u21d2 String .salt() \u21d2 Number .encodeBase64Check(input) \u21d2 Buffer .decodeBase64Check(str) \u21d2 Buffer .encodeBase58Check(input) \u21d2 String .decodeBase58Check(str) \u21d2 Buffer .hexStringToByte(str) \u21d2 Uint8Array .encodeUnsigned(value) \u21d2 Buffer .encodeContractAddress(owner, nonce) \u21d2 String .generateKeyPairFromSecret(secret) \u21d2 Object .generateKeyPair(raw) \u21d2 Object .encryptPublicKey(password, binaryKey) \u21d2 Uint8Array .encryptPrivateKey(password, binaryKey) \u21d2 Uint8Array .encryptKey(password, binaryData) \u21d2 Uint8Array .decryptKey(password, encrypted) \u21d2 Buffer .sign(data, privateKey) \u21d2 Buffer | Uint8Array .verify(str, signature, publicKey) \u21d2 Boolean .prepareTx(signature, data) \u21d2 Transaction .aeEncodeKey(binaryKey) \u21d2 String .generateSaveWallet(password) \u21d2 Object .decryptPrivateKey(password) \u21d2 Buffer .decryptPubKey(password) \u21d2 Buffer .assertedType(data, type, omitError) \u21d2 String | Boolean .decodeTx(txHash) \u21d2 Buffer .encodeTx(txData) \u21d2 String .isValidKeypair(privateKey, publicKey) \u21d2 Boolean .envKeypair(env, [force]) \u21d2 Object .encryptData(msg, publicKey) \u21d2 Object .decryptData(secretKey, encryptedData) \u21d2 Buffer | null inner ~Transaction : Array @aeternity/aepp-sdk/es/utils/crypto.decode \u21d2 Array RLP decode Kind : static constant of @aeternity/aepp-sdk/es/utils/crypto Returns : Array - Array of Buffers containing the original message rtype : (data: Any) => Buffer[] Param Type Description data Buffer | String | Integer | Array Data to decode @aeternity/aepp-sdk/es/utils/crypto.formatAddress(format, address) \u21d2 String Format account address Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Formatted address rtype : (format: String, address: String) => tx: Promise[String] Param Type Description format String Format type address String Base58check account address @aeternity/aepp-sdk/es/utils/crypto.getAddressFromPriv(secret) \u21d2 String Generate address from secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Public key rtype : (secret: String) => tx: Promise[String] Param Type Description secret String Private key @aeternity/aepp-sdk/es/utils/crypto.isAddressValid(address, prefix) \u21d2 Boolean Check if address is valid Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - valid rtype : (input: String) => valid: Boolean Param Type Description address String Address prefix String Transaction prefix. Default: 'ak' @aeternity/aepp-sdk/es/utils/crypto.addressToHex(base58CheckAddress) \u21d2 String Convert base58Check address to hex string Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Hex string rtype : (base58CheckAddress: String) => hexAddress: String Param Type Description base58CheckAddress String Address @aeternity/aepp-sdk/es/utils/crypto.addressFromDecimal(decimalAddress) \u21d2 String Parse decimal address and return base58Check encoded address with prefix 'ak' Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - address rtype : (input: String) => address: String Param Type Description decimalAddress String Address @aeternity/aepp-sdk/es/utils/crypto.hash(input) \u21d2 Buffer Calculate 256bits Blake2b hash of input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Hash rtype : (input: String) => hash: String Param Type Description input String | Buffer Data to hash @aeternity/aepp-sdk/es/utils/crypto.sha256hash(input) \u21d2 String Calculate SHA256 hash of input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Hash rtype : (input: String) => hash: String Param Type Description input String Data to hash @aeternity/aepp-sdk/es/utils/crypto.salt() \u21d2 Number Generate a random salt (positive integer) Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Number - random salt rtype : () => salt: Number @aeternity/aepp-sdk/es/utils/crypto.encodeBase64Check(input) \u21d2 Buffer Base64check encode given input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base64check encoded data rtype : (input: String|buffer) => Buffer Param Type Description input String Data to encode @aeternity/aepp-sdk/es/utils/crypto.decodeBase64Check(str) \u21d2 Buffer Base64check decode given str Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base64check decoded data rtype : (str: String) => Buffer Param Type Description str String Data to decode @aeternity/aepp-sdk/es/utils/crypto.encodeBase58Check(input) \u21d2 String Base58 encode given input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Base58 encoded data rtype : (input: String) => String Param Type Description input String | Buffer Data to encode @aeternity/aepp-sdk/es/utils/crypto.decodeBase58Check(str) \u21d2 Buffer Base58 decode given str Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base58 decoded data rtype : (str: String) => Buffer Param Type Description str String Data to decode @aeternity/aepp-sdk/es/utils/crypto.hexStringToByte(str) \u21d2 Uint8Array Conver hex string to Uint8Array Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - - converted data rtype : (str: String) => Uint8Array Param Type Description str String Data to conver @aeternity/aepp-sdk/es/utils/crypto.encodeUnsigned(value) \u21d2 Buffer Converts a positive integer to the smallest possible representation in a binary digit representation Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - - Encoded data rtype : (value: Number) => Buffer Param Type Description value Number Value to encode @aeternity/aepp-sdk/es/utils/crypto.encodeContractAddress(owner, nonce) \u21d2 String Compute contract address Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - - Contract address rtype : (owner: String, nonce: Number) => String Param Type Description owner String Address of contract owner nonce Number Round when contract was created @aeternity/aepp-sdk/es/utils/crypto.generateKeyPairFromSecret(secret) \u21d2 Object Generate keyPair from secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - - Object with Private(privateKey) and Public(publicKey) keys rtype : (secret: Uint8Array) => KeyPair Param Type Description secret Uint8Array secret key @aeternity/aepp-sdk/es/utils/crypto.generateKeyPair(raw) \u21d2 Object Generate a random ED25519 keypair Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Key pair rtype : (raw: Boolean) => {publicKey: String, secretKey: String} | {publicKey: Buffer, secretKey: Buffer} Param Type Description raw Boolean Whether to return raw (binary) keys @aeternity/aepp-sdk/es/utils/crypto.encryptPublicKey(password, binaryKey) \u21d2 Uint8Array Encrypt given public key using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted key rtype : (password: String, binaryKey: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryKey Buffer Key to encrypt @aeternity/aepp-sdk/es/utils/crypto.encryptPrivateKey(password, binaryKey) \u21d2 Uint8Array Encrypt given private key using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted key rtype : (password: String, binaryKey: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryKey Buffer Key to encrypt @aeternity/aepp-sdk/es/utils/crypto.encryptKey(password, binaryData) \u21d2 Uint8Array Encrypt given data using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted data rtype : (password: String, binaryData: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryData Buffer Data to encrypt @aeternity/aepp-sdk/es/utils/crypto.decryptKey(password, encrypted) \u21d2 Buffer Decrypt given data using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted data rtype : (password: String, encrypted: String) => Uint8Array Param Type Description password String Password to decrypt with encrypted String Data to decrypt @aeternity/aepp-sdk/es/utils/crypto.sign(data, privateKey) \u21d2 Buffer | Uint8Array Generate signature Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer | Uint8Array - Signature rtype : (data: String|Buffer, privateKey: Buffer) => Buffer Param Type Description data String | Buffer Data to sign privateKey String | Buffer Key to sign with @aeternity/aepp-sdk/es/utils/crypto.verify(str, signature, publicKey) \u21d2 Boolean Verify that signature was signed by public key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - Valid? rtype : (str: String, signature: Buffer, publicKey: Buffer) => Boolean Param Type Description str String | Buffer Data to verify signature Buffer Signature to verify publicKey Buffer Key to verify against @aeternity/aepp-sdk/es/utils/crypto.prepareTx(signature, data) \u21d2 Transaction Prepare a transaction for posting to the blockchain Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Transaction - Transaction rtype : (signature: Buffer | String, data: Buffer) => Transaction Param Type Description signature Buffer Signature of data data Buffer Transaction data @aeternity/aepp-sdk/es/utils/crypto.aeEncodeKey(binaryKey) \u21d2 String \u00e6ternity readable public keys are the base58-encoded public key, prepended with 'ak_' Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Encoded key rtype : (binaryKey: Buffer) => String Param Type Description binaryKey Buffer Key to encode @aeternity/aepp-sdk/es/utils/crypto.generateSaveWallet(password) \u21d2 Object Generate a new key pair using generateKeyPair and encrypt it using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Encrypted key pair rtype : (password: String) => {publicKey: Uint8Array, secretKey: Uint8Array} Param Type Description password String Password to encrypt with @aeternity/aepp-sdk/es/utils/crypto.decryptPrivateKey(password) \u21d2 Buffer Decrypt an encrypted private key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted key rtype : (password: String, encrypted: Buffer) => Buffer Param Type Description password String Password to decrypt with @aeternity/aepp-sdk/es/utils/crypto.decryptPubKey(password) \u21d2 Buffer Decrypt an encrypted public key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted key rtype : (password: String, encrypted: Buffer) => Buffer Param Type Description password String Password to decrypt with @aeternity/aepp-sdk/es/utils/crypto.assertedType(data, type, omitError) \u21d2 String | Boolean Assert encoded type and return its payload Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String | Boolean - Payload rtype : (data: String, type: String) => String, throws: Error Param Type Description data String ae data type String Prefix omitError Boolean Return false instead of throwing the error if data doesn't match expected type @aeternity/aepp-sdk/es/utils/crypto.decodeTx(txHash) \u21d2 Buffer Decode a transaction Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decoded transaction rtype : (txHash: String) => Buffer Param Type Description txHash String Transaction hash @aeternity/aepp-sdk/es/utils/crypto.encodeTx(txData) \u21d2 String Encode a transaction Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Encoded transaction rtype : (txData: Transaction) => String Param Type Description txData Transaction Transaction to encode @aeternity/aepp-sdk/es/utils/crypto.isValidKeypair(privateKey, publicKey) \u21d2 Boolean Check key pair for validity Sign a message, and then verifying that signature Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - Valid? rtype : (privateKey: Buffer, publicKey: Buffer) => Boolean Param Type Description privateKey Buffer Private key to verify publicKey Buffer Public key to verify @aeternity/aepp-sdk/es/utils/crypto.envKeypair(env, [force]) \u21d2 Object Obtain key pair from env Designed to be used with env from nodejs. Assumes enviroment variables WALLET_PRIV and WALLET_PUB . Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Key pair rtype : (env: Object) => {publicKey: String, secretKey: String}, throws: Error Param Type Default Description env Object Environment [force] Boolean false Force throwing error @aeternity/aepp-sdk/es/utils/crypto.encryptData(msg, publicKey) \u21d2 Object This function encrypts a message using base58check encoded and 'ak' prefixed publicKey such that only the corresponding secretKey will be able to decrypt Kind : static method of @aeternity/aepp-sdk/es/utils/crypto rtype : (msg: String, publicKey: String) => Object Param Type Description msg Buffer Data to encode publicKey String Public key @aeternity/aepp-sdk/es/utils/crypto.decryptData(secretKey, encryptedData) \u21d2 Buffer | null This function decrypt a message using secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto rtype : (secretKey: String, encryptedData: Object) => Buffer|null Param Type Description secretKey String Secret key encryptedData Object Encrypted data @aeternity/aepp-sdk/es/utils/crypto~Transaction : Array Kind : inner typedef of @aeternity/aepp-sdk/es/utils/crypto rtype : Transaction: [tag: Buffer, version: Buffer, [signature: Buffer], data: Buffer]","title":"Crypto"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscrypto","text":"Crypto module Example import * as Crypto from '@aeternity/aepp-sdk/es/utils/crypto' @aeternity/aepp-sdk/es/utils/crypto static .decode \u21d2 Array .formatAddress(format, address) \u21d2 String .getAddressFromPriv(secret) \u21d2 String .isAddressValid(address, prefix) \u21d2 Boolean .addressToHex(base58CheckAddress) \u21d2 String .addressFromDecimal(decimalAddress) \u21d2 String .hash(input) \u21d2 Buffer .sha256hash(input) \u21d2 String .salt() \u21d2 Number .encodeBase64Check(input) \u21d2 Buffer .decodeBase64Check(str) \u21d2 Buffer .encodeBase58Check(input) \u21d2 String .decodeBase58Check(str) \u21d2 Buffer .hexStringToByte(str) \u21d2 Uint8Array .encodeUnsigned(value) \u21d2 Buffer .encodeContractAddress(owner, nonce) \u21d2 String .generateKeyPairFromSecret(secret) \u21d2 Object .generateKeyPair(raw) \u21d2 Object .encryptPublicKey(password, binaryKey) \u21d2 Uint8Array .encryptPrivateKey(password, binaryKey) \u21d2 Uint8Array .encryptKey(password, binaryData) \u21d2 Uint8Array .decryptKey(password, encrypted) \u21d2 Buffer .sign(data, privateKey) \u21d2 Buffer | Uint8Array .verify(str, signature, publicKey) \u21d2 Boolean .prepareTx(signature, data) \u21d2 Transaction .aeEncodeKey(binaryKey) \u21d2 String .generateSaveWallet(password) \u21d2 Object .decryptPrivateKey(password) \u21d2 Buffer .decryptPubKey(password) \u21d2 Buffer .assertedType(data, type, omitError) \u21d2 String | Boolean .decodeTx(txHash) \u21d2 Buffer .encodeTx(txData) \u21d2 String .isValidKeypair(privateKey, publicKey) \u21d2 Boolean .envKeypair(env, [force]) \u21d2 Object .encryptData(msg, publicKey) \u21d2 Object .decryptData(secretKey, encryptedData) \u21d2 Buffer | null inner ~Transaction : Array","title":"@aeternity/aepp-sdk/es/utils/crypto"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecode-array","text":"RLP decode Kind : static constant of @aeternity/aepp-sdk/es/utils/crypto Returns : Array - Array of Buffers containing the original message rtype : (data: Any) => Buffer[] Param Type Description data Buffer | String | Integer | Array Data to decode","title":"@aeternity/aepp-sdk/es/utils/crypto.decode \u21d2 Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoformataddressformat-address-string","text":"Format account address Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Formatted address rtype : (format: String, address: String) => tx: Promise[String] Param Type Description format String Format type address String Base58check account address","title":"@aeternity/aepp-sdk/es/utils/crypto.formatAddress(format, address) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptogetaddressfromprivsecret-string","text":"Generate address from secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Public key rtype : (secret: String) => tx: Promise[String] Param Type Description secret String Private key","title":"@aeternity/aepp-sdk/es/utils/crypto.getAddressFromPriv(secret) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoisaddressvalidaddress-prefix-boolean","text":"Check if address is valid Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - valid rtype : (input: String) => valid: Boolean Param Type Description address String Address prefix String Transaction prefix. Default: 'ak'","title":"@aeternity/aepp-sdk/es/utils/crypto.isAddressValid(address, prefix) \u21d2 Boolean"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoaddresstohexbase58checkaddress-string","text":"Convert base58Check address to hex string Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Hex string rtype : (base58CheckAddress: String) => hexAddress: String Param Type Description base58CheckAddress String Address","title":"@aeternity/aepp-sdk/es/utils/crypto.addressToHex(base58CheckAddress) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoaddressfromdecimaldecimaladdress-string","text":"Parse decimal address and return base58Check encoded address with prefix 'ak' Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - address rtype : (input: String) => address: String Param Type Description decimalAddress String Address","title":"@aeternity/aepp-sdk/es/utils/crypto.addressFromDecimal(decimalAddress) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptohashinput-buffer","text":"Calculate 256bits Blake2b hash of input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Hash rtype : (input: String) => hash: String Param Type Description input String | Buffer Data to hash","title":"@aeternity/aepp-sdk/es/utils/crypto.hash(input) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptosha256hashinput-string","text":"Calculate SHA256 hash of input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Hash rtype : (input: String) => hash: String Param Type Description input String Data to hash","title":"@aeternity/aepp-sdk/es/utils/crypto.sha256hash(input) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptosalt-number","text":"Generate a random salt (positive integer) Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Number - random salt rtype : () => salt: Number","title":"@aeternity/aepp-sdk/es/utils/crypto.salt() \u21d2 Number"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencodebase64checkinput-buffer","text":"Base64check encode given input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base64check encoded data rtype : (input: String|buffer) => Buffer Param Type Description input String Data to encode","title":"@aeternity/aepp-sdk/es/utils/crypto.encodeBase64Check(input) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecodebase64checkstr-buffer","text":"Base64check decode given str Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base64check decoded data rtype : (str: String) => Buffer Param Type Description str String Data to decode","title":"@aeternity/aepp-sdk/es/utils/crypto.decodeBase64Check(str) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencodebase58checkinput-string","text":"Base58 encode given input Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Base58 encoded data rtype : (input: String) => String Param Type Description input String | Buffer Data to encode","title":"@aeternity/aepp-sdk/es/utils/crypto.encodeBase58Check(input) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecodebase58checkstr-buffer","text":"Base58 decode given str Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Base58 decoded data rtype : (str: String) => Buffer Param Type Description str String Data to decode","title":"@aeternity/aepp-sdk/es/utils/crypto.decodeBase58Check(str) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptohexstringtobytestr-uint8array","text":"Conver hex string to Uint8Array Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - - converted data rtype : (str: String) => Uint8Array Param Type Description str String Data to conver","title":"@aeternity/aepp-sdk/es/utils/crypto.hexStringToByte(str) \u21d2 Uint8Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencodeunsignedvalue-buffer","text":"Converts a positive integer to the smallest possible representation in a binary digit representation Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - - Encoded data rtype : (value: Number) => Buffer Param Type Description value Number Value to encode","title":"@aeternity/aepp-sdk/es/utils/crypto.encodeUnsigned(value) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencodecontractaddressowner-nonce-string","text":"Compute contract address Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - - Contract address rtype : (owner: String, nonce: Number) => String Param Type Description owner String Address of contract owner nonce Number Round when contract was created","title":"@aeternity/aepp-sdk/es/utils/crypto.encodeContractAddress(owner, nonce) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptogeneratekeypairfromsecretsecret-object","text":"Generate keyPair from secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - - Object with Private(privateKey) and Public(publicKey) keys rtype : (secret: Uint8Array) => KeyPair Param Type Description secret Uint8Array secret key","title":"@aeternity/aepp-sdk/es/utils/crypto.generateKeyPairFromSecret(secret) \u21d2 Object"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptogeneratekeypairraw-object","text":"Generate a random ED25519 keypair Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Key pair rtype : (raw: Boolean) => {publicKey: String, secretKey: String} | {publicKey: Buffer, secretKey: Buffer} Param Type Description raw Boolean Whether to return raw (binary) keys","title":"@aeternity/aepp-sdk/es/utils/crypto.generateKeyPair(raw) \u21d2 Object"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencryptpublickeypassword-binarykey-uint8array","text":"Encrypt given public key using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted key rtype : (password: String, binaryKey: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryKey Buffer Key to encrypt","title":"@aeternity/aepp-sdk/es/utils/crypto.encryptPublicKey(password, binaryKey) \u21d2 Uint8Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencryptprivatekeypassword-binarykey-uint8array","text":"Encrypt given private key using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted key rtype : (password: String, binaryKey: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryKey Buffer Key to encrypt","title":"@aeternity/aepp-sdk/es/utils/crypto.encryptPrivateKey(password, binaryKey) \u21d2 Uint8Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencryptkeypassword-binarydata-uint8array","text":"Encrypt given data using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Uint8Array - Encrypted data rtype : (password: String, binaryData: Buffer) => Uint8Array Param Type Description password String Password to encrypt with binaryData Buffer Data to encrypt","title":"@aeternity/aepp-sdk/es/utils/crypto.encryptKey(password, binaryData) \u21d2 Uint8Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecryptkeypassword-encrypted-buffer","text":"Decrypt given data using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted data rtype : (password: String, encrypted: String) => Uint8Array Param Type Description password String Password to decrypt with encrypted String Data to decrypt","title":"@aeternity/aepp-sdk/es/utils/crypto.decryptKey(password, encrypted) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptosigndata-privatekey-buffer-uint8array","text":"Generate signature Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer | Uint8Array - Signature rtype : (data: String|Buffer, privateKey: Buffer) => Buffer Param Type Description data String | Buffer Data to sign privateKey String | Buffer Key to sign with","title":"@aeternity/aepp-sdk/es/utils/crypto.sign(data, privateKey) \u21d2 Buffer | Uint8Array"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoverifystr-signature-publickey-boolean","text":"Verify that signature was signed by public key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - Valid? rtype : (str: String, signature: Buffer, publicKey: Buffer) => Boolean Param Type Description str String | Buffer Data to verify signature Buffer Signature to verify publicKey Buffer Key to verify against","title":"@aeternity/aepp-sdk/es/utils/crypto.verify(str, signature, publicKey) \u21d2 Boolean"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptopreparetxsignature-data-transaction","text":"Prepare a transaction for posting to the blockchain Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Transaction - Transaction rtype : (signature: Buffer | String, data: Buffer) => Transaction Param Type Description signature Buffer Signature of data data Buffer Transaction data","title":"@aeternity/aepp-sdk/es/utils/crypto.prepareTx(signature, data) \u21d2 Transaction"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoaeencodekeybinarykey-string","text":"\u00e6ternity readable public keys are the base58-encoded public key, prepended with 'ak_' Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Encoded key rtype : (binaryKey: Buffer) => String Param Type Description binaryKey Buffer Key to encode","title":"@aeternity/aepp-sdk/es/utils/crypto.aeEncodeKey(binaryKey) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptogeneratesavewalletpassword-object","text":"Generate a new key pair using generateKeyPair and encrypt it using password Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Encrypted key pair rtype : (password: String) => {publicKey: Uint8Array, secretKey: Uint8Array} Param Type Description password String Password to encrypt with","title":"@aeternity/aepp-sdk/es/utils/crypto.generateSaveWallet(password) \u21d2 Object"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecryptprivatekeypassword-buffer","text":"Decrypt an encrypted private key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted key rtype : (password: String, encrypted: Buffer) => Buffer Param Type Description password String Password to decrypt with","title":"@aeternity/aepp-sdk/es/utils/crypto.decryptPrivateKey(password) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecryptpubkeypassword-buffer","text":"Decrypt an encrypted public key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decrypted key rtype : (password: String, encrypted: Buffer) => Buffer Param Type Description password String Password to decrypt with","title":"@aeternity/aepp-sdk/es/utils/crypto.decryptPubKey(password) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoassertedtypedata-type-omiterror-string-boolean","text":"Assert encoded type and return its payload Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String | Boolean - Payload rtype : (data: String, type: String) => String, throws: Error Param Type Description data String ae data type String Prefix omitError Boolean Return false instead of throwing the error if data doesn't match expected type","title":"@aeternity/aepp-sdk/es/utils/crypto.assertedType(data, type, omitError) \u21d2 String | Boolean"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecodetxtxhash-buffer","text":"Decode a transaction Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Buffer - Decoded transaction rtype : (txHash: String) => Buffer Param Type Description txHash String Transaction hash","title":"@aeternity/aepp-sdk/es/utils/crypto.decodeTx(txHash) \u21d2 Buffer"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencodetxtxdata-string","text":"Encode a transaction Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : String - Encoded transaction rtype : (txData: Transaction) => String Param Type Description txData Transaction Transaction to encode","title":"@aeternity/aepp-sdk/es/utils/crypto.encodeTx(txData) \u21d2 String"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoisvalidkeypairprivatekey-publickey-boolean","text":"Check key pair for validity Sign a message, and then verifying that signature Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Boolean - Valid? rtype : (privateKey: Buffer, publicKey: Buffer) => Boolean Param Type Description privateKey Buffer Private key to verify publicKey Buffer Public key to verify","title":"@aeternity/aepp-sdk/es/utils/crypto.isValidKeypair(privateKey, publicKey) \u21d2 Boolean"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoenvkeypairenv-force-object","text":"Obtain key pair from env Designed to be used with env from nodejs. Assumes enviroment variables WALLET_PRIV and WALLET_PUB . Kind : static method of @aeternity/aepp-sdk/es/utils/crypto Returns : Object - Key pair rtype : (env: Object) => {publicKey: String, secretKey: String}, throws: Error Param Type Default Description env Object Environment [force] Boolean false Force throwing error","title":"@aeternity/aepp-sdk/es/utils/crypto.envKeypair(env, [force]) \u21d2 Object"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptoencryptdatamsg-publickey-object","text":"This function encrypts a message using base58check encoded and 'ak' prefixed publicKey such that only the corresponding secretKey will be able to decrypt Kind : static method of @aeternity/aepp-sdk/es/utils/crypto rtype : (msg: String, publicKey: String) => Object Param Type Description msg Buffer Data to encode publicKey String Public key","title":"@aeternity/aepp-sdk/es/utils/crypto.encryptData(msg, publicKey) \u21d2 Object"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptodecryptdatasecretkey-encrypteddata-buffer-null","text":"This function decrypt a message using secret key Kind : static method of @aeternity/aepp-sdk/es/utils/crypto rtype : (secretKey: String, encryptedData: Object) => Buffer|null Param Type Description secretKey String Secret key encryptedData Object Encrypted data","title":"@aeternity/aepp-sdk/es/utils/crypto.decryptData(secretKey, encryptedData) \u21d2 Buffer | null"},{"location":"api/utils/crypto/#aeternityaepp-sdkesutilscryptotransaction-array","text":"Kind : inner typedef of @aeternity/aepp-sdk/es/utils/crypto rtype : Transaction: [tag: Buffer, version: Buffer, [signature: Buffer], data: Buffer]","title":"@aeternity/aepp-sdk/es/utils/crypto~Transaction : Array"},{"location":"api/utils/keystore/","text":"@aeternity/aepp-sdk/es/utils/keystore KeyStore module Example import * as Keystore from '@aeternity/aepp-sdk/es/utils/keystore' Example const { Keystore } = require('@aeternity/aepp-sdk') @aeternity/aepp-sdk/es/utils/keystore static .recover(password, keyObject) \u21d2 Buffer .dump(name, password, privateKey, nonce, salt, [options]) \u21d2 Object inner ~str2buf(str, [enc]) \u21d2 buffer ~encrypt(plaintext, key, nonce, [algo]) \u21d2 buffer ~decrypt(ciphertext, key, nonce, [algo]) \u21d2 buffer ~deriveKey(password, nonce, [options]) \u21d2 buffer ~marshal(name, derivedKey, privateKey, nonce, salt, [options]) \u21d2 Object @aeternity/aepp-sdk/es/utils/keystore.recover(password, keyObject) \u21d2 Buffer Recover plaintext private key from secret-storage key object. Kind : static method of @aeternity/aepp-sdk/es/utils/keystore Returns : Buffer - Plaintext private key. Param Type Description password String Keystore object password. keyObject Object Keystore object. @aeternity/aepp-sdk/es/utils/keystore.dump(name, password, privateKey, nonce, salt, [options]) \u21d2 Object Export private key to keystore secret-storage format. Kind : static method of @aeternity/aepp-sdk/es/utils/keystore Param Type Description name String Key name. password String User-supplied password. privateKey String Private key. nonce Buffer Randomly generated 24byte nonce. salt Buffer Randomly generated 16byte salt. [options] Object Encryption parameters. [options.kdf] String Key derivation function (default: pbkdf2). [options.cipher] String Symmetric cipher (default: constants.cipher). [options.kdfparams] Object KDF parameters (default: constants. ). @aeternity/aepp-sdk/es/utils/keystore~str2buf(str, [enc]) \u21d2 buffer Convert a string to a Buffer. If encoding is not specified, hex-encoding will be used if the input is valid hex. If the input is valid base64 but not valid hex, base64 will be used. Otherwise, utf8 will be used. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Buffer (bytearray) containing the input data. Param Type Description str string String to be converted. [enc] string Encoding of the input string (optional). @aeternity/aepp-sdk/es/utils/keystore~encrypt(plaintext, key, nonce, [algo]) \u21d2 buffer Symmetric private key encryption using secret (derived) key. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Encrypted data. Param Type Description plaintext buffer | string Data to be encrypted. key buffer | string Secret key. nonce buffer | string Randomly generated nonce. [algo] string Encryption algorithm (default: DEFAULTS.crypto.symmetric_alg). @aeternity/aepp-sdk/es/utils/keystore~decrypt(ciphertext, key, nonce, [algo]) \u21d2 buffer Symmetric private key decryption using secret (derived) key. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Decrypted data. Param Type Description ciphertext buffer | Uint8Array Data to be decrypted. key buffer | Uint8Array Secret key. nonce buffer | Uint8Array Nonce from key-object. [algo] string Encryption algorithm. @aeternity/aepp-sdk/es/utils/keystore~deriveKey(password, nonce, [options]) \u21d2 buffer Derive secret key from password with key derivation function. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Secret key derived from password. Param Type Description password string User-supplied password. nonce buffer | Uint8Array Randomly generated nonce. [options] Object Encryption parameters. [options.kdf] string Key derivation function (default: DEFAULTS.crypto.kdf). [options.kdf_params] Object KDF parameters (default: DEFAULTS.crypto.kdf_params). @aeternity/aepp-sdk/es/utils/keystore~marshal(name, derivedKey, privateKey, nonce, salt, [options]) \u21d2 Object Assemble key data object in secret-storage format. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Param Type Description name buffer Key name. derivedKey buffer Password-derived secret key. privateKey buffer Private key. nonce buffer Randomly generated 24byte nonce. salt buffer Randomly generated 16byte salt. [options] Object Encryption parameters. [options.kdf] string Key derivation function (default: argon2id). [options.cipher] string Symmetric cipher (default: constants.cipher). [options.kdf_params] Object KDF parameters (default: constants. ).","title":"Keystore"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystore","text":"KeyStore module Example import * as Keystore from '@aeternity/aepp-sdk/es/utils/keystore' Example const { Keystore } = require('@aeternity/aepp-sdk') @aeternity/aepp-sdk/es/utils/keystore static .recover(password, keyObject) \u21d2 Buffer .dump(name, password, privateKey, nonce, salt, [options]) \u21d2 Object inner ~str2buf(str, [enc]) \u21d2 buffer ~encrypt(plaintext, key, nonce, [algo]) \u21d2 buffer ~decrypt(ciphertext, key, nonce, [algo]) \u21d2 buffer ~deriveKey(password, nonce, [options]) \u21d2 buffer ~marshal(name, derivedKey, privateKey, nonce, salt, [options]) \u21d2 Object","title":"@aeternity/aepp-sdk/es/utils/keystore"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystorerecoverpassword-keyobject-buffer","text":"Recover plaintext private key from secret-storage key object. Kind : static method of @aeternity/aepp-sdk/es/utils/keystore Returns : Buffer - Plaintext private key. Param Type Description password String Keystore object password. keyObject Object Keystore object.","title":"@aeternity/aepp-sdk/es/utils/keystore.recover(password, keyObject) \u21d2 Buffer"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystoredumpname-password-privatekey-nonce-salt-options-object","text":"Export private key to keystore secret-storage format. Kind : static method of @aeternity/aepp-sdk/es/utils/keystore Param Type Description name String Key name. password String User-supplied password. privateKey String Private key. nonce Buffer Randomly generated 24byte nonce. salt Buffer Randomly generated 16byte salt. [options] Object Encryption parameters. [options.kdf] String Key derivation function (default: pbkdf2). [options.cipher] String Symmetric cipher (default: constants.cipher). [options.kdfparams] Object KDF parameters (default: constants. ).","title":"@aeternity/aepp-sdk/es/utils/keystore.dump(name, password, privateKey, nonce, salt, [options]) \u21d2 Object"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystorestr2bufstr-enc-buffer","text":"Convert a string to a Buffer. If encoding is not specified, hex-encoding will be used if the input is valid hex. If the input is valid base64 but not valid hex, base64 will be used. Otherwise, utf8 will be used. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Buffer (bytearray) containing the input data. Param Type Description str string String to be converted. [enc] string Encoding of the input string (optional).","title":"@aeternity/aepp-sdk/es/utils/keystore~str2buf(str, [enc]) \u21d2 buffer"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystoreencryptplaintext-key-nonce-algo-buffer","text":"Symmetric private key encryption using secret (derived) key. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Encrypted data. Param Type Description plaintext buffer | string Data to be encrypted. key buffer | string Secret key. nonce buffer | string Randomly generated nonce. [algo] string Encryption algorithm (default: DEFAULTS.crypto.symmetric_alg).","title":"@aeternity/aepp-sdk/es/utils/keystore~encrypt(plaintext, key, nonce, [algo]) \u21d2 buffer"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystoredecryptciphertext-key-nonce-algo-buffer","text":"Symmetric private key decryption using secret (derived) key. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Decrypted data. Param Type Description ciphertext buffer | Uint8Array Data to be decrypted. key buffer | Uint8Array Secret key. nonce buffer | Uint8Array Nonce from key-object. [algo] string Encryption algorithm.","title":"@aeternity/aepp-sdk/es/utils/keystore~decrypt(ciphertext, key, nonce, [algo]) \u21d2 buffer"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystorederivekeypassword-nonce-options-buffer","text":"Derive secret key from password with key derivation function. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Returns : buffer - Secret key derived from password. Param Type Description password string User-supplied password. nonce buffer | Uint8Array Randomly generated nonce. [options] Object Encryption parameters. [options.kdf] string Key derivation function (default: DEFAULTS.crypto.kdf). [options.kdf_params] Object KDF parameters (default: DEFAULTS.crypto.kdf_params).","title":"@aeternity/aepp-sdk/es/utils/keystore~deriveKey(password, nonce, [options]) \u21d2 buffer"},{"location":"api/utils/keystore/#aeternityaepp-sdkesutilskeystoremarshalname-derivedkey-privatekey-nonce-salt-options-object","text":"Assemble key data object in secret-storage format. Kind : inner method of @aeternity/aepp-sdk/es/utils/keystore Param Type Description name buffer Key name. derivedKey buffer Password-derived secret key. privateKey buffer Private key. nonce buffer Randomly generated 24byte nonce. salt buffer Randomly generated 16byte salt. [options] Object Encryption parameters. [options.kdf] string Key derivation function (default: argon2id). [options.cipher] string Symmetric cipher (default: constants.cipher). [options.kdf_params] Object KDF parameters (default: constants. ).","title":"@aeternity/aepp-sdk/es/utils/keystore~marshal(name, derivedKey, privateKey, nonce, salt, [options]) \u21d2 Object"},{"location":"api/utils/swagger/","text":"@aeternity/aepp-sdk/es/utils/swagger Swagger module Example import Swagger from '@aeternity/aepp-sdk/es/utils/swagger' @aeternity/aepp-sdk/es/utils/swagger Swagger(options) \u21d2 Object \u23cf static .expandPath(s) \u21d2 String .conform(value, spec, types) \u21d2 Object .traverseKeys(fn, o) \u21d2 Object .snakizeKeys(o) \u21d2 Object .pascalizeKeys(o) \u21d2 Object .assertOne(coll) \u21d2 Object .operation(path, method, definition, types) \u21d2 function .debugSwagger(bool) \u21d2 Stamp inner ~conformTypes ~lookupType(path, spec, types) \u21d2 Object ~extendingErrorPath(key, fn) \u21d2 Any ~TypeError(msg, spec, value) \u21d2 Error ~conformDispatch(spec) \u21d2 String ~classifyParameters(parameters) \u21d2 Array.&lt;Object&gt; ~pascalizeParameters(parameters) \u21d2 Array.&lt;Object&gt; ~operationSignature(name, req, opts) \u21d2 String ~destructureClientError(error) \u21d2 String ~resolveRef(ref, swag) \u21d2 Object Swagger(options) \u21d2 Object \u23cf Swagger Stamp Kind : Exported function Returns : Object - Account instance rtype : Stamp Param Type Description options Object Initializer object options.swag Object Swagger definition options.axiosConfig Object Object with axios configuration. Example { config: {}, errorHandler: (err) => throw err } Example Swagger({swag}) Swagger.expandPath(s) \u21d2 String Perform path string interpolation Kind : static method of Swagger Returns : String - Converted string rtype : (path: String, replacements: Object) => String Param Type Description s String String to convert Swagger.conform(value, spec, types) \u21d2 Object Conform value against its spec Kind : static method of Swagger Returns : Object - Conformed value rtype : (value: Any, spec: Object, types: Object) => Any, throws: Error Param Type Description value Object Value to conform (validate and transform) spec Object Specification object types Object Types specification Swagger.traverseKeys(fn, o) \u21d2 Object Key traversal metafunction Kind : static method of Swagger Returns : Object - Transformed object rtype : (fn: (s: String) => String) => (o: Object) => Object Param Type Description fn function Key transformation function o Object Object to traverse Swagger.snakizeKeys(o) \u21d2 Object snake_case key traversal Kind : static method of Swagger Returns : Object - Transformed object rtype : (o: Object) => Object See : pascalToSnake Param Type Description o Object Object to traverse Swagger.pascalizeKeys(o) \u21d2 Object PascalCase key traversal Kind : static method of Swagger Returns : Object - Transformed object rtype : (o: Object) => Object See : snakeToPascal Param Type Description o Object Object to traverse Swagger.assertOne(coll) \u21d2 Object Assert that coll is a sequence with a length of 1 and extract the only element Kind : static method of Swagger rtype : (coll: [...Any]) => Any, throws: Error Param Type coll Array.&lt;Object&gt; Swagger.operation(path, method, definition, types) \u21d2 function Generate callable operation Kind : static method of Swagger rtype : (path: String, method: String, definition: Object, types: Object) => (instance: Swagger, url: String) => Promise[Any], throws: Error Param Type Description path String Path to call in URL method String HTTP method definition Object Complex definition types Object Swagger types Swagger.debugSwagger(bool) \u21d2 Stamp Reconfigure Swagger to (not) spill debugging logs Kind : static method of Swagger Returns : Stamp - Reconfigured Swagger Stamp rtype : (bool: Boolean) => Stamp Param Type Description bool boolean Whether to debug Swagger~conformTypes Per-type conform dispatcher Kind : inner constant of Swagger rtype : [(dispatch(value: String, spec: Object, types: Object) => Any, throws: Error)...] Swagger~lookupType(path, spec, types) \u21d2 Object Lookup type Kind : inner method of Swagger Returns : Object - Looked up type definition rtype : (path: [String...], spec: Object, types: Object) => Object Param Type Description path Array.&lt;String&gt; Path to look up spec Object types Object Swagger~extendingErrorPath(key, fn) \u21d2 Any Intercept errors thrown by fn() , extending them with information from key Kind : inner method of Swagger Returns : Any - Execution result rtype : (key: String, fn: Function) => Any Param Type Description key String Information to attach fn function Thunk Swagger~TypeError(msg, spec, value) \u21d2 Error Construct Error with additional type information (not thrown) Kind : inner method of Swagger Returns : Error - Enhanced Error rtype : (msg: String, spec: String, value: String) => Error Param Type Description msg String Error message spec String value String Swagger~conformDispatch(spec) \u21d2 String conform dispatcher Kind : inner method of Swagger Returns : String - Value to dispatch on rtype : (spec: Object) => String, throws: Error Param Type spec Object Swagger~classifyParameters(parameters) \u21d2 Array.&lt;Object&gt; Classify given parameters Kind : inner method of Swagger Returns : Array.&lt;Object&gt; - Classified parameters rtype : (parameters: [{required: Boolean, in: String}...]) => {pathArgs: [...Object], queryArgs: [...Object], bodyArgs: [...Object], req: [...Object], opts: [...Object]} Param Type Description parameters Array.&lt;Object&gt; Parameters to classify Swagger~pascalizeParameters(parameters) \u21d2 Array.&lt;Object&gt; Convert name attributes in parameters from snake_case to PascalCase Kind : inner method of Swagger Returns : Array.&lt;Object&gt; - Pascalized parameters rtype : (parameters: [{name: String}...]) => [{name: String}...] Param Type Description parameters Array.&lt;Object&gt; Parameters to pascalize Swagger~operationSignature(name, req, opts) \u21d2 String Obtain readable signature for operation Kind : inner method of Swagger Returns : String - Signature rtype : (name: String, req: [...Object], opts: [...Object]) => Object Param Type Description name String Name of operation req Array.&lt;Object&gt; Required parameters to operation opts Array.&lt;Object&gt; Optional parameters to operation Swagger~destructureClientError(error) \u21d2 String Destructure HTTP client error Kind : inner method of Swagger rtype : (error: Error) => String Param Type error Error Swagger~resolveRef(ref, swag) \u21d2 Object Resolve reference Kind : inner method of Swagger Returns : Object - Resolved reference definition rtype : (ref: String, swag: Object) => Object Param Type Description ref String Reference to resolve swag Object","title":"Swagger"},{"location":"api/utils/swagger/#aeternityaepp-sdkesutilsswagger","text":"Swagger module Example import Swagger from '@aeternity/aepp-sdk/es/utils/swagger' @aeternity/aepp-sdk/es/utils/swagger Swagger(options) \u21d2 Object \u23cf static .expandPath(s) \u21d2 String .conform(value, spec, types) \u21d2 Object .traverseKeys(fn, o) \u21d2 Object .snakizeKeys(o) \u21d2 Object .pascalizeKeys(o) \u21d2 Object .assertOne(coll) \u21d2 Object .operation(path, method, definition, types) \u21d2 function .debugSwagger(bool) \u21d2 Stamp inner ~conformTypes ~lookupType(path, spec, types) \u21d2 Object ~extendingErrorPath(key, fn) \u21d2 Any ~TypeError(msg, spec, value) \u21d2 Error ~conformDispatch(spec) \u21d2 String ~classifyParameters(parameters) \u21d2 Array.&lt;Object&gt; ~pascalizeParameters(parameters) \u21d2 Array.&lt;Object&gt; ~operationSignature(name, req, opts) \u21d2 String ~destructureClientError(error) \u21d2 String ~resolveRef(ref, swag) \u21d2 Object","title":"@aeternity/aepp-sdk/es/utils/swagger"},{"location":"api/utils/swagger/#swaggeroptions-object","text":"Swagger Stamp Kind : Exported function Returns : Object - Account instance rtype : Stamp Param Type Description options Object Initializer object options.swag Object Swagger definition options.axiosConfig Object Object with axios configuration. Example { config: {}, errorHandler: (err) => throw err } Example Swagger({swag})","title":"Swagger(options) \u21d2 Object \u23cf"},{"location":"api/utils/swagger/#swaggerexpandpaths-string","text":"Perform path string interpolation Kind : static method of Swagger Returns : String - Converted string rtype : (path: String, replacements: Object) => String Param Type Description s String String to convert","title":"Swagger.expandPath(s) \u21d2 String"},{"location":"api/utils/swagger/#swaggerconformvalue-spec-types-object","text":"Conform value against its spec Kind : static method of Swagger Returns : Object - Conformed value rtype : (value: Any, spec: Object, types: Object) => Any, throws: Error Param Type Description value Object Value to conform (validate and transform) spec Object Specification object types Object Types specification","title":"Swagger.conform(value, spec, types) \u21d2 Object"},{"location":"api/utils/swagger/#swaggertraversekeysfn-o-object","text":"Key traversal metafunction Kind : static method of Swagger Returns : Object - Transformed object rtype : (fn: (s: String) => String) => (o: Object) => Object Param Type Description fn function Key transformation function o Object Object to traverse","title":"Swagger.traverseKeys(fn, o) \u21d2 Object"},{"location":"api/utils/swagger/#swaggersnakizekeyso-object","text":"snake_case key traversal Kind : static method of Swagger Returns : Object - Transformed object rtype : (o: Object) => Object See : pascalToSnake Param Type Description o Object Object to traverse","title":"Swagger.snakizeKeys(o) \u21d2 Object"},{"location":"api/utils/swagger/#swaggerpascalizekeyso-object","text":"PascalCase key traversal Kind : static method of Swagger Returns : Object - Transformed object rtype : (o: Object) => Object See : snakeToPascal Param Type Description o Object Object to traverse","title":"Swagger.pascalizeKeys(o) \u21d2 Object"},{"location":"api/utils/swagger/#swaggerassertonecoll-object","text":"Assert that coll is a sequence with a length of 1 and extract the only element Kind : static method of Swagger rtype : (coll: [...Any]) => Any, throws: Error Param Type coll Array.&lt;Object&gt;","title":"Swagger.assertOne(coll) \u21d2 Object"},{"location":"api/utils/swagger/#swaggeroperationpath-method-definition-types-function","text":"Generate callable operation Kind : static method of Swagger rtype : (path: String, method: String, definition: Object, types: Object) => (instance: Swagger, url: String) => Promise[Any], throws: Error Param Type Description path String Path to call in URL method String HTTP method definition Object Complex definition types Object Swagger types","title":"Swagger.operation(path, method, definition, types) \u21d2 function"},{"location":"api/utils/swagger/#swaggerdebugswaggerbool-stamp","text":"Reconfigure Swagger to (not) spill debugging logs Kind : static method of Swagger Returns : Stamp - Reconfigured Swagger Stamp rtype : (bool: Boolean) => Stamp Param Type Description bool boolean Whether to debug","title":"Swagger.debugSwagger(bool) \u21d2 Stamp"},{"location":"api/utils/swagger/#swaggerconformtypes","text":"Per-type conform dispatcher Kind : inner constant of Swagger rtype : [(dispatch(value: String, spec: Object, types: Object) => Any, throws: Error)...]","title":"Swagger~conformTypes"},{"location":"api/utils/swagger/#swaggerlookuptypepath-spec-types-object","text":"Lookup type Kind : inner method of Swagger Returns : Object - Looked up type definition rtype : (path: [String...], spec: Object, types: Object) => Object Param Type Description path Array.&lt;String&gt; Path to look up spec Object types Object","title":"Swagger~lookupType(path, spec, types) \u21d2 Object"},{"location":"api/utils/swagger/#swaggerextendingerrorpathkey-fn-any","text":"Intercept errors thrown by fn() , extending them with information from key Kind : inner method of Swagger Returns : Any - Execution result rtype : (key: String, fn: Function) => Any Param Type Description key String Information to attach fn function Thunk","title":"Swagger~extendingErrorPath(key, fn) \u21d2 Any"},{"location":"api/utils/swagger/#swaggertypeerrormsg-spec-value-error","text":"Construct Error with additional type information (not thrown) Kind : inner method of Swagger Returns : Error - Enhanced Error rtype : (msg: String, spec: String, value: String) => Error Param Type Description msg String Error message spec String value String","title":"Swagger~TypeError(msg, spec, value) \u21d2 Error"},{"location":"api/utils/swagger/#swaggerconformdispatchspec-string","text":"conform dispatcher Kind : inner method of Swagger Returns : String - Value to dispatch on rtype : (spec: Object) => String, throws: Error Param Type spec Object","title":"Swagger~conformDispatch(spec) \u21d2 String"},{"location":"api/utils/swagger/#swaggerclassifyparametersparameters-arrayltobjectgt","text":"Classify given parameters Kind : inner method of Swagger Returns : Array.&lt;Object&gt; - Classified parameters rtype : (parameters: [{required: Boolean, in: String}...]) => {pathArgs: [...Object], queryArgs: [...Object], bodyArgs: [...Object], req: [...Object], opts: [...Object]} Param Type Description parameters Array.&lt;Object&gt; Parameters to classify","title":"Swagger~classifyParameters(parameters) \u21d2 Array.&amp;lt;Object&amp;gt;"},{"location":"api/utils/swagger/#swaggerpascalizeparametersparameters-arrayltobjectgt","text":"Convert name attributes in parameters from snake_case to PascalCase Kind : inner method of Swagger Returns : Array.&lt;Object&gt; - Pascalized parameters rtype : (parameters: [{name: String}...]) => [{name: String}...] Param Type Description parameters Array.&lt;Object&gt; Parameters to pascalize","title":"Swagger~pascalizeParameters(parameters) \u21d2 Array.&amp;lt;Object&amp;gt;"},{"location":"api/utils/swagger/#swaggeroperationsignaturename-req-opts-string","text":"Obtain readable signature for operation Kind : inner method of Swagger Returns : String - Signature rtype : (name: String, req: [...Object], opts: [...Object]) => Object Param Type Description name String Name of operation req Array.&lt;Object&gt; Required parameters to operation opts Array.&lt;Object&gt; Optional parameters to operation","title":"Swagger~operationSignature(name, req, opts) \u21d2 String"},{"location":"api/utils/swagger/#swaggerdestructureclienterrorerror-string","text":"Destructure HTTP client error Kind : inner method of Swagger rtype : (error: Error) => String Param Type error Error","title":"Swagger~destructureClientError(error) \u21d2 String"},{"location":"api/utils/swagger/#swaggerresolverefref-swag-object","text":"Resolve reference Kind : inner method of Swagger Returns : Object - Resolved reference definition rtype : (ref: String, swag: Object) => Object Param Type Description ref String Reference to resolve swag Object","title":"Swagger~resolveRef(ref, swag) \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/connection/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection Wallet Connection base module Example import WalletConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection exports.WalletConnection([options]) \u21d2 Object \u23cf .connect(onMessage) \u21d2 void .disconnect() \u21d2 void .sendMessage(msg) \u21d2 void .isConnected() \u21d2 Boolean exports.WalletConnection([options]) \u21d2 Object \u23cf Basic Wallet Connection This stamp include interface for wallet connection functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - WalletConnection instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object exports.WalletConnection.connect(onMessage) \u21d2 void Connect Kind : instance abstract method of exports.WalletConnection rtype : (onMessage: Function) => void Param Type Description onMessage function Message handler exports.WalletConnection.disconnect() \u21d2 void Disconnect Kind : instance abstract method of exports.WalletConnection rtype : () => void exports.WalletConnection.sendMessage(msg) \u21d2 void Send message Kind : instance abstract method of exports.WalletConnection rtype : (msg: Object) => void Param Type Description msg Object Message exports.WalletConnection.isConnected() \u21d2 Boolean Check if connected Kind : instance abstract method of exports.WalletConnection Returns : Boolean - Is connected rtype : () => Boolean","title":"Setup"},{"location":"api/utils/aepp-wallet-communication/connection/#aeternityaepp-sdkesutilsaepp-wallet-communicationconnection","text":"Wallet Connection base module Example import WalletConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection exports.WalletConnection([options]) \u21d2 Object \u23cf .connect(onMessage) \u21d2 void .disconnect() \u21d2 void .sendMessage(msg) \u21d2 void .isConnected() \u21d2 Boolean","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection"},{"location":"api/utils/aepp-wallet-communication/connection/#exportswalletconnectionoptions-object","text":"Basic Wallet Connection This stamp include interface for wallet connection functionality. Attempting to create instances from the Stamp without overwriting all abstract methods using composition will result in an exception. Kind : Exported function Returns : Object - WalletConnection instance rtype : Stamp Param Type Default Description [options] Object {} Initializer object","title":"exports.WalletConnection([options]) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/connection/#exportswalletconnectionconnectonmessage-void","text":"Connect Kind : instance abstract method of exports.WalletConnection rtype : (onMessage: Function) => void Param Type Description onMessage function Message handler","title":"exports.WalletConnection.connect(onMessage) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/connection/#exportswalletconnectiondisconnect-void","text":"Disconnect Kind : instance abstract method of exports.WalletConnection rtype : () => void","title":"exports.WalletConnection.disconnect() \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/connection/#exportswalletconnectionsendmessagemsg-void","text":"Send message Kind : instance abstract method of exports.WalletConnection rtype : (msg: Object) => void Param Type Description msg Object Message","title":"exports.WalletConnection.sendMessage(msg) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/connection/#exportswalletconnectionisconnected-boolean","text":"Check if connected Kind : instance abstract method of exports.WalletConnection Returns : Boolean - Is connected rtype : () => Boolean","title":"exports.WalletConnection.isConnected() \u21d2 Boolean"},{"location":"api/utils/aepp-wallet-communication/content-script-bridge/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge Content Script Bridge module Example import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/wallet-communication/content-script-bridge @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge exports.ContentScriptBridge(params) \u21d2 ContentScriptBridge \u23cf .run() \u21d2 void .stop() \u21d2 void exports.ContentScriptBridge(params) \u21d2 ContentScriptBridge \u23cf ContentScriptBridge stamp Provide functionality to easly redirect messages from page to extension and from extension to page through content script Using Runtime(Extension) and WindowPostMessage(Web-Page) connections Kind : Exported function rtype : Stamp Param Type Description params Object Initializer object params.pageConnection Object Page connection object(@link module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message) params.extConnection Object Extension connection object(module: @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime) exports.ContentScriptBridge.run() \u21d2 void Start message proxy Kind : instance method of exports.ContentScriptBridge exports.ContentScriptBridge.stop() \u21d2 void Stop message proxy Kind : instance method of exports.ContentScriptBridge","title":"Content script bridge"},{"location":"api/utils/aepp-wallet-communication/content-script-bridge/#aeternityaepp-sdkesutilsaepp-wallet-communicationcontent-script-bridge","text":"Content Script Bridge module Example import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/wallet-communication/content-script-bridge @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge exports.ContentScriptBridge(params) \u21d2 ContentScriptBridge \u23cf .run() \u21d2 void .stop() \u21d2 void","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge"},{"location":"api/utils/aepp-wallet-communication/content-script-bridge/#exportscontentscriptbridgeparams-contentscriptbridge","text":"ContentScriptBridge stamp Provide functionality to easly redirect messages from page to extension and from extension to page through content script Using Runtime(Extension) and WindowPostMessage(Web-Page) connections Kind : Exported function rtype : Stamp Param Type Description params Object Initializer object params.pageConnection Object Page connection object(@link module:@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message) params.extConnection Object Extension connection object(module: @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime)","title":"exports.ContentScriptBridge(params) \u21d2 ContentScriptBridge \u23cf"},{"location":"api/utils/aepp-wallet-communication/content-script-bridge/#exportscontentscriptbridgerun-void","text":"Start message proxy Kind : instance method of exports.ContentScriptBridge","title":"exports.ContentScriptBridge.run() \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/content-script-bridge/#exportscontentscriptbridgestop-void","text":"Stop message proxy Kind : instance method of exports.ContentScriptBridge","title":"exports.ContentScriptBridge.stop() \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector Wallet Detector This is the complement to module:@aeternity/aepp-sdk/es/utils . Example import WalletDetector from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector exports.WalletDetector(params) \u21d2 WalletDetector \u23cf .scan(onDetected) \u21d2 void .stopScan() \u21d2 void .getWallets() \u21d2 Array exports.WalletDetector(params) \u21d2 WalletDetector \u23cf WalletDetector stamp Kind : Exported function rtype : Stamp Param Type Default Description params Object {} Initializer object params.connection WalletConnection Connection for listening for wallets exports.WalletDetector.scan(onDetected) \u21d2 void Start scanning Kind : instance method of exports.WalletDetector Param Type Description onDetected function Call-back function which trigger on new wallet exports.WalletDetector.stopScan() \u21d2 void Stop scanning Kind : instance method of exports.WalletDetector exports.WalletDetector.getWallets() \u21d2 Array Get wallet list Kind : instance method of exports.WalletDetector Returns : Array - Available wallets","title":"Wallet detector"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/#aeternityaepp-sdkesutilsaepp-wallet-communicationwallet-detector","text":"Wallet Detector This is the complement to module:@aeternity/aepp-sdk/es/utils . Example import WalletDetector from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector exports.WalletDetector(params) \u21d2 WalletDetector \u23cf .scan(onDetected) \u21d2 void .stopScan() \u21d2 void .getWallets() \u21d2 Array","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/#exportswalletdetectorparams-walletdetector","text":"WalletDetector stamp Kind : Exported function rtype : Stamp Param Type Default Description params Object {} Initializer object params.connection WalletConnection Connection for listening for wallets","title":"exports.WalletDetector(params) \u21d2 WalletDetector \u23cf"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/#exportswalletdetectorscanondetected-void","text":"Start scanning Kind : instance method of exports.WalletDetector Param Type Description onDetected function Call-back function which trigger on new wallet","title":"exports.WalletDetector.scan(onDetected) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/#exportswalletdetectorstopscan-void","text":"Stop scanning Kind : instance method of exports.WalletDetector","title":"exports.WalletDetector.stopScan() \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/wallet-detector/#exportswalletdetectorgetwallets-array","text":"Get wallet list Kind : instance method of exports.WalletDetector Returns : Array - Available wallets","title":"exports.WalletDetector.getWallets() \u21d2 Array"},{"location":"api/utils/aepp-wallet-communication/connection/browser-runtime/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime Browser runtime connector module This is the complement to @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection . Example import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime' exports.BrowserRuntimeConnection(params) \u21d2 Object \u23cf BrowserRuntimeConnection stamp Handle browser runtime communication Kind : Exported function rtype : Stamp Param Type Default Description params Object {} Initializer object params.port Object Runtime port object [params.connectionInfo] Object {} Connection info object [params.debug] Boolean false Debug flag","title":"Browser runtime"},{"location":"api/utils/aepp-wallet-communication/connection/browser-runtime/#aeternityaepp-sdkesutilsaepp-wallet-communicationconnectionbrowser-runtime","text":"Browser runtime connector module This is the complement to @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection . Example import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime'","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime"},{"location":"api/utils/aepp-wallet-communication/connection/browser-runtime/#exportsbrowserruntimeconnectionparams-object","text":"BrowserRuntimeConnection stamp Handle browser runtime communication Kind : Exported function rtype : Stamp Param Type Default Description params Object {} Initializer object params.port Object Runtime port object [params.connectionInfo] Object {} Connection info object [params.debug] Boolean false Debug flag","title":"exports.BrowserRuntimeConnection(params) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/connection/browser-window-message/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message Browser window Post Message connector module This is the complement to @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection . Example import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message' exports.BrowserWindowMessageConnection([params]) \u21d2 Object \u23cf BrowserWindowMessageConnection Kind : Exported function rtype : Stamp Param Type Default Description [params] Object {} Initializer object [params.target] Object window.parent Target window for message [params.self] Object window Host window for message [params.origin] Object Origin of receiver [params.sendDirection] Object Optional field for wrapping messages in additional structure({ type: 'to_aepp' [params.receiveDirection] Object 'to_aepp' Optional(default: 'to_aepp') field for unwrapping messages from additional structure({ type: 'to_aepp' [params.connectionInfo] Object {} Connection info object [params.debug] Boolean false Debug flag","title":"Window message"},{"location":"api/utils/aepp-wallet-communication/connection/browser-window-message/#aeternityaepp-sdkesutilsaepp-wallet-communicationconnectionbrowser-window-message","text":"Browser window Post Message connector module This is the complement to @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection . Example import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message'","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message"},{"location":"api/utils/aepp-wallet-communication/connection/browser-window-message/#exportsbrowserwindowmessageconnectionparams-object","text":"BrowserWindowMessageConnection Kind : Exported function rtype : Stamp Param Type Default Description [params] Object {} Initializer object [params.target] Object window.parent Target window for message [params.self] Object window Host window for message [params.origin] Object Origin of receiver [params.sendDirection] Object Optional field for wrapping messages in additional structure({ type: 'to_aepp' [params.receiveDirection] Object 'to_aepp' Optional(default: 'to_aepp') field for unwrapping messages from additional structure({ type: 'to_aepp' [params.connectionInfo] Object {} Connection info object [params.debug] Boolean false Debug flag","title":"exports.BrowserWindowMessageConnection([params]) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc RPC handler for AEPP side Example import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc exports.AeppRpc(param, onAddressChange, onDisconnect, onNetworkChange, connection) \u21d2 Object \u23cf .connectToWallet(connection) \u21d2 void .disconnectWallet(sendDisconnect) \u21d2 void .askAddresses() \u21d2 Promise .subscribeAddress(type, value) \u21d2 Promise .signTransaction() \u21d2 Promise.&lt;String&gt; .signMessage() \u21d2 Promise.&lt;String&gt; .sendConnectRequest() \u21d2 Promise .send(tx, [options]) \u21d2 Promise.&lt;Object&gt; exports.AeppRpc(param, onAddressChange, onDisconnect, onNetworkChange, connection) \u21d2 Object \u23cf Contain functionality for wallet interaction and connect it to sdk Kind : Exported function rtype : Stamp Param Type Description param Object Init params object [param.name] String Aepp name onAddressChange function Call-back function for update address event onDisconnect function Call-back function for disconnect event onNetworkChange function Call-back function for update network event connection Object Wallet connection object exports.AeppRpc.connectToWallet(connection) \u21d2 void Connect to wallet Kind : instance method of exports.AeppRpc rtype : (connection: Object) => void Param Type Description connection Object Wallet connection object exports.AeppRpc.disconnectWallet(sendDisconnect) \u21d2 void Disconnect from wallet Kind : instance method of exports.AeppRpc rtype : (force: Boolean = false) => void Param Type Default Description sendDisconnect Boolean false Force sending close connection message exports.AeppRpc.askAddresses() \u21d2 Promise Ask address from wallet Kind : instance method of exports.AeppRpc Returns : Promise - Address from wallet rtype : () => Promise exports.AeppRpc.subscribeAddress(type, value) \u21d2 Promise Subscribe for addresses from wallet Kind : instance method of exports.AeppRpc Returns : Promise - Address from wallet rtype : (type: String, value: String) => Promise Param Type Description type String Type of subscription can be one of ['current'(just for selected account updates), 'connected(all accounts)'] value String Subscription action('subscribe' exports.AeppRpc.signTransaction() \u21d2 Promise.&lt;String&gt; Overwriting of signTransaction AE method All sdk API which use it will be send notification to wallet and wait for callBack Kind : instance method of exports.AeppRpc Returns : Promise.&lt;String&gt; - Signed transaction rtype : (tx: String, options = {}) => Promise exports.AeppRpc.signMessage() \u21d2 Promise.&lt;String&gt; Overwriting of signMessage AE method All sdk API which use it will be send notification to wallet and wait for callBack Kind : instance method of exports.AeppRpc Returns : Promise.&lt;String&gt; - Signed transaction rtype : (msg: String, options = {}) => Promise exports.AeppRpc.sendConnectRequest() \u21d2 Promise Send connection request to wallet Kind : instance method of exports.AeppRpc Returns : Promise - Connection response rtype : () => Promise exports.AeppRpc.send(tx, [options]) \u21d2 Promise.&lt;Object&gt; Overwriting of send AE method All sdk API which use it will be send notification to wallet and wait for callBack This method will sign, broadcast and wait until transaction will be accepted using rpc communication with wallet Kind : instance method of exports.AeppRpc Returns : Promise.&lt;Object&gt; - Transaction broadcast result rtype : (tx: String, options = {}) => Promise Param Type Default tx String [options] Object {} [options.walletBroadcast] Object true","title":"Aepp RPC"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#aeternityaepp-sdkesutilsaepp-wallet-communicationrpcaepp-rpc","text":"RPC handler for AEPP side Example import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc exports.AeppRpc(param, onAddressChange, onDisconnect, onNetworkChange, connection) \u21d2 Object \u23cf .connectToWallet(connection) \u21d2 void .disconnectWallet(sendDisconnect) \u21d2 void .askAddresses() \u21d2 Promise .subscribeAddress(type, value) \u21d2 Promise .signTransaction() \u21d2 Promise.&lt;String&gt; .signMessage() \u21d2 Promise.&lt;String&gt; .sendConnectRequest() \u21d2 Promise .send(tx, [options]) \u21d2 Promise.&lt;Object&gt;","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/aepp-rpc"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcparam-onaddresschange-ondisconnect-onnetworkchange-connection-object","text":"Contain functionality for wallet interaction and connect it to sdk Kind : Exported function rtype : Stamp Param Type Description param Object Init params object [param.name] String Aepp name onAddressChange function Call-back function for update address event onDisconnect function Call-back function for disconnect event onNetworkChange function Call-back function for update network event connection Object Wallet connection object","title":"exports.AeppRpc(param, onAddressChange, onDisconnect, onNetworkChange, connection) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcconnecttowalletconnection-void","text":"Connect to wallet Kind : instance method of exports.AeppRpc rtype : (connection: Object) => void Param Type Description connection Object Wallet connection object","title":"exports.AeppRpc.connectToWallet(connection) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcdisconnectwalletsenddisconnect-void","text":"Disconnect from wallet Kind : instance method of exports.AeppRpc rtype : (force: Boolean = false) => void Param Type Default Description sendDisconnect Boolean false Force sending close connection message","title":"exports.AeppRpc.disconnectWallet(sendDisconnect) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcaskaddresses-promise","text":"Ask address from wallet Kind : instance method of exports.AeppRpc Returns : Promise - Address from wallet rtype : () => Promise","title":"exports.AeppRpc.askAddresses() \u21d2 Promise"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcsubscribeaddresstype-value-promise","text":"Subscribe for addresses from wallet Kind : instance method of exports.AeppRpc Returns : Promise - Address from wallet rtype : (type: String, value: String) => Promise Param Type Description type String Type of subscription can be one of ['current'(just for selected account updates), 'connected(all accounts)'] value String Subscription action('subscribe'","title":"exports.AeppRpc.subscribeAddress(type, value) \u21d2 Promise"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcsigntransaction-promiseltstringgt","text":"Overwriting of signTransaction AE method All sdk API which use it will be send notification to wallet and wait for callBack Kind : instance method of exports.AeppRpc Returns : Promise.&lt;String&gt; - Signed transaction rtype : (tx: String, options = {}) => Promise","title":"exports.AeppRpc.signTransaction() \u21d2 Promise.&amp;lt;String&amp;gt;"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcsignmessage-promiseltstringgt","text":"Overwriting of signMessage AE method All sdk API which use it will be send notification to wallet and wait for callBack Kind : instance method of exports.AeppRpc Returns : Promise.&lt;String&gt; - Signed transaction rtype : (msg: String, options = {}) => Promise","title":"exports.AeppRpc.signMessage() \u21d2 Promise.&amp;lt;String&amp;gt;"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcsendconnectrequest-promise","text":"Send connection request to wallet Kind : instance method of exports.AeppRpc Returns : Promise - Connection response rtype : () => Promise","title":"exports.AeppRpc.sendConnectRequest() \u21d2 Promise"},{"location":"api/utils/aepp-wallet-communication/rpc/aepp-rpc/#exportsaepprpcsendtx-options-promiseltobjectgt","text":"Overwriting of send AE method All sdk API which use it will be send notification to wallet and wait for callBack This method will sign, broadcast and wait until transaction will be accepted using rpc communication with wallet Kind : instance method of exports.AeppRpc Returns : Promise.&lt;Object&gt; - Transaction broadcast result rtype : (tx: String, options = {}) => Promise Param Type Default tx String [options] Object {} [options.walletBroadcast] Object true","title":"exports.AeppRpc.send(tx, [options]) \u21d2 Promise.&amp;lt;Object&amp;gt;"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client RPC client helpers Example import RpcClient from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client' Example import RpcClients from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client exports.RpcClient(param) \u21d2 Object \u23cf instance .addClient(id, connectionData) \u21d2 void .getClient(id) \u21d2 Object .removeClient(id, forceConnectionClose) \u21d2 Boolean .updateClientInfo(id, info) \u21d2 void .sendNotificationByCondition(msg, condition, transformMessage) \u21d2 void .operationByCondition(condition, operation) \u21d2 void .hasAccessToAccount(address) \u21d2 Boolean .isConnected() \u21d2 Boolean .getCurrentAccount(options) \u21d2 String .disconnect() \u21d2 void .updateSubscription(type, value) \u21d2 Array.&lt;String&gt; .addAction(action, resolvers) \u21d2 Object .request(name, params) \u21d2 Promise .processResponse(msg, [transformResult]) \u21d2 void static .RpcClients() \u21d2 Object exports.RpcClient(param) \u21d2 Object \u23cf Contain functionality for using RPC conection Kind : Exported function rtype : Stamp Param Type Description param Object Init params object param.id String Client id param.name String Client name param.connection Object Connection object param.handlers Array.&lt;function()&gt; Arrays with two function for handling messages ([ onMessage: Function, onDisconnect: Function]) exports.RpcClient.addClient(id, connectionData) \u21d2 void Add new client Kind : instance method of exports.RpcClient rtype : (id: (String|Number), connectionInfo: Object) => void Param Type Description id String | Number Client ID connectionData Object Object containing connectionInfo and connection objects exports.RpcClient.getClient(id) \u21d2 Object Get clien by id Kind : instance method of exports.RpcClient Returns : Object - RpcClient rtype : (id: (String|Number)) => Object Param Type Description id String | Number Client ID exports.RpcClient.removeClient(id, forceConnectionClose) \u21d2 Boolean Remove and disiconnect client by ID Kind : instance method of exports.RpcClient rtype : (id: (String|Number), { forceConnectionClose: boolean = false }) => boolean Param Type Description id String | Number Client ID forceConnectionClose exports.RpcClient.updateClientInfo(id, info) \u21d2 void Update client info by id Kind : instance method of exports.RpcClient rtype : (id: (String|Number), info: Object) => void Param Type Description id String | Number Client ID info Object Info to update (will be merged with current info object) exports.RpcClient.sendNotificationByCondition(msg, condition, transformMessage) \u21d2 void Send notification to all client passing condition Kind : instance method of exports.RpcClient rtype : (msg: Object, condition: Function) => void Param Type Description msg Object Msg object condition function Condition function of (client: RpcClient) => Boolean transformMessage exports.RpcClient.operationByCondition(condition, operation) \u21d2 void Call provided function for each rpc client which by condition Kind : instance method of exports.RpcClient rtype : (condition: Function, operation: Function) => void Param Type Description condition function Condition function of (client: RpcClient) => Boolean operation function Operation function of (client: RpcClient) => void exports.RpcClient.hasAccessToAccount(address) \u21d2 Boolean Check if aepp has access to account Kind : instance method of exports.RpcClient Returns : Boolean - is connected rtype : (address: String) => Boolean Param Type Description address String Account address exports.RpcClient.isConnected() \u21d2 Boolean Check if is connected Kind : instance method of exports.RpcClient Returns : Boolean - is connected rtype : () => Boolean exports.RpcClient.getCurrentAccount(options) \u21d2 String Get selected account Kind : instance method of exports.RpcClient rtype : ({ onAccount } = {}) => String Param Type Description options Object Options exports.RpcClient.disconnect() \u21d2 void Disconnect Kind : instance method of exports.RpcClient rtype : () => void exports.RpcClient.updateSubscription(type, value) \u21d2 Array.&lt;String&gt; Update subscription Kind : instance method of exports.RpcClient rtype : (type: String, value: String) => void Param Type Description type String Subscription type value String Subscription value exports.RpcClient.addAction(action, resolvers) \u21d2 Object Add new action to actions Kind : instance method of exports.RpcClient rtype : (action: Object, [r: Function, j: Function]) => Object Param Type Description action Object Action object resolvers Array.&lt;function()&gt; Array with two function [resolve, reject] action exports.RpcClient.request(name, params) \u21d2 Promise Make a request Kind : instance method of exports.RpcClient Returns : Promise - Promise which will be resolved after receiving response message rtype : (name: String, params: Object) => Promise Param Type Description name String Method name params Object Method params exports.RpcClient.processResponse(msg, [transformResult]) \u21d2 void Process response message Kind : instance method of exports.RpcClient rtype : (msg: Object, transformResult: Function) => void Param Type Description msg Object Message object [transformResult] function Optional parser function for message exports.RpcClient.RpcClients() \u21d2 Object Contain functionality for managing multiple RPC clients (RpcClient stamp) Kind : static method of exports.RpcClient rtype : Stamp","title":"RPC client"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#aeternityaepp-sdkesutilsaepp-wallet-communicationrpcrpc-client","text":"RPC client helpers Example import RpcClient from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client' Example import RpcClients from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client exports.RpcClient(param) \u21d2 Object \u23cf instance .addClient(id, connectionData) \u21d2 void .getClient(id) \u21d2 Object .removeClient(id, forceConnectionClose) \u21d2 Boolean .updateClientInfo(id, info) \u21d2 void .sendNotificationByCondition(msg, condition, transformMessage) \u21d2 void .operationByCondition(condition, operation) \u21d2 void .hasAccessToAccount(address) \u21d2 Boolean .isConnected() \u21d2 Boolean .getCurrentAccount(options) \u21d2 String .disconnect() \u21d2 void .updateSubscription(type, value) \u21d2 Array.&lt;String&gt; .addAction(action, resolvers) \u21d2 Object .request(name, params) \u21d2 Promise .processResponse(msg, [transformResult]) \u21d2 void static .RpcClients() \u21d2 Object","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/rpc-client"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientparam-object","text":"Contain functionality for using RPC conection Kind : Exported function rtype : Stamp Param Type Description param Object Init params object param.id String Client id param.name String Client name param.connection Object Connection object param.handlers Array.&lt;function()&gt; Arrays with two function for handling messages ([ onMessage: Function, onDisconnect: Function])","title":"exports.RpcClient(param) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientaddclientid-connectiondata-void","text":"Add new client Kind : instance method of exports.RpcClient rtype : (id: (String|Number), connectionInfo: Object) => void Param Type Description id String | Number Client ID connectionData Object Object containing connectionInfo and connection objects","title":"exports.RpcClient.addClient(id, connectionData) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientgetclientid-object","text":"Get clien by id Kind : instance method of exports.RpcClient Returns : Object - RpcClient rtype : (id: (String|Number)) => Object Param Type Description id String | Number Client ID","title":"exports.RpcClient.getClient(id) \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientremoveclientid-forceconnectionclose-boolean","text":"Remove and disiconnect client by ID Kind : instance method of exports.RpcClient rtype : (id: (String|Number), { forceConnectionClose: boolean = false }) => boolean Param Type Description id String | Number Client ID forceConnectionClose","title":"exports.RpcClient.removeClient(id, forceConnectionClose) \u21d2 Boolean"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientupdateclientinfoid-info-void","text":"Update client info by id Kind : instance method of exports.RpcClient rtype : (id: (String|Number), info: Object) => void Param Type Description id String | Number Client ID info Object Info to update (will be merged with current info object)","title":"exports.RpcClient.updateClientInfo(id, info) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientsendnotificationbyconditionmsg-condition-transformmessage-void","text":"Send notification to all client passing condition Kind : instance method of exports.RpcClient rtype : (msg: Object, condition: Function) => void Param Type Description msg Object Msg object condition function Condition function of (client: RpcClient) => Boolean transformMessage","title":"exports.RpcClient.sendNotificationByCondition(msg, condition, transformMessage) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientoperationbyconditioncondition-operation-void","text":"Call provided function for each rpc client which by condition Kind : instance method of exports.RpcClient rtype : (condition: Function, operation: Function) => void Param Type Description condition function Condition function of (client: RpcClient) => Boolean operation function Operation function of (client: RpcClient) => void","title":"exports.RpcClient.operationByCondition(condition, operation) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclienthasaccesstoaccountaddress-boolean","text":"Check if aepp has access to account Kind : instance method of exports.RpcClient Returns : Boolean - is connected rtype : (address: String) => Boolean Param Type Description address String Account address","title":"exports.RpcClient.hasAccessToAccount(address) \u21d2 Boolean"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientisconnected-boolean","text":"Check if is connected Kind : instance method of exports.RpcClient Returns : Boolean - is connected rtype : () => Boolean","title":"exports.RpcClient.isConnected() \u21d2 Boolean"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientgetcurrentaccountoptions-string","text":"Get selected account Kind : instance method of exports.RpcClient rtype : ({ onAccount } = {}) => String Param Type Description options Object Options","title":"exports.RpcClient.getCurrentAccount(options) \u21d2 String"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientdisconnect-void","text":"Disconnect Kind : instance method of exports.RpcClient rtype : () => void","title":"exports.RpcClient.disconnect() \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientupdatesubscriptiontype-value-arrayltstringgt","text":"Update subscription Kind : instance method of exports.RpcClient rtype : (type: String, value: String) => void Param Type Description type String Subscription type value String Subscription value","title":"exports.RpcClient.updateSubscription(type, value) \u21d2 Array.&amp;lt;String&amp;gt;"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientaddactionaction-resolvers-object","text":"Add new action to actions Kind : instance method of exports.RpcClient rtype : (action: Object, [r: Function, j: Function]) => Object Param Type Description action Object Action object resolvers Array.&lt;function()&gt; Array with two function [resolve, reject] action","title":"exports.RpcClient.addAction(action, resolvers) \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientrequestname-params-promise","text":"Make a request Kind : instance method of exports.RpcClient Returns : Promise - Promise which will be resolved after receiving response message rtype : (name: String, params: Object) => Promise Param Type Description name String Method name params Object Method params","title":"exports.RpcClient.request(name, params) \u21d2 Promise"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientprocessresponsemsg-transformresult-void","text":"Process response message Kind : instance method of exports.RpcClient rtype : (msg: Object, transformResult: Function) => void Param Type Description msg Object Message object [transformResult] function Optional parser function for message","title":"exports.RpcClient.processResponse(msg, [transformResult]) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/rpc-client/#exportsrpcclientrpcclients-object","text":"Contain functionality for managing multiple RPC clients (RpcClient stamp) Kind : static method of exports.RpcClient rtype : Stamp","title":"exports.RpcClient.RpcClients() \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/","text":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc RPC handler for WAELLET side Example import WalletRpc from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc exports.WalletRpc(param, onConnection, onSubscription, onSign, onAskAccounts, onMessageSign, onDisconnect) \u21d2 Object \u23cf .getClients() \u21d2 Object .removeRpcClient(id, [opt]) \u21d2 Object .addRpcClient(clientConnection) \u21d2 String .shareWalletInfo(postFn) \u21d2 void .getWalletInfo() \u21d2 Object .getAccounts() \u21d2 Object exports.WalletRpc(param, onConnection, onSubscription, onSign, onAskAccounts, onMessageSign, onDisconnect) \u21d2 Object \u23cf Contain functionality for aepp interaction and managing multiple aepps Kind : Exported function rtype : Stamp Param Type Description param Object Init params object [param.name] String Wallet name onConnection function Call-back function for incoming AEPP connection (Second argument contain function for accept/deny request) onSubscription function Call-back function for incoming AEPP account subscription (Second argument contain function for accept/deny request) onSign function Call-back function for incoming AEPP sign request (Second argument contain function for accept/deny request) onAskAccounts function Call-back function for incoming AEPP get address request (Second argument contain function for accept/deny request) onMessageSign function Call-back function for incoming AEPP sign message request (Second argument contain function for accept/deny request) onDisconnect function Call-back function for disconnect event exports.WalletRpc.getClients() \u21d2 Object Get RpcClients object which contain all connected AEPPS Kind : instance method of exports.WalletRpc rtype : () => Object exports.WalletRpc.removeRpcClient(id, [opt]) \u21d2 Object Remove specific RpcClient by ID Kind : instance method of exports.WalletRpc rtype : (id: string) => Boolean Param Type Default Description id String Client ID [opt] Object {} exports.WalletRpc.addRpcClient(clientConnection) \u21d2 String Add new AEPP connection Kind : instance method of exports.WalletRpc Returns : String - Client ID rtype : (clientConnection: Object) => Object Param Type Description clientConnection Object AEPP connection object exports.WalletRpc.shareWalletInfo(postFn) \u21d2 void Share wallet info Send shareWalletInfo message to notify AEPP about wallet Kind : instance method of exports.WalletRpc rtype : (postFn: Function) => void Param Type Description postFn function Send message function like (msg) => void exports.WalletRpc.getWalletInfo() \u21d2 Object Get Wallet info object Kind : instance method of exports.WalletRpc Returns : Object - Object with wallet information(id, name, network, ...) rtype : () => Object exports.WalletRpc.getAccounts() \u21d2 Object Get Wallet accounts Kind : instance method of exports.WalletRpc Returns : Object - Object with accounts information({ connected: Object, current: Object }) rtype : () => Object","title":"Wallet RPC"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#aeternityaepp-sdkesutilsaepp-wallet-communicationrpcwallet-rpc","text":"RPC handler for WAELLET side Example import WalletRpc from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc' @aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc exports.WalletRpc(param, onConnection, onSubscription, onSign, onAskAccounts, onMessageSign, onDisconnect) \u21d2 Object \u23cf .getClients() \u21d2 Object .removeRpcClient(id, [opt]) \u21d2 Object .addRpcClient(clientConnection) \u21d2 String .shareWalletInfo(postFn) \u21d2 void .getWalletInfo() \u21d2 Object .getAccounts() \u21d2 Object","title":"@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/rpc/wallet-rpc"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcparam-onconnection-onsubscription-onsign-onaskaccounts-onmessagesign-ondisconnect-object","text":"Contain functionality for aepp interaction and managing multiple aepps Kind : Exported function rtype : Stamp Param Type Description param Object Init params object [param.name] String Wallet name onConnection function Call-back function for incoming AEPP connection (Second argument contain function for accept/deny request) onSubscription function Call-back function for incoming AEPP account subscription (Second argument contain function for accept/deny request) onSign function Call-back function for incoming AEPP sign request (Second argument contain function for accept/deny request) onAskAccounts function Call-back function for incoming AEPP get address request (Second argument contain function for accept/deny request) onMessageSign function Call-back function for incoming AEPP sign message request (Second argument contain function for accept/deny request) onDisconnect function Call-back function for disconnect event","title":"exports.WalletRpc(param, onConnection, onSubscription, onSign, onAskAccounts, onMessageSign, onDisconnect) \u21d2 Object \u23cf"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcgetclients-object","text":"Get RpcClients object which contain all connected AEPPS Kind : instance method of exports.WalletRpc rtype : () => Object","title":"exports.WalletRpc.getClients() \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcremoverpcclientid-opt-object","text":"Remove specific RpcClient by ID Kind : instance method of exports.WalletRpc rtype : (id: string) => Boolean Param Type Default Description id String Client ID [opt] Object {}","title":"exports.WalletRpc.removeRpcClient(id, [opt]) \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcaddrpcclientclientconnection-string","text":"Add new AEPP connection Kind : instance method of exports.WalletRpc Returns : String - Client ID rtype : (clientConnection: Object) => Object Param Type Description clientConnection Object AEPP connection object","title":"exports.WalletRpc.addRpcClient(clientConnection) \u21d2 String"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcsharewalletinfopostfn-void","text":"Share wallet info Send shareWalletInfo message to notify AEPP about wallet Kind : instance method of exports.WalletRpc rtype : (postFn: Function) => void Param Type Description postFn function Send message function like (msg) => void","title":"exports.WalletRpc.shareWalletInfo(postFn) \u21d2 void"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcgetwalletinfo-object","text":"Get Wallet info object Kind : instance method of exports.WalletRpc Returns : Object - Object with wallet information(id, name, network, ...) rtype : () => Object","title":"exports.WalletRpc.getWalletInfo() \u21d2 Object"},{"location":"api/utils/aepp-wallet-communication/rpc/wallet-rpc/#exportswalletrpcgetaccounts-object","text":"Get Wallet accounts Kind : instance method of exports.WalletRpc Returns : Object - Object with accounts information({ connected: Object, current: Object }) rtype : () => Object","title":"exports.WalletRpc.getAccounts() \u21d2 Object"},{"location":"contrib/","text":"Contributing Info Principles The Javascript SDK wraps the \u00e6ternity API explosed by Node's Swagger file . It aims to abstract the API, while still providing low-level access to it's endpoints, when necessary. It uses the following Javascript technologies and principles: stampit provides composable Factories based on the Stamp Specification . This is how aepp-sdk approached the composition over inheritance principle. JavaScript the Good Parts (because Crockford is always right) ES6 modules , using export and import Promises using ES7 async/await syntax, where applicable Functional Programming using Ramda Statelessness wherever possible webpack 4 and the Babel Strictly enforced StandardJS Loose coupling of modules to enable tree-shaking Convention over configuration \"Easy things should be easy, and hard things should be possible.\" source -- Larry Wall Support for module access, enabling tree-shaking direct use in node scripts through bundling direct use in browser <script> tags through bundling bundling through webpack Requirements aepp-sdk is transpiled to EcmaScript 5 through WebPack , using Babel and is expected to work in any sufficiently new version of Node.js ( >= 8.11 ) or modern web browser. Contributing Clone the application Make sure your editor/IDE can read and use the .editorconfig file Start hacking (and dont forget to add test for whatever you'll be building). Documenting Apart from documenting features and code, there is also documentation automatically generated using jsdoc for documenting JS files (later transformed in to .md files (to have them readable in platforms like GitHub) and docco for documenting examples and code partials. #generate documentation with docco + jsdoc (and markdownify jsdoc) npm run docs:docco && npm run docs:api Building aepp-sdk is built using pnpm . In order to build a development version, launch the build:dev command. pnpm install pnpm run build:dev Testing To test, launch the test command. This will run mocha 's tests locally. pnpm run test This repository also includes a docker-compose file, to allow you to run your own aeternity node locally . If you want to do so, from the root of the project : Create a docker-compose.override.yml file with this content: version: \"3\" services: node: ports: - 3013:3013 - 3113:3113 - 3014:3014 - 3001:3001 Run docker-compose up node Congrats! you're now running your own aeternity node locally. Composing new Flavors You can also \"compose\" your own flavor by mixing 2 or more flavors likes so: import Wallet from '@aeternity/aepp-sdk/es/ae/wallet.js' import Contract from '@aeternity/aepp-sdk/es/ae/contract.js' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory.js' // make a \"mixed flavor\" containing Wallet and Contracts flavors Wallet.compose(Contract)({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io', accounts: [MemoryAccount({keypair: {secretKey: account.priv, publicKey: account.pub}})], address: account.pub, onTx: true, // or a function to Guard the Rpc client onChain: true, // or a function to Guard the Rpc client onAccount: true, // or a function to Guard the Rpc client networkId: 'ae_uat' }).then(ae => { // ae is your initialised client now! :) // ... The WebPack compilation provides two different build artifacts in dist/ , one for Node.js and one for browsers. When referencing aepp-sdk through any modern build tooling, it should pick the right one automatically through the entry points defined in package.json . Installation / Linking In order to add a local development version of aepp-sdk to a project, npm link 1 can be used. Releasing How to release a new version Guides If you're interested in getting sample code/guide, you can check out the Guides","title":"Contributing Info"},{"location":"contrib/#contributing-info","text":"","title":"Contributing Info"},{"location":"contrib/#principles","text":"The Javascript SDK wraps the \u00e6ternity API explosed by Node's Swagger file . It aims to abstract the API, while still providing low-level access to it's endpoints, when necessary. It uses the following Javascript technologies and principles: stampit provides composable Factories based on the Stamp Specification . This is how aepp-sdk approached the composition over inheritance principle. JavaScript the Good Parts (because Crockford is always right) ES6 modules , using export and import Promises using ES7 async/await syntax, where applicable Functional Programming using Ramda Statelessness wherever possible webpack 4 and the Babel Strictly enforced StandardJS Loose coupling of modules to enable tree-shaking Convention over configuration \"Easy things should be easy, and hard things should be possible.\" source -- Larry Wall Support for module access, enabling tree-shaking direct use in node scripts through bundling direct use in browser <script> tags through bundling bundling through webpack","title":"Principles"},{"location":"contrib/#requirements","text":"aepp-sdk is transpiled to EcmaScript 5 through WebPack , using Babel and is expected to work in any sufficiently new version of Node.js ( >= 8.11 ) or modern web browser.","title":"Requirements"},{"location":"contrib/#contributing","text":"Clone the application Make sure your editor/IDE can read and use the .editorconfig file Start hacking (and dont forget to add test for whatever you'll be building).","title":"Contributing"},{"location":"contrib/#documenting","text":"Apart from documenting features and code, there is also documentation automatically generated using jsdoc for documenting JS files (later transformed in to .md files (to have them readable in platforms like GitHub) and docco for documenting examples and code partials. #generate documentation with docco + jsdoc (and markdownify jsdoc) npm run docs:docco && npm run docs:api","title":"Documenting"},{"location":"contrib/#building","text":"aepp-sdk is built using pnpm . In order to build a development version, launch the build:dev command. pnpm install pnpm run build:dev","title":"Building"},{"location":"contrib/#testing","text":"To test, launch the test command. This will run mocha 's tests locally. pnpm run test This repository also includes a docker-compose file, to allow you to run your own aeternity node locally . If you want to do so, from the root of the project : Create a docker-compose.override.yml file with this content: version: \"3\" services: node: ports: - 3013:3013 - 3113:3113 - 3014:3014 - 3001:3001 Run docker-compose up node Congrats! you're now running your own aeternity node locally.","title":"Testing"},{"location":"contrib/#composing-new-flavors","text":"You can also \"compose\" your own flavor by mixing 2 or more flavors likes so: import Wallet from '@aeternity/aepp-sdk/es/ae/wallet.js' import Contract from '@aeternity/aepp-sdk/es/ae/contract.js' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory.js' // make a \"mixed flavor\" containing Wallet and Contracts flavors Wallet.compose(Contract)({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io', accounts: [MemoryAccount({keypair: {secretKey: account.priv, publicKey: account.pub}})], address: account.pub, onTx: true, // or a function to Guard the Rpc client onChain: true, // or a function to Guard the Rpc client onAccount: true, // or a function to Guard the Rpc client networkId: 'ae_uat' }).then(ae => { // ae is your initialised client now! :) // ... The WebPack compilation provides two different build artifacts in dist/ , one for Node.js and one for browsers. When referencing aepp-sdk through any modern build tooling, it should pick the right one automatically through the entry points defined in package.json .","title":"Composing new Flavors"},{"location":"contrib/#installation-linking","text":"In order to add a local development version of aepp-sdk to a project, npm link 1 can be used.","title":"Installation / Linking"},{"location":"contrib/#releasing","text":"How to release a new version","title":"Releasing"},{"location":"contrib/#guides","text":"If you're interested in getting sample code/guide, you can check out the Guides","title":"Guides"},{"location":"contrib/releases/","text":"Releases This document describes the requirements and the process of creating releases of aepp-sdk to npmjs.com. Prerequisites A user wanting to release a new version needs to be a member of the @aeternity organization on npmjs.com. An existing member with write access needs to invite them in order to achieve this. In addition, the user needs to activate any means of 2-factor authentication because the aepp-sdk package is set up to only accept new versions if a second factor for authentication is in use. This is in light of the latest eslint-scope hack. As new releases should only happen from release branch merges to the master branch of the repository on GitHub followed by a signed tag push, the user also needs direct write access to the repository on GitHub. Normally, this can be achieved by first adding them to the \u00e6ternity organization and then to the sdk team , which gives automatic write access. Branching Out As aepp-sdk follows the git-flow strategy for develoment, the release process is modelled after that strategy accordingly, with a few additions. Branch out from develop to a dedicated release branch denoting the target version number, e.g. release/0.20.0-0.1.0 for a hypothetical first release targeting Node 0.20.0. Preparing a Pre-Release If Testnet is not yet targeting the latest Node version, but you're \"ready to release\", you can do a pre-release for the latest version, tagging the release as @next on npmjs. To do this, You can follow the steps listed below, while keeping the next portion in both CHANGELOG.md and package.json files. Preparing a Release On the release branch, remove the next portion of the version string in package.json . Replace the [Unreleased] header in the change log file , if you have that, with the new version string. Next, git diff the release, branch a release/X.X.X (where X.X.X is your latest release) against master and validate that all changes are covered in the changelog. You can find more instructions on how to maintain a CHANGELOG: here . Also, make sure to add a new link at the bottom of the file that will provide a diff between the last released version and the to-be released version. There's a catch: That link won't be able to work until after the release has been made! PR against master Create a pull request against master and have it peer reviewed thoroughly. As all changes should've been reviewed before when they were merged to develop , emphasize on security-related changes and small changes pushed to develop separately. Merging Once the integration build has succesfully completed (with or without additional fixes), merge (without squash) the branch into master . This allows master to be comprised of release commits exclusively, so every commit on master correponds to exactly one released (or at least, tagged) version of aepp-sdk, respectively. Build, Release and Tag Update the local working copy to a local tracking branch of master and update. Optionally, wait for the CI build to finish and execute a last npm run test locally. Important: Because npm publish will use the local files on disk for releasing, perform a full clean and build in order to release to npmjs.com! Cleanup - run git clean -ffdx to completely wipe out your workspace of files not in the repository. This might wipe out files you still need, so consider a seperate clone of the project! Execute npm run prepublishOnly to generate Documentation for the API and the SDK codebase, optionally followed by npm pack and investigate the resulting tarball's contents. This tarball resembles what users will actual download from npmjs.com once the release is completed! Execute npm publish and follow the on-screen instructions Important: If you are releasing a Pre-Release (AKA next ), make sure to tag the release as next using the command npm publish --tag next . At this point, the release should already be in npmjs.com. The final step is to also tag the release on GitHub and push the tag, which requires direct write access . git tag $VERSION git push tag $VERSION Recommendation: Use signed tags using the -s option to increase community's trust in the project! Merging Back into develop At this point, it is important to synchronize develop with any changes that have happened after branching out to the release branch. Create a new branch called realign/X.X.X from master (where X.X.X is your latest release) and open a Pull Request towards develop and resolve conflicts, if needed. This concludes the release process and the development cycle.","title":"Releases"},{"location":"contrib/releases/#releases","text":"This document describes the requirements and the process of creating releases of aepp-sdk to npmjs.com.","title":"Releases"},{"location":"contrib/releases/#prerequisites","text":"A user wanting to release a new version needs to be a member of the @aeternity organization on npmjs.com. An existing member with write access needs to invite them in order to achieve this. In addition, the user needs to activate any means of 2-factor authentication because the aepp-sdk package is set up to only accept new versions if a second factor for authentication is in use. This is in light of the latest eslint-scope hack. As new releases should only happen from release branch merges to the master branch of the repository on GitHub followed by a signed tag push, the user also needs direct write access to the repository on GitHub. Normally, this can be achieved by first adding them to the \u00e6ternity organization and then to the sdk team , which gives automatic write access.","title":"Prerequisites"},{"location":"contrib/releases/#branching-out","text":"As aepp-sdk follows the git-flow strategy for develoment, the release process is modelled after that strategy accordingly, with a few additions. Branch out from develop to a dedicated release branch denoting the target version number, e.g. release/0.20.0-0.1.0 for a hypothetical first release targeting Node 0.20.0.","title":"Branching Out"},{"location":"contrib/releases/#preparing-a-pre-release","text":"If Testnet is not yet targeting the latest Node version, but you're \"ready to release\", you can do a pre-release for the latest version, tagging the release as @next on npmjs. To do this, You can follow the steps listed below, while keeping the next portion in both CHANGELOG.md and package.json files.","title":"Preparing a Pre-Release"},{"location":"contrib/releases/#preparing-a-release","text":"On the release branch, remove the next portion of the version string in package.json . Replace the [Unreleased] header in the change log file , if you have that, with the new version string. Next, git diff the release, branch a release/X.X.X (where X.X.X is your latest release) against master and validate that all changes are covered in the changelog. You can find more instructions on how to maintain a CHANGELOG: here . Also, make sure to add a new link at the bottom of the file that will provide a diff between the last released version and the to-be released version. There's a catch: That link won't be able to work until after the release has been made!","title":"Preparing a Release"},{"location":"contrib/releases/#pr-against-master","text":"Create a pull request against master and have it peer reviewed thoroughly. As all changes should've been reviewed before when they were merged to develop , emphasize on security-related changes and small changes pushed to develop separately.","title":"PR against master"},{"location":"contrib/releases/#merging","text":"Once the integration build has succesfully completed (with or without additional fixes), merge (without squash) the branch into master . This allows master to be comprised of release commits exclusively, so every commit on master correponds to exactly one released (or at least, tagged) version of aepp-sdk, respectively.","title":"Merging"},{"location":"contrib/releases/#build-release-and-tag","text":"Update the local working copy to a local tracking branch of master and update. Optionally, wait for the CI build to finish and execute a last npm run test locally. Important: Because npm publish will use the local files on disk for releasing, perform a full clean and build in order to release to npmjs.com! Cleanup - run git clean -ffdx to completely wipe out your workspace of files not in the repository. This might wipe out files you still need, so consider a seperate clone of the project! Execute npm run prepublishOnly to generate Documentation for the API and the SDK codebase, optionally followed by npm pack and investigate the resulting tarball's contents. This tarball resembles what users will actual download from npmjs.com once the release is completed! Execute npm publish and follow the on-screen instructions Important: If you are releasing a Pre-Release (AKA next ), make sure to tag the release as next using the command npm publish --tag next . At this point, the release should already be in npmjs.com. The final step is to also tag the release on GitHub and push the tag, which requires direct write access . git tag $VERSION git push tag $VERSION Recommendation: Use signed tags using the -s option to increase community's trust in the project!","title":"Build, Release and Tag"},{"location":"contrib/releases/#merging-back-into-develop","text":"At this point, it is important to synchronize develop with any changes that have happened after branching out to the release branch. Create a new branch called realign/X.X.X from master (where X.X.X is your latest release) and open a Pull Request towards develop and resolve conflicts, if needed. This concludes the release process and the development cycle.","title":"Merging Back into develop"},{"location":"examples/node/aecontract/","text":"Simple Sophia Contract Compiler This script demonstrates how to deal with the different phases of compiling Sophia contracts to bytecode, deploying the bytecode to get a callable contract address and ultimately, invoke the deployed contract on the \u00e6ternity blockchain. We'll need the main client module Ae in the Universal flavor from the SDK. const { Universal: Ae, Node } = require('@aeternity/aepp-sdk') const program = require('commander') const fs = require('fs') async function exec (infile, fn, args) { if (!infile || !fn) { program.outputHelp() process.exit(1) } const code = fs.readFileSync(infile, 'utf-8') const node = await Node({ url: program.host }) Most methods in the SDK return Promises , so the recommended way of dealing with subsequent actions is then chaining with a final catch callback. Ae itself is asynchronous as it determines the node's version and rest interface automatically. Only once the Promise is fulfilled, we know we have a working ae client. Please take note Ae is not a constructor but a factory factory, which means it's not invoked with new . contractCompile takes a raw Sophia contract in string form and sends it off to the node for bytecode compilation. This might in the future be done without talking to the node, but requires a bytecode compiler implementation directly in the SDK. Ae({ debug: program.debug, process, nodes: [{ name: 'testNode', instance: node }] }).then(ae => { return ae.contractCompile(code) Invoking deploy on the bytecode object will result in the contract being written to the chain, once the block has been mined. Sophia contracts always have an init method which needs to be invoked, even when the contract's state is unit ( () ). The arguments to init have to be provided at deployment time and will be written to the block as well, together with the contract's bytecode. }).then(bytecode => { console.log(`Obtained bytecode ${bytecode.bytecode}`) return bytecode.deploy({ initState: program.init }) Once the contract has been successfully mined, we can attempt to invoke any public function defined within it. The miner who found the next block will not only be rewarded a fixed amount, but also an amount depending on the amount of gas spend. }).then(deployed => { console.log(`Contract deployed at ${deployed.address}`) return deployed.call(fn, { args: args.join(' ') }) The execution result, if successful, will be an AEVM-encoded result value. Once type decoding will be implemented in the SDK, this value will not be a hexadecimal string, anymore. }).then(value => { console.log(`Execution result: ${value}`) }).catch(e => console.log(e.message)) } Command Line Interface The commander library provides maximum command line parsing convenience. program .version('0.1.0') .arguments('<infile> <function> [args...]') .option('-i, --init [state]', 'Arguments to contructor function') .option('-H, --host [hostname]', 'Node to connect to', 'http://localhost:3013') .option('--debug', 'Switch on debugging') .action(exec) .parse(process.argv)","title":"Simple Sophia Contract Compiler"},{"location":"examples/node/aecontract/#simple-sophia-contract-compiler","text":"This script demonstrates how to deal with the different phases of compiling Sophia contracts to bytecode, deploying the bytecode to get a callable contract address and ultimately, invoke the deployed contract on the \u00e6ternity blockchain. We'll need the main client module Ae in the Universal flavor from the SDK. const { Universal: Ae, Node } = require('@aeternity/aepp-sdk') const program = require('commander') const fs = require('fs') async function exec (infile, fn, args) { if (!infile || !fn) { program.outputHelp() process.exit(1) } const code = fs.readFileSync(infile, 'utf-8') const node = await Node({ url: program.host }) Most methods in the SDK return Promises , so the recommended way of dealing with subsequent actions is then chaining with a final catch callback. Ae itself is asynchronous as it determines the node's version and rest interface automatically. Only once the Promise is fulfilled, we know we have a working ae client. Please take note Ae is not a constructor but a factory factory, which means it's not invoked with new . contractCompile takes a raw Sophia contract in string form and sends it off to the node for bytecode compilation. This might in the future be done without talking to the node, but requires a bytecode compiler implementation directly in the SDK. Ae({ debug: program.debug, process, nodes: [{ name: 'testNode', instance: node }] }).then(ae => { return ae.contractCompile(code) Invoking deploy on the bytecode object will result in the contract being written to the chain, once the block has been mined. Sophia contracts always have an init method which needs to be invoked, even when the contract's state is unit ( () ). The arguments to init have to be provided at deployment time and will be written to the block as well, together with the contract's bytecode. }).then(bytecode => { console.log(`Obtained bytecode ${bytecode.bytecode}`) return bytecode.deploy({ initState: program.init }) Once the contract has been successfully mined, we can attempt to invoke any public function defined within it. The miner who found the next block will not only be rewarded a fixed amount, but also an amount depending on the amount of gas spend. }).then(deployed => { console.log(`Contract deployed at ${deployed.address}`) return deployed.call(fn, { args: args.join(' ') }) The execution result, if successful, will be an AEVM-encoded result value. Once type decoding will be implemented in the SDK, this value will not be a hexadecimal string, anymore. }).then(value => { console.log(`Execution result: ${value}`) }).catch(e => console.log(e.message)) }","title":"Simple Sophia Contract Compiler"},{"location":"examples/node/aecontract/#command-line-interface","text":"The commander library provides maximum command line parsing convenience. program .version('0.1.0') .arguments('<infile> <function> [args...]') .option('-i, --init [state]', 'Arguments to contructor function') .option('-H, --host [hostname]', 'Node to connect to', 'http://localhost:3013') .option('--debug', 'Switch on debugging') .action(exec) .parse(process.argv)","title":"Command Line Interface"},{"location":"examples/node/aecrypto/","text":"Crypto Helper Script This script shows how to use the SDK to generate and decrypt \u00e6ternity compliant key pairs, as well as encode and decode transactions. We'll only load the Crypto module from the SDK to work with keys and transactions. const { Crypto, TxBuilder } = require('@aeternity/aepp-sdk') const program = require('commander') const fs = require('fs') const prompt = require('prompt') const path = require('path') The prompt library provides concealed input of passwords. const promptSchema = { properties: { password: { type: 'string', description: 'Enter your password', hidden: true, required: true, replace: '*', conform: function (value) { return true } } } } Key Extraction (from Node nodes) function extractReadableKeys (dir, options) { const pwd = options.input prompt.start() prompt.get(promptSchema, (_, { password }) => { const key = fs.readFileSync(path.join(pwd, dir, 'sign_key')) const pubKey = fs.readFileSync(path.join(pwd, dir, 'sign_key.pub')) const decrypted = Crypto.decryptPrivateKey(password, key) const privateHex = Buffer.from(decrypted).toString('hex') const decryptedPub = Crypto.decryptPubKey(password, pubKey) console.log(`Private key (hex): ${privateHex}`) console.log(`Public key (base check): ak_${Crypto.encodeBase58Check(decryptedPub)}`) console.log(`Public key (hex): ${decryptedPub.toString('hex')}`) }) } Key Pair Generation function generateKeyPair (name, { output }) { const { publicKey, secretKey } = Crypto.generateKeyPair() const data = [ [path.join(output, name), secretKey], [path.join(output, `${name}.pub`), publicKey] ] data.forEach(([path, data]) => { fs.writeFileSync(path, data) console.log(`Wrote ${path}`) }) } Transaction Signing This function shows how to use a compliant private key to sign an \u00e6ternity transaction and turn it into an RLP-encoded tuple ready for mining function signTx (tx, privKey) { if (!tx.match(/^tx_.+/)) { throw Error('Not a valid transaction') } const binaryKey = (() => { if (program.file) { return fs.readFileSync(program.file) } else if (privKey) { return Buffer.from(privKey, 'hex') } else { throw Error('Must provide either [privkey] or [file]') } })() const decryptedKey = program.password ? Crypto.decryptKey(program.password, binaryKey) : binaryKey Split the base58Check part of the transaction const base58CheckTx = tx.split('_')[1] ... and sign the binary create_contract transaction const binaryTx = Crypto.decodeBase58Check(base58CheckTx) const signature = Crypto.sign(binaryTx, decryptedKey) the signed tx deserializer expects a 4-tuple: const unpackedSignedTx = [ Buffer.from([11]), Buffer.from([1]), [Buffer.from(signature)], binaryTx ] console.log(Crypto.encodeTx(unpackedSignedTx)) } Transaction Deserialization This helper function deserialized the transaction tx and prints the result. function unpackTx (tx) { const deserializedTx = TxBuilder.unpackTx(tx) console.log(JSON.stringify(deserializedTx, undefined, 2)) } Command Line Interface The commander library provides maximum command line parsing convenience. program.version('0.1.0') program .command('decrypt <directory>') .description('Decrypts public and private key to readable formats for testing purposes') .option('-i, --input [directory]', 'Directory where to look for keys', '.') .action(extractReadableKeys) program .command('genkey <keyname>') .description('Generate keypair') .option('-o, --output [directory]', 'Output directory for the keys', '.') .action(generateKeyPair) program .command('sign <tx> [privkey]') .option('-p, --password [password]', 'password of the private key') .option('-f, --file [file]', 'private key file') .action(signTx) program .command('unpack <tx>') .action(unpackTx) program.parse(process.argv) if (program.args.length === 0) program.help()","title":"Crypto Helper Script"},{"location":"examples/node/aecrypto/#crypto-helper-script","text":"This script shows how to use the SDK to generate and decrypt \u00e6ternity compliant key pairs, as well as encode and decode transactions. We'll only load the Crypto module from the SDK to work with keys and transactions. const { Crypto, TxBuilder } = require('@aeternity/aepp-sdk') const program = require('commander') const fs = require('fs') const prompt = require('prompt') const path = require('path') The prompt library provides concealed input of passwords. const promptSchema = { properties: { password: { type: 'string', description: 'Enter your password', hidden: true, required: true, replace: '*', conform: function (value) { return true } } } }","title":"Crypto Helper Script"},{"location":"examples/node/aecrypto/#key-extraction-from-node-nodes","text":"function extractReadableKeys (dir, options) { const pwd = options.input prompt.start() prompt.get(promptSchema, (_, { password }) => { const key = fs.readFileSync(path.join(pwd, dir, 'sign_key')) const pubKey = fs.readFileSync(path.join(pwd, dir, 'sign_key.pub')) const decrypted = Crypto.decryptPrivateKey(password, key) const privateHex = Buffer.from(decrypted).toString('hex') const decryptedPub = Crypto.decryptPubKey(password, pubKey) console.log(`Private key (hex): ${privateHex}`) console.log(`Public key (base check): ak_${Crypto.encodeBase58Check(decryptedPub)}`) console.log(`Public key (hex): ${decryptedPub.toString('hex')}`) }) }","title":"Key Extraction (from Node nodes)"},{"location":"examples/node/aecrypto/#key-pair-generation","text":"function generateKeyPair (name, { output }) { const { publicKey, secretKey } = Crypto.generateKeyPair() const data = [ [path.join(output, name), secretKey], [path.join(output, `${name}.pub`), publicKey] ] data.forEach(([path, data]) => { fs.writeFileSync(path, data) console.log(`Wrote ${path}`) }) }","title":"Key Pair Generation"},{"location":"examples/node/aecrypto/#transaction-signing","text":"This function shows how to use a compliant private key to sign an \u00e6ternity transaction and turn it into an RLP-encoded tuple ready for mining function signTx (tx, privKey) { if (!tx.match(/^tx_.+/)) { throw Error('Not a valid transaction') } const binaryKey = (() => { if (program.file) { return fs.readFileSync(program.file) } else if (privKey) { return Buffer.from(privKey, 'hex') } else { throw Error('Must provide either [privkey] or [file]') } })() const decryptedKey = program.password ? Crypto.decryptKey(program.password, binaryKey) : binaryKey Split the base58Check part of the transaction const base58CheckTx = tx.split('_')[1] ... and sign the binary create_contract transaction const binaryTx = Crypto.decodeBase58Check(base58CheckTx) const signature = Crypto.sign(binaryTx, decryptedKey) the signed tx deserializer expects a 4-tuple: const unpackedSignedTx = [ Buffer.from([11]), Buffer.from([1]), [Buffer.from(signature)], binaryTx ] console.log(Crypto.encodeTx(unpackedSignedTx)) }","title":"Transaction Signing"},{"location":"examples/node/aecrypto/#transaction-deserialization","text":"This helper function deserialized the transaction tx and prints the result. function unpackTx (tx) { const deserializedTx = TxBuilder.unpackTx(tx) console.log(JSON.stringify(deserializedTx, undefined, 2)) }","title":"Transaction Deserialization"},{"location":"examples/node/aecrypto/#command-line-interface","text":"The commander library provides maximum command line parsing convenience. program.version('0.1.0') program .command('decrypt <directory>') .description('Decrypts public and private key to readable formats for testing purposes') .option('-i, --input [directory]', 'Directory where to look for keys', '.') .action(extractReadableKeys) program .command('genkey <keyname>') .description('Generate keypair') .option('-o, --output [directory]', 'Output directory for the keys', '.') .action(generateKeyPair) program .command('sign <tx> [privkey]') .option('-p, --password [password]', 'password of the private key') .option('-f, --file [file]', 'private key file') .action(signTx) program .command('unpack <tx>') .action(unpackTx) program.parse(process.argv) if (program.args.length === 0) program.help()","title":"Command Line Interface"},{"location":"examples/node/aewallet/","text":"Simple AE Token Spending Script This script shows how to use the Wallet module from the SDK to send AE to other addresses. We'll need the main client module Ae in the Universal flavor from the SDK. const { Universal: Ae, Node } = require('@aeternity/aepp-sdk') const program = require('commander') async function spend (receiver, amount, { host, debug }) { This code is relatively simple: We create the Ae client asynchronously and invoke the spend method on it. Passing in process from nodejs will make the implementation grab the key pair from the WALLET_PRIV and WALLET_PUB environment variables, respectively. const node = await Node({ url: host }) Ae({ nodes: [{ name: 'local', instance: node }], debug, process }) .then(ae => ae.spend(parseInt(amount), receiver)) .then(tx => console.log('Transaction mined', tx)) .catch(e => console.log(e.message)) } Command Line Interface The commander library provides maximum command line parsing convenience. program.version('0.1.0') program .command('spend <receiver> <amount>') .option('-H, --host [hostname]', 'Node to connect to', 'http://localhost:3013') .option('--debug', 'Switch on debugging') .action(spend) program.parse(process.argv) if (program.args.length === 0) program.help()","title":"Simple AE Token Spending Script"},{"location":"examples/node/aewallet/#simple-ae-token-spending-script","text":"This script shows how to use the Wallet module from the SDK to send AE to other addresses. We'll need the main client module Ae in the Universal flavor from the SDK. const { Universal: Ae, Node } = require('@aeternity/aepp-sdk') const program = require('commander') async function spend (receiver, amount, { host, debug }) { This code is relatively simple: We create the Ae client asynchronously and invoke the spend method on it. Passing in process from nodejs will make the implementation grab the key pair from the WALLET_PRIV and WALLET_PUB environment variables, respectively. const node = await Node({ url: host }) Ae({ nodes: [{ name: 'local', instance: node }], debug, process }) .then(ae => ae.spend(parseInt(amount), receiver)) .then(tx => console.log('Transaction mined', tx)) .catch(e => console.log(e.message)) }","title":"Simple AE Token Spending Script"},{"location":"examples/node/aewallet/#command-line-interface","text":"The commander library provides maximum command line parsing convenience. program.version('0.1.0') program .command('spend <receiver> <amount>') .option('-H, --host [hostname]', 'Node to connect to', 'http://localhost:3013') .option('--debug', 'Switch on debugging') .action(spend) program.parse(process.argv) if (program.args.length === 0) program.help()","title":"Command Line Interface"},{"location":"guides/aens-usage/","text":"AENS Usage This guide describes the basic operations on AENS name using Aeternity JS SDK Main Flow Pre-claim name Broadcast pre-claim transaction with random salt . const sdkInstance = await Universal({ ... }) // Init Universal instance const name = 'sometube.chain' const preclaim = await sdkInstance.aensPreclaim(name, { ttl, fee, nonce }) // { // ...transactionResult, // salt, // commitmentId // } After transaction is included, you have 300 blocks to broadcast claim transaction with the same salt and it should be signed with the same private key as pre-claim . Claim name Broadcast claim transaction which include the salt of pre-claim . Here, we have two possible scenarios: - Name length <= 12: start name auction - Name length > 12: name is claimed without auction const salt = preclaim.salt // salt from pre-claim transaction const options = { ttl, fee, nonce, nameFee, onAccount } // optional: overriding default // In case of starting the auction `nameFee` will be the starting bid // The minimum `nameFee` will be generated by sdk if is not provided in options const claim = await sdkInstance.aensClaim(name, salt, options) // In case of auction you may need to place a bid on already started auction // Currently sdk can't generate the `bid fee` automatically // as it's depend on last bid import { computeBidFee, computeAuctionEndBlock } from '@aeternity/aepp-sdk/es/tx/builder/helpers' const startFee = claim.nameFee // start bid const increment = 0.05 // 5% const nameFee = computeBidFee(name, startFee, increment) const bid = await sdkInstance.aensBid(name, nameFee, options) console.log(`BID STARTED AT ${bid.blockHeight} WILL END AT ${computeAuctionEndBlock(name, bid.blockHeight)}`) Update name Using aens-update transaction you can update the name pointers and extend name ttl . const options = { ttl, fee, nonce, nameTtl, onAccount } // optional: overriding default const pointersArray = ['ak_asd23dasdas...,', 'ct_asdf34fasdasd...'] const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensUpdate(name, pointersArray, options) // or await nameObject.update(pointersArray, options) // Extend pointers of name entry // Let's assume that we have name entry with one pointers: ['ak_2314234'] // Only one entry for each type is allowed // that mean that merging will overwrite pointers with the same type await sdkInstance.aensUpdate(name, pointersArray, { extendPointers: true }) Transfer Transfer the name ownership to another account . const options = { ttl, fee, nonce, onAccount } const recipientPub = 'ak_asd23dasdas...' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensTransfer(name, recipientPub, options) // or await nameObject.transfer(recipientPub, options) Revoke name const options = { ttl, fee, nonce, onAccount } const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensRevoke(name, options) // or await nameObject.revoke(options) Related links AENS protocol AENS SDK API Docs","title":"AENS Usage"},{"location":"guides/aens-usage/#aens-usage","text":"This guide describes the basic operations on AENS name using Aeternity JS SDK","title":"AENS Usage"},{"location":"guides/aens-usage/#main-flow","text":"","title":"Main Flow"},{"location":"guides/aens-usage/#pre-claim-name","text":"Broadcast pre-claim transaction with random salt . const sdkInstance = await Universal({ ... }) // Init Universal instance const name = 'sometube.chain' const preclaim = await sdkInstance.aensPreclaim(name, { ttl, fee, nonce }) // { // ...transactionResult, // salt, // commitmentId // } After transaction is included, you have 300 blocks to broadcast claim transaction with the same salt and it should be signed with the same private key as pre-claim .","title":"Pre-claim name"},{"location":"guides/aens-usage/#claim-name","text":"Broadcast claim transaction which include the salt of pre-claim . Here, we have two possible scenarios: - Name length <= 12: start name auction - Name length > 12: name is claimed without auction const salt = preclaim.salt // salt from pre-claim transaction const options = { ttl, fee, nonce, nameFee, onAccount } // optional: overriding default // In case of starting the auction `nameFee` will be the starting bid // The minimum `nameFee` will be generated by sdk if is not provided in options const claim = await sdkInstance.aensClaim(name, salt, options) // In case of auction you may need to place a bid on already started auction // Currently sdk can't generate the `bid fee` automatically // as it's depend on last bid import { computeBidFee, computeAuctionEndBlock } from '@aeternity/aepp-sdk/es/tx/builder/helpers' const startFee = claim.nameFee // start bid const increment = 0.05 // 5% const nameFee = computeBidFee(name, startFee, increment) const bid = await sdkInstance.aensBid(name, nameFee, options) console.log(`BID STARTED AT ${bid.blockHeight} WILL END AT ${computeAuctionEndBlock(name, bid.blockHeight)}`)","title":"Claim name"},{"location":"guides/aens-usage/#update-name","text":"Using aens-update transaction you can update the name pointers and extend name ttl . const options = { ttl, fee, nonce, nameTtl, onAccount } // optional: overriding default const pointersArray = ['ak_asd23dasdas...,', 'ct_asdf34fasdasd...'] const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensUpdate(name, pointersArray, options) // or await nameObject.update(pointersArray, options) // Extend pointers of name entry // Let's assume that we have name entry with one pointers: ['ak_2314234'] // Only one entry for each type is allowed // that mean that merging will overwrite pointers with the same type await sdkInstance.aensUpdate(name, pointersArray, { extendPointers: true })","title":"Update name"},{"location":"guides/aens-usage/#transfer","text":"Transfer the name ownership to another account . const options = { ttl, fee, nonce, onAccount } const recipientPub = 'ak_asd23dasdas...' const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensTransfer(name, recipientPub, options) // or await nameObject.transfer(recipientPub, options)","title":"Transfer"},{"location":"guides/aens-usage/#revoke-name","text":"const options = { ttl, fee, nonce, onAccount } const nameObject = await sdkInstance.aensQuery(name) await sdkInstance.aensRevoke(name, options) // or await nameObject.revoke(options)","title":"Revoke name"},{"location":"guides/aens-usage/#related-links","text":"AENS protocol AENS SDK API Docs","title":"Related links"},{"location":"guides/contract-aci-usage/","text":"Contract Usage To have ability to interact with Aeternity Smart Contracts you need: - Compiler - Node - SDK Account Management const { Universal: Ae, MemoryAccount, Node } = require('@aeternity/aepp-SDK') // same with async const main = async () => { const node = await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL }) const acc = MemoryAccount({ keypair: KEYPAIR }) const SDKInstance = await Ae({ nodes: [ { name: 'testNet', instance: node }, ], compilerUrl: 'COMPILER_URL', accounts: [acc], address: KEYPAIR.publicKey }) const height = await client.height() console.log('Current Block Height', height) // Contract ACI. First of all we need to create a contract object // contractAddress is optional const contractObject = await SDKInstance.getContractInstance(CONTRACT_SOURCE, { contractAddress }) // Create contract object for contract which have external dependencies const contractObject = await SDKInstance.getContractInstance(CONTRACT_SOURCE, { contractAddress, filesystem }) // In this step SDK will call the compiler and get the ACI for provided source code // base on ACI SDK will generate the `js functions` for each of your SC method // which you will find in `contractObject.methods` object Deploying Smart Contract Now we want to deploy our SC with init function like: stateful function init(n: int) : state => { count: n } ```js const count = 1 await contractObject.deploy([count]) // or await contractObject.methods.init(count) // Now our SC is deployed and we can find a deploy information console.log(contractObject.deployInfo) // { owner, transaction, address, createdAt, result, rawTx } ``` Call Smart Contract methods Simple call Now we can make call to one of our SC function. Let's assume that we have a function like: function sum (a: int, b: int) : int = a + b const callResult = await contractObject.methods.sum(1 , 2) // or const callResult = await contractObject.call('sum', [1, 2]) // callResult will contain all info related to contract call transaction console.log(callResult.decodedRes) // 3 How it works inside Let's talk more about auto-generated function of contractObject await contractObject.methods.sum(1 , 2) Here the SDK will decide: - If the function is stateful (change SC state) -> SDK will prepare and broadcast a contract call transaction - If function is not stateful (state is not changed) -> SDK will prepare contract call transaction and dry-run it Manual control Also you can manually control this behaviour using the send and get methods: // Sign and Broadcast transaction to the chain const callResult = await contractObject.methods.sum.send(1 , 2) // Dry-run transaction // Make sure that you provide the node `internalUrl` which is used for `dry-run` node API endpoint const callResult = await contractObject.methods.sum.get(1 , 2) Overriding default transaction params Make contract call and overwrite transaction props passing it as option: fee, amount, ttl, ... Auto-generate functions (under methods ) will have the same arguments length and order as we had in our SC source, the last arguments is always options object if options is not provide SDK will use the default options which you can find under the contractObject.options ```js const callResult = await contractObject.methods.sum.get(1 , 2, { amount: 1000, fee: 3232, gas: 123}) // or const callResult = await contractObject.call('sum', [1 , 2], { amount: 1000, fee: 3232, gas: 123}) ### Call contract using specific account You can use `onAccount` option for that which can one of: - `keypair` object({ secretKey, publicKey }) - `MemoryAccount` instance - account `public key` ```js // account must be included in SDK or you can always add it using account management API of SDK // await SDKInstance.addAccount(MemoryAccount({ keypair })) const options = { onAccount: keypair || MemoryAccount || publicKey } const callResult = await contractObject.methods.sum.get(1 , 2, options)","title":"Contract Usage"},{"location":"guides/contract-aci-usage/#contract-usage","text":"To have ability to interact with Aeternity Smart Contracts you need: - Compiler - Node - SDK","title":"Contract Usage"},{"location":"guides/contract-aci-usage/#account-management","text":"const { Universal: Ae, MemoryAccount, Node } = require('@aeternity/aepp-SDK') // same with async const main = async () => { const node = await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL }) const acc = MemoryAccount({ keypair: KEYPAIR }) const SDKInstance = await Ae({ nodes: [ { name: 'testNet', instance: node }, ], compilerUrl: 'COMPILER_URL', accounts: [acc], address: KEYPAIR.publicKey }) const height = await client.height() console.log('Current Block Height', height) // Contract ACI. First of all we need to create a contract object // contractAddress is optional const contractObject = await SDKInstance.getContractInstance(CONTRACT_SOURCE, { contractAddress }) // Create contract object for contract which have external dependencies const contractObject = await SDKInstance.getContractInstance(CONTRACT_SOURCE, { contractAddress, filesystem }) // In this step SDK will call the compiler and get the ACI for provided source code // base on ACI SDK will generate the `js functions` for each of your SC method // which you will find in `contractObject.methods` object","title":"Account Management"},{"location":"guides/contract-aci-usage/#deploying-smart-contract","text":"Now we want to deploy our SC with init function like: stateful function init(n: int) : state => { count: n } ```js const count = 1 await contractObject.deploy([count]) // or await contractObject.methods.init(count) // Now our SC is deployed and we can find a deploy information console.log(contractObject.deployInfo) // { owner, transaction, address, createdAt, result, rawTx } ```","title":"Deploying Smart Contract"},{"location":"guides/contract-aci-usage/#call-smart-contract-methods","text":"","title":"Call Smart Contract methods"},{"location":"guides/contract-aci-usage/#simple-call","text":"Now we can make call to one of our SC function. Let's assume that we have a function like: function sum (a: int, b: int) : int = a + b const callResult = await contractObject.methods.sum(1 , 2) // or const callResult = await contractObject.call('sum', [1, 2]) // callResult will contain all info related to contract call transaction console.log(callResult.decodedRes) // 3","title":"Simple call"},{"location":"guides/contract-aci-usage/#how-it-works-inside","text":"Let's talk more about auto-generated function of contractObject await contractObject.methods.sum(1 , 2) Here the SDK will decide: - If the function is stateful (change SC state) -> SDK will prepare and broadcast a contract call transaction - If function is not stateful (state is not changed) -> SDK will prepare contract call transaction and dry-run it","title":"How it works inside"},{"location":"guides/contract-aci-usage/#manual-control","text":"Also you can manually control this behaviour using the send and get methods: // Sign and Broadcast transaction to the chain const callResult = await contractObject.methods.sum.send(1 , 2) // Dry-run transaction // Make sure that you provide the node `internalUrl` which is used for `dry-run` node API endpoint const callResult = await contractObject.methods.sum.get(1 , 2)","title":"Manual control"},{"location":"guides/contract-aci-usage/#overriding-default-transaction-params","text":"Make contract call and overwrite transaction props passing it as option: fee, amount, ttl, ... Auto-generate functions (under methods ) will have the same arguments length and order as we had in our SC source, the last arguments is always options object if options is not provide SDK will use the default options which you can find under the contractObject.options ```js const callResult = await contractObject.methods.sum.get(1 , 2, { amount: 1000, fee: 3232, gas: 123}) // or const callResult = await contractObject.call('sum', [1 , 2], { amount: 1000, fee: 3232, gas: 123}) ### Call contract using specific account You can use `onAccount` option for that which can one of: - `keypair` object({ secretKey, publicKey }) - `MemoryAccount` instance - account `public key` ```js // account must be included in SDK or you can always add it using account management API of SDK // await SDKInstance.addAccount(MemoryAccount({ keypair })) const options = { onAccount: keypair || MemoryAccount || publicKey } const callResult = await contractObject.methods.sum.get(1 , 2, options)","title":"Overriding default transaction params"},{"location":"guides/contract-events/","text":"Contract Events This guide describes the usage of Sophia Events using Aeternity JS SDK Smart Contract contract EventExample = type event = TheFirstEvent(int) | AnotherEvent(bool, int) stateful entrypoint emitEvents () => Chain.emit(TheFirstEvent(42)) Chain.emit(AnotherEvent(\"This is not indexed\", Contract.address)) SDK usage Init SDK ``js import { Universal, Node, MemoryAccount } from '@aeternity/aepp-sdk/es' const eventContract = SOURCE_HERE` const node = await Node({ ... }) const account = MemoryAccount({ keypair }) const initParams = { accounts: [account], nodes: [{ name: 'test', instance: node }] } const sdkInstance = await Universal({ ...initParams }) const contractIns = await sdkInstance.getContractInstance(eventContract) - Decode using ACI js // Auto decode of events on contract call const callRes = await contractIns.methods.emitEvents() // decode of events using contract instance const decodedUsingInstance = contractIns.decodeEvents('emitEvents', callRes.result.log) // decode of events using contract instance ACI methods const decodedUsingInstanceMethods = contractIns.methods.emitEvents.decodeEvents(callRes.result.log) // callRes.decodedEvents === decodedUsingInstance === decodedUsingInstanceMethods console.log(callRes.decodedEvents || decodedUsingInstance || decodedUsingInstanceMethods) / [ { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_VGhpcyBpcyBub3QgaW5kZXhlZK+w140=', topics: [ '101640830366340000167918459210098337687948756568954742276612796897811614700269', '21724616073664889730503604151713289093967432540957029082538744539361158114576' ], name: 'AnotherEvent', decoded: [ 'This is not indexed', 'N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM' ] }, { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_Xfbg4g==', topics: [ '25381774165057387707802602748622431964055296361151037811644748771109370239835', 42 ], name: 'TheFirstEvent', decoded: [ '42' ] } ] / - Decode without ACI js import { decodeEvents, SOPHIA_TYPES } from '@aeternity/aepp-sdk/es/contract/aci/transformation' const txHash = 'tx_asdad2d23...' const tx = await sdkInstance.tx(txHash) const eventsSchema = [ { name: 'TheFirstEvent', types: [SOPHIA_TYPES.int] }, { name: 'AnotherEvent', types: [SOPHIA_TYPES.string, SOPHIA_TYPES.address] }, ] const decodedEvents = decodeEvents(tx.log, { schema: eventsSchema }) console.log(decodedEvents) / [ { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_VGhpcyBpcyBub3QgaW5kZXhlZK+w140=', topics: [ '101640830366340000167918459210098337687948756568954742276612796897811614700269', '21724616073664889730503604151713289093967432540957029082538744539361158114576' ], name: 'AnotherEvent', decoded: [ 'This is not indexed', 'N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM' ] }, { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_Xfbg4g==', topics: [ '25381774165057387707802602748622431964055296361151037811644748771109370239835', 42 ], name: 'TheFirstEvent', decoded: [ '42' ] } ] / ``` Related Link Sophia Events Sophia Events Explained","title":"Contract Events"},{"location":"guides/contract-events/#contract-events","text":"This guide describes the usage of Sophia Events using Aeternity JS SDK","title":"Contract Events"},{"location":"guides/contract-events/#smart-contract","text":"contract EventExample = type event = TheFirstEvent(int) | AnotherEvent(bool, int) stateful entrypoint emitEvents () => Chain.emit(TheFirstEvent(42)) Chain.emit(AnotherEvent(\"This is not indexed\", Contract.address))","title":"Smart Contract"},{"location":"guides/contract-events/#sdk-usage","text":"Init SDK ``js import { Universal, Node, MemoryAccount } from '@aeternity/aepp-sdk/es' const eventContract = SOURCE_HERE` const node = await Node({ ... }) const account = MemoryAccount({ keypair }) const initParams = { accounts: [account], nodes: [{ name: 'test', instance: node }] } const sdkInstance = await Universal({ ...initParams }) const contractIns = await sdkInstance.getContractInstance(eventContract) - Decode using ACI js // Auto decode of events on contract call const callRes = await contractIns.methods.emitEvents() // decode of events using contract instance const decodedUsingInstance = contractIns.decodeEvents('emitEvents', callRes.result.log) // decode of events using contract instance ACI methods const decodedUsingInstanceMethods = contractIns.methods.emitEvents.decodeEvents(callRes.result.log) // callRes.decodedEvents === decodedUsingInstance === decodedUsingInstanceMethods console.log(callRes.decodedEvents || decodedUsingInstance || decodedUsingInstanceMethods) / [ { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_VGhpcyBpcyBub3QgaW5kZXhlZK+w140=', topics: [ '101640830366340000167918459210098337687948756568954742276612796897811614700269', '21724616073664889730503604151713289093967432540957029082538744539361158114576' ], name: 'AnotherEvent', decoded: [ 'This is not indexed', 'N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM' ] }, { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_Xfbg4g==', topics: [ '25381774165057387707802602748622431964055296361151037811644748771109370239835', 42 ], name: 'TheFirstEvent', decoded: [ '42' ] } ] / - Decode without ACI js import { decodeEvents, SOPHIA_TYPES } from '@aeternity/aepp-sdk/es/contract/aci/transformation' const txHash = 'tx_asdad2d23...' const tx = await sdkInstance.tx(txHash) const eventsSchema = [ { name: 'TheFirstEvent', types: [SOPHIA_TYPES.int] }, { name: 'AnotherEvent', types: [SOPHIA_TYPES.string, SOPHIA_TYPES.address] }, ] const decodedEvents = decodeEvents(tx.log, { schema: eventsSchema }) console.log(decodedEvents) / [ { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_VGhpcyBpcyBub3QgaW5kZXhlZK+w140=', topics: [ '101640830366340000167918459210098337687948756568954742276612796897811614700269', '21724616073664889730503604151713289093967432540957029082538744539361158114576' ], name: 'AnotherEvent', decoded: [ 'This is not indexed', 'N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM' ] }, { address: 'ct_N9s65ZMz9SUUKx2HDLCtxVNpEYrzzmYEuESdJwmbEsAo5TzxM', data: 'cb_Xfbg4g==', topics: [ '25381774165057387707802602748622431964055296361151037811644748771109370239835', 42 ], name: 'TheFirstEvent', decoded: [ '42' ] } ] / ```","title":"SDK usage"},{"location":"guides/contract-events/#related-link","text":"Sophia Events Sophia Events Explained","title":"Related Link"},{"location":"guides/delegate-signature-to-contract/","text":"Delegate Signature to Contract The Sophia language for smart contracts allow to delegate the transaction execution to a contract by providing delegation signatures. Delegate signatures for AENS The following code snippet shows how to generate signatures for name transactions delegation to a contract import Universal from '@aeternity/aepp-sdk/es/ae/universal' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' import * as Crypto from '@aeternity/aepp-sdk/es/utils/crypto' // Init account const keypair = Crypto.generateKeyPair() const account = MemoryAccount({ keypair }) // Contract address const contractId = 'ct_asd2ks...' // Init sdk const sdkInstance = await Universal({ accounts: [account] }) // An example name const name = 'example.chain' // option can be `{ onAccount: String | KeypairObject | MemoryAccount }` // name preclaim signature delegation const sig = sdkInstance.delegateNamePreclaimSignature(contractId, option) // name claim signature delegation const sig = sdkInstance.delegateNameClaimSignature(contractId, name, option) // name transfer signature delegation const sig = sdkInstance.delegateNameTransferSignature(contractId, name, option) // name revoke signature delegation const sig = sdkInstance.delegateNameRevokeSignature(contractId, name, option)","title":"Delegate Signature to Contract"},{"location":"guides/delegate-signature-to-contract/#delegate-signature-to-contract","text":"The Sophia language for smart contracts allow to delegate the transaction execution to a contract by providing delegation signatures.","title":"Delegate Signature to Contract"},{"location":"guides/delegate-signature-to-contract/#delegate-signatures-for-aens","text":"The following code snippet shows how to generate signatures for name transactions delegation to a contract import Universal from '@aeternity/aepp-sdk/es/ae/universal' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' import * as Crypto from '@aeternity/aepp-sdk/es/utils/crypto' // Init account const keypair = Crypto.generateKeyPair() const account = MemoryAccount({ keypair }) // Contract address const contractId = 'ct_asd2ks...' // Init sdk const sdkInstance = await Universal({ accounts: [account] }) // An example name const name = 'example.chain' // option can be `{ onAccount: String | KeypairObject | MemoryAccount }` // name preclaim signature delegation const sig = sdkInstance.delegateNamePreclaimSignature(contractId, option) // name claim signature delegation const sig = sdkInstance.delegateNameClaimSignature(contractId, name, option) // name transfer signature delegation const sig = sdkInstance.delegateNameTransferSignature(contractId, name, option) // name revoke signature delegation const sig = sdkInstance.delegateNameRevokeSignature(contractId, name, option)","title":"Delegate signatures for AENS"},{"location":"guides/how-to-build-aepp-using-new-wallet-api/","text":"How to build an Aepp using new Wallet API This guide describing the process of building Aepp using the new Wallet<->Aepp integration API The full example of implementation you can find here: AEPP example First we need to initialize our Aepp stamp import { RpcAepp } from '@aeternity/aepp-sdk/es' // Open iframe with Wallet if run in top window // window !== window.parent || await this.getReverseWindow() this.client = await RpcAepp({ name: 'AEPP', nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: COMPILER_URL, // call-back for update network notification onNetworkChange (params) { if (this.getNetworkId() !== params.networkId) alert(`Connected network ${this.getNetworkId()} is not supported with wallet network ${params.networkId}`) }, // call-back for update address notification onAddressChange: async (addresses) => { this.pub = await this.client.address() this.balance = await this.client.balance(this.pub).catch(e => '0') this.addressResponse = await errorAsField(this.client.address()) }, // call-back for update address notification onDisconnect (msg) { } }) // Start looking for wallets await this.scanForWallets() // Start looking for new wallets Then we need to start looking for available waellets import WalletDetector from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector' async function scanForWallets () { // call-back function for new wallet event const handleWallets = async function ({ wallets, newWallet }) { newWallet = newWallet || Object.values(wallets)[0] // ask if you want to connect if (confirm(`Do you want to connect to wallet ${newWallet.name}`)) { // Stop scanning wallets this.detector.stopScan() // Connect to wallet await this.connectToWallet(newWallet) } } // Create connection object for WalletDetector const scannerConnection = await BrowserWindowMessageConnection({ connectionInfo: { id: 'spy' } }) // Initialize WalletDetector this.detector = await WalletDetector({ connection: scannerConnection }) // Start scanning this.detector.scan(handleWallets.bind(this)) } The last step is to connect to the Waellet async function connectToWallet (wallet) { // Connect to the wallet using wallet connection object // At this line sdk will send connection request to the wallet and waiting for response await this.client.connectToWallet(await wallet.getConnection()) // After connection established we can subscribe for accounts this.accounts = await this.client.subscribeAddress('subscribe', 'connected') // Now we have list of available account and we can get the selected account just using usual SDK interface this.selectedAccountAddress = await this.client.address() // In `client.rpcClient` you can find all information regarding to connected waellet this.walletName = this.client.rpcClient.info.name }","title":"Wallet Api"},{"location":"guides/how-to-build-aepp-using-new-wallet-api/#how-to-build-an-aepp-using-new-wallet-api","text":"This guide describing the process of building Aepp using the new Wallet<->Aepp integration API The full example of implementation you can find here: AEPP example","title":"How to build an Aepp using new Wallet API"},{"location":"guides/how-to-build-aepp-using-new-wallet-api/#first-we-need-to-initialize-our-aepp-stamp","text":"import { RpcAepp } from '@aeternity/aepp-sdk/es' // Open iframe with Wallet if run in top window // window !== window.parent || await this.getReverseWindow() this.client = await RpcAepp({ name: 'AEPP', nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: COMPILER_URL, // call-back for update network notification onNetworkChange (params) { if (this.getNetworkId() !== params.networkId) alert(`Connected network ${this.getNetworkId()} is not supported with wallet network ${params.networkId}`) }, // call-back for update address notification onAddressChange: async (addresses) => { this.pub = await this.client.address() this.balance = await this.client.balance(this.pub).catch(e => '0') this.addressResponse = await errorAsField(this.client.address()) }, // call-back for update address notification onDisconnect (msg) { } }) // Start looking for wallets await this.scanForWallets() // Start looking for new wallets","title":"First we need to initialize our Aepp stamp"},{"location":"guides/how-to-build-aepp-using-new-wallet-api/#then-we-need-to-start-looking-for-available-waellets","text":"import WalletDetector from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/wallet-detector' async function scanForWallets () { // call-back function for new wallet event const handleWallets = async function ({ wallets, newWallet }) { newWallet = newWallet || Object.values(wallets)[0] // ask if you want to connect if (confirm(`Do you want to connect to wallet ${newWallet.name}`)) { // Stop scanning wallets this.detector.stopScan() // Connect to wallet await this.connectToWallet(newWallet) } } // Create connection object for WalletDetector const scannerConnection = await BrowserWindowMessageConnection({ connectionInfo: { id: 'spy' } }) // Initialize WalletDetector this.detector = await WalletDetector({ connection: scannerConnection }) // Start scanning this.detector.scan(handleWallets.bind(this)) }","title":"Then we need to start looking for available waellets"},{"location":"guides/how-to-build-aepp-using-new-wallet-api/#the-last-step-is-to-connect-to-the-waellet","text":"async function connectToWallet (wallet) { // Connect to the wallet using wallet connection object // At this line sdk will send connection request to the wallet and waiting for response await this.client.connectToWallet(await wallet.getConnection()) // After connection established we can subscribe for accounts this.accounts = await this.client.subscribeAddress('subscribe', 'connected') // Now we have list of available account and we can get the selected account just using usual SDK interface this.selectedAccountAddress = await this.client.address() // In `client.rpcClient` you can find all information regarding to connected waellet this.walletName = this.client.rpcClient.info.name }","title":"The last step is to connect to the Waellet"},{"location":"guides/how-to-build-an-wallet-app-or-extension/","text":"How to build a wallet This guide describing the process of building Waellet using the new Wallet<->Aepp integration API The full example of implementation you can find here: - Web Waellet - Extension Waellet First we need to initialize our Aepp stamp Extension wallet First we need to create an bridge between our extension and page This can be done by subscribing for window message event from the page and redirecting them using chrome|firefox runtime connection to the extension and back // inject.js file import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime' import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message' import { getBrowserAPI } from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/helpers' import { MESSAGE_DIRECTION } from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/schema' import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge' const readyStateCheckInterval = setInterval(function () { // Wait until load if (document.readyState === 'complete') { clearInterval(readyStateCheckInterval) // Create runtime connection with extension const port = getBrowserAPI().runtime.connect() // Create connection object for extension using `runtime` connection const extConnection = BrowserRuntimeConnection({ connectionInfo: { description: 'Content Script to Extension connection', origin: window.origin }, port }) // Create connection object for page using `window.postMessage` const pageConnection = BrowserWindowMessageConnection({ connectionInfo: { description: 'Content Script to Page connection', origin: window.origin }, origin: window.origin, sendDirection: MESSAGE_DIRECTION.to_aepp, receiveDirection: MESSAGE_DIRECTION.to_waellet }) // Init ContentScriptBridge stamp const bridge = ContentScriptBridge({ pageConnection, extConnection }) // Run. Start redirecting messages between extension and page bridge.run() } }, 10) Then we need to initialize Waellet stamp in our extension and subscribe for new runtime connection's After connection will be established we can start to send announcePresence message to the page to let Aepp know about Waellet // background.js import '../img/icon-128.png' import '../img/icon-34.png' import Node from '@aeternity/aepp-sdk/es/node' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' import { RpcWallet } from '@aeternity/aepp-sdk/es/ae/wallet' import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime' import { generateKeyPair } from '@aeternity/aepp-sdk/es/utils/crypto' // const account = MemoryAccount({ // keypair: { // secretKey: 'YOUR_PRIV', // publicKey: 'YOUR_PUB' // } // }) const account2 = MemoryAccount({ keypair: generateKeyPair() }) // Init accounts const accounts = [ // account, account2 ] const NODE_URL = 'https://testnet.aeternity.io' const NODE_INTERNAL_URL = 'https://testnet.aeternity.io' const COMPILER_URL = 'https://compiler.aepps.com' // Init extension stamp from sdk RpcWallet({ nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: COMPILER_URL, name: 'ExtensionWallet', accounts, // Call-back for new connection request onConnection (aepp, action) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to connect`)) { action.accept() } else { action.deny() } }, // Call-back for disconnect event onDisconnect (msg, client) { client.disconnect() }, // Call-back for account subscription request onSubscription (aepp, action) { if (confirm(`Aepp ${aepp.info.name} with id ${aepp.id} want to subscribe for accounts`)) { // You are able to overwrite access to accounts for specific AEPP // Manually prepare and pass as first argument of `accept` function, object with accounts // Object should contain current and connected accounts // Accounts can be stored outside of sdk(also combined some of accounts store in SDK some of account outside) // action.accept({ // accounts: { // current: { 'ak_bla23dfas...': {...meta-data} }, // Current account // connected: { // Connected accounts // 'ak_1asdasd...': {}, // 'ak_1asdasdf23...': {} // } // } // }) action.accept() } else { action.deny() } }, // Call-back for sign request onSign (aepp, { params, accept, deny, txObject, onAccount }) { if (confirm(`Aepp ${aepp.info.name} with id ${aepp.id} want to sign tx ${action.params.tx}`)) { // Here we can provide account for signing if it's not stored inside the SDK instance // To do that you need to create MemoryAccount instance and provide it as second argument of accept function // if (isInStorage(params.onAccount)) { // First argument is encode transaction which will be using instead of one from AEPP (if provided) // Then this signing request will be signed using the provide MemoryAccount // If you do not provide account manually SDK will try to find it inside the instance, else throw error // action(null, { onAccount: MemoryAccount({ keypair }) }) // } accept() } else { deny() } }, // Call-back get accounts request onAskAccounts (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) { accept() } else { deny() } } }).then(wallet => { // Subscribe for `runtime` connection from Content Script chrome.runtime.onConnect.addListener(async function (port) { // create BrowserRuntimeConnection const connection = await BrowserRuntimeConnection({ connectionInfo: { id: port.sender.frameId }, port }) // add rpc client to wallet wallet.addRpcClient(connection) // Share wallet details. Inform aepp about wallet wallet.shareWalletInfo(port.postMessage.bind(port)) setTimeout(() => wallet.shareWalletInfo(port.postMessage.bind(port)), 3000) }) }).catch(err => { console.error(err) }) Web Waellet (Iframe/Reverse Iframe) This works the same as extension but without Content Script bridge in between import { MemoryAccount, RpcWallet, Node } from '@aeternity/aepp-sdk/es' import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message' this.client = await RpcWallet({ nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: 'COMPILER_URL', // optional if your wallet don't support contract and all what requred compiler accounts: [MemoryAccount({ keypair: { secretKey: 'YOUR_PRIVATE_KEY', publicKey: 'YOUR_PUBLIC_KEY' } })], address: 'PUBLIC_KEY_OF_CURRENT_ACCOUNT', // default: first account in `accounts` array, name: 'Wallet', // Your wallet name, // call-back for connection request async onConnection (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to connect`)) { accept() } else { deny() } }, // call-back for subscription request async onSubscription (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to subscribe address`)) { // You are able to overwrite access to accounts for specific AEPP // Manually prepare and pass as first argument of `accept` function, object with accounts // Object should contain current and connected accounts // Accounts can be stored outside of sdk(also combined some of accounts store in SDK some of account outside) // action.accept({ // accounts: { // current: { 'ak_bla23dfas...': {...meta-data} }, // Current account // connected: { // Connected accounts // 'ak_1asdasd...': {}, // 'ak_1asdasdf23...': {} // } // } // }) accept() } else { deny() } }, // call-back for sign request async onSign (aepp, { accept, deny, params }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to ${params.returnSigned ? 'sign' : 'sign and broadcast'} ${JSON.stringify(params.tx)}`)) { // Here we can provide account for signing if it's not stored inside the SDK instance // To do that you need to create MemoryAccount instance and provide it as second argument of accept function // if (isInStorage(params.onAccount)) { // First argument is encode transaction which will be using instead of one from AEPP (if provided) // Then this signing request will be signed using the provide MemoryAccount // If you do not provide account manually SDK will try to find it inside the instance, else throw error // action(null, { onAccount: MemoryAccount({ keypair }) }) // } accept() } else { deny() } }, // call-back for get accounts request onAskAccounts (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) { accept() } else { deny() } }, // call-back for disconnect event onDisconnect (message, client) { this.shareWalletInfo(connection.sendMessage.bind(connection)) } }) // Get target. Here we will check if wallet app running in frame or in top window // Get target depending on approach iFrame/Reverse Iframe const target = !this.runningInFrame ? window.frames.aepp : window.parent // Create a connection const connection = await BrowserWindowMessageConnection({ target }) // Add RPC client to wallet this.client.addRpcClient(connection) // Notifiy AEPP about waellet by sending the `announcePresence` message this.shareWalletInfo(connection.sendMessage.bind(connection))","title":"Building Wallets"},{"location":"guides/how-to-build-an-wallet-app-or-extension/#how-to-build-a-wallet","text":"This guide describing the process of building Waellet using the new Wallet<->Aepp integration API The full example of implementation you can find here: - Web Waellet - Extension Waellet","title":"How to build a wallet"},{"location":"guides/how-to-build-an-wallet-app-or-extension/#first-we-need-to-initialize-our-aepp-stamp","text":"","title":"First we need to initialize our Aepp stamp"},{"location":"guides/how-to-build-an-wallet-app-or-extension/#extension-wallet","text":"First we need to create an bridge between our extension and page This can be done by subscribing for window message event from the page and redirecting them using chrome|firefox runtime connection to the extension and back // inject.js file import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime' import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message' import { getBrowserAPI } from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/helpers' import { MESSAGE_DIRECTION } from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/schema' import ContentScriptBridge from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/content-script-bridge' const readyStateCheckInterval = setInterval(function () { // Wait until load if (document.readyState === 'complete') { clearInterval(readyStateCheckInterval) // Create runtime connection with extension const port = getBrowserAPI().runtime.connect() // Create connection object for extension using `runtime` connection const extConnection = BrowserRuntimeConnection({ connectionInfo: { description: 'Content Script to Extension connection', origin: window.origin }, port }) // Create connection object for page using `window.postMessage` const pageConnection = BrowserWindowMessageConnection({ connectionInfo: { description: 'Content Script to Page connection', origin: window.origin }, origin: window.origin, sendDirection: MESSAGE_DIRECTION.to_aepp, receiveDirection: MESSAGE_DIRECTION.to_waellet }) // Init ContentScriptBridge stamp const bridge = ContentScriptBridge({ pageConnection, extConnection }) // Run. Start redirecting messages between extension and page bridge.run() } }, 10) Then we need to initialize Waellet stamp in our extension and subscribe for new runtime connection's After connection will be established we can start to send announcePresence message to the page to let Aepp know about Waellet // background.js import '../img/icon-128.png' import '../img/icon-34.png' import Node from '@aeternity/aepp-sdk/es/node' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' import { RpcWallet } from '@aeternity/aepp-sdk/es/ae/wallet' import BrowserRuntimeConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-runtime' import { generateKeyPair } from '@aeternity/aepp-sdk/es/utils/crypto' // const account = MemoryAccount({ // keypair: { // secretKey: 'YOUR_PRIV', // publicKey: 'YOUR_PUB' // } // }) const account2 = MemoryAccount({ keypair: generateKeyPair() }) // Init accounts const accounts = [ // account, account2 ] const NODE_URL = 'https://testnet.aeternity.io' const NODE_INTERNAL_URL = 'https://testnet.aeternity.io' const COMPILER_URL = 'https://compiler.aepps.com' // Init extension stamp from sdk RpcWallet({ nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: COMPILER_URL, name: 'ExtensionWallet', accounts, // Call-back for new connection request onConnection (aepp, action) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to connect`)) { action.accept() } else { action.deny() } }, // Call-back for disconnect event onDisconnect (msg, client) { client.disconnect() }, // Call-back for account subscription request onSubscription (aepp, action) { if (confirm(`Aepp ${aepp.info.name} with id ${aepp.id} want to subscribe for accounts`)) { // You are able to overwrite access to accounts for specific AEPP // Manually prepare and pass as first argument of `accept` function, object with accounts // Object should contain current and connected accounts // Accounts can be stored outside of sdk(also combined some of accounts store in SDK some of account outside) // action.accept({ // accounts: { // current: { 'ak_bla23dfas...': {...meta-data} }, // Current account // connected: { // Connected accounts // 'ak_1asdasd...': {}, // 'ak_1asdasdf23...': {} // } // } // }) action.accept() } else { action.deny() } }, // Call-back for sign request onSign (aepp, { params, accept, deny, txObject, onAccount }) { if (confirm(`Aepp ${aepp.info.name} with id ${aepp.id} want to sign tx ${action.params.tx}`)) { // Here we can provide account for signing if it's not stored inside the SDK instance // To do that you need to create MemoryAccount instance and provide it as second argument of accept function // if (isInStorage(params.onAccount)) { // First argument is encode transaction which will be using instead of one from AEPP (if provided) // Then this signing request will be signed using the provide MemoryAccount // If you do not provide account manually SDK will try to find it inside the instance, else throw error // action(null, { onAccount: MemoryAccount({ keypair }) }) // } accept() } else { deny() } }, // Call-back get accounts request onAskAccounts (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) { accept() } else { deny() } } }).then(wallet => { // Subscribe for `runtime` connection from Content Script chrome.runtime.onConnect.addListener(async function (port) { // create BrowserRuntimeConnection const connection = await BrowserRuntimeConnection({ connectionInfo: { id: port.sender.frameId }, port }) // add rpc client to wallet wallet.addRpcClient(connection) // Share wallet details. Inform aepp about wallet wallet.shareWalletInfo(port.postMessage.bind(port)) setTimeout(() => wallet.shareWalletInfo(port.postMessage.bind(port)), 3000) }) }).catch(err => { console.error(err) })","title":"Extension wallet"},{"location":"guides/how-to-build-an-wallet-app-or-extension/#web-waellet-iframereverse-iframe","text":"This works the same as extension but without Content Script bridge in between import { MemoryAccount, RpcWallet, Node } from '@aeternity/aepp-sdk/es' import BrowserWindowMessageConnection from '@aeternity/aepp-sdk/es/utils/aepp-wallet-communication/connection/browser-window-message' this.client = await RpcWallet({ nodes: [ { name: 'test-net', instance: await Node({ url: NODE_URL, internalUrl: NODE_INTERNAL_URL}) } ], compilerUrl: 'COMPILER_URL', // optional if your wallet don't support contract and all what requred compiler accounts: [MemoryAccount({ keypair: { secretKey: 'YOUR_PRIVATE_KEY', publicKey: 'YOUR_PUBLIC_KEY' } })], address: 'PUBLIC_KEY_OF_CURRENT_ACCOUNT', // default: first account in `accounts` array, name: 'Wallet', // Your wallet name, // call-back for connection request async onConnection (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to connect`)) { accept() } else { deny() } }, // call-back for subscription request async onSubscription (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to subscribe address`)) { // You are able to overwrite access to accounts for specific AEPP // Manually prepare and pass as first argument of `accept` function, object with accounts // Object should contain current and connected accounts // Accounts can be stored outside of sdk(also combined some of accounts store in SDK some of account outside) // action.accept({ // accounts: { // current: { 'ak_bla23dfas...': {...meta-data} }, // Current account // connected: { // Connected accounts // 'ak_1asdasd...': {}, // 'ak_1asdasdf23...': {} // } // } // }) accept() } else { deny() } }, // call-back for sign request async onSign (aepp, { accept, deny, params }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to ${params.returnSigned ? 'sign' : 'sign and broadcast'} ${JSON.stringify(params.tx)}`)) { // Here we can provide account for signing if it's not stored inside the SDK instance // To do that you need to create MemoryAccount instance and provide it as second argument of accept function // if (isInStorage(params.onAccount)) { // First argument is encode transaction which will be using instead of one from AEPP (if provided) // Then this signing request will be signed using the provide MemoryAccount // If you do not provide account manually SDK will try to find it inside the instance, else throw error // action(null, { onAccount: MemoryAccount({ keypair }) }) // } accept() } else { deny() } }, // call-back for get accounts request onAskAccounts (aepp, { accept, deny }) { if (confirm(`Client ${aepp.info.name} with id ${aepp.id} want to get accounts`)) { accept() } else { deny() } }, // call-back for disconnect event onDisconnect (message, client) { this.shareWalletInfo(connection.sendMessage.bind(connection)) } }) // Get target. Here we will check if wallet app running in frame or in top window // Get target depending on approach iFrame/Reverse Iframe const target = !this.runningInFrame ? window.frames.aepp : window.parent // Create a connection const connection = await BrowserWindowMessageConnection({ target }) // Add RPC client to wallet this.client.addRpcClient(connection) // Notifiy AEPP about waellet by sending the `announcePresence` message this.shareWalletInfo(connection.sendMessage.bind(connection))","title":"Web Waellet (Iframe/Reverse Iframe)"},{"location":"guides/import-nodejs/","text":"Node.js bundle The Node.js bundle is primarily interesting for scripts which use non-transpiled code, such as the ones provided in the examples/node directory of the project. const { Universal: Ae, MemoryAccount, Node } = require('@aeternity/aepp-sdk') const node1 = Node({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io' }) // const node2 = ... const acc1 = MemoryAccount({ keypair: 'YOUR_KEYPAIR_OBJECT' }) // const acc2 = ... Promise.all([ node1 ]).then(nodes => { Ae({ nodes: [ { name: 'someNode', instance: nodes[0] }, ], compilerUrl: 'COMPILER_URL', accounts: [ acc1, ] }).then(ae => { ae.height().then(height => { console.log('Current Block', height) }) }) }) // same with async const main = async () => { const node1 = await Node({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io' }) // const node2 = ... const acc1 = MemoryAccount({ keypair: 'YOUR_KEYPAIR_OBJECT' }) // const acc2 = ... const client = await Ae({ nodes: [ { name: 'someNode', instance: node1 }, ], compilerUrl: 'COMPILER_URL', accounts: [ acc1, ], address: 'SELECTED_ACCOUNT_PUB' }) const height = await client.height() console.log('Current Block', height) } // call main main()","title":"Setup"},{"location":"guides/import-nodejs/#nodejs-bundle","text":"The Node.js bundle is primarily interesting for scripts which use non-transpiled code, such as the ones provided in the examples/node directory of the project. const { Universal: Ae, MemoryAccount, Node } = require('@aeternity/aepp-sdk') const node1 = Node({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io' }) // const node2 = ... const acc1 = MemoryAccount({ keypair: 'YOUR_KEYPAIR_OBJECT' }) // const acc2 = ... Promise.all([ node1 ]).then(nodes => { Ae({ nodes: [ { name: 'someNode', instance: nodes[0] }, ], compilerUrl: 'COMPILER_URL', accounts: [ acc1, ] }).then(ae => { ae.height().then(height => { console.log('Current Block', height) }) }) }) // same with async const main = async () => { const node1 = await Node({ url: 'https://testnet.aeternity.io', internalUrl: 'https://testnet.aeternity.io' }) // const node2 = ... const acc1 = MemoryAccount({ keypair: 'YOUR_KEYPAIR_OBJECT' }) // const acc2 = ... const client = await Ae({ nodes: [ { name: 'someNode', instance: node1 }, ], compilerUrl: 'COMPILER_URL', accounts: [ acc1, ], address: 'SELECTED_ACCOUNT_PUB' }) const height = await client.height() console.log('Current Block', height) } // call main main()","title":"Node.js bundle"},{"location":"guides/import-script-tag/","text":"Script Tag In case you're not using any JS bundling/compilation technique, the SDK can also be loaded with the traditional <script> tag, as follows: Latest SDK version <script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"></script> Specific SDK version <script src=\"https://unpkg.com/@aeternity/aepp-sdk@VERSION/dist/aepp-sdk.browser-script.js\"></script> ...where VERSION is the version number of the SDK you want to use (eg. 4.0.1 ). Browser <script> tag The bundle will assign the SDK to a global var called Ae , and you can use it like so: <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> </head> <body> <!-- include latest SDK version --> <script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"></script> <script type=\"text/javascript\"> Ae.Node({ url: 'https://testnet.aeternity.io' }).then(node => { Ae.Universal({ nodes: [{ name: 'local', instance: node }] }).then(aeInstance => { aeInstance.height().then(height => { console.log(\"Current Block Height:\" + height) }) }) }) </script> </body> </html> CodePen Example Immediately START playing with our latest SDK release in Codepen.","title":"Script Tag"},{"location":"guides/import-script-tag/#script-tag","text":"In case you're not using any JS bundling/compilation technique, the SDK can also be loaded with the traditional <script> tag, as follows:","title":"Script Tag"},{"location":"guides/import-script-tag/#latest-sdk-version","text":"<script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"></script>","title":"Latest SDK version"},{"location":"guides/import-script-tag/#specific-sdk-version","text":"<script src=\"https://unpkg.com/@aeternity/aepp-sdk@VERSION/dist/aepp-sdk.browser-script.js\"></script> ...where VERSION is the version number of the SDK you want to use (eg. 4.0.1 ).","title":"Specific SDK version"},{"location":"guides/import-script-tag/#browser-script-tag","text":"The bundle will assign the SDK to a global var called Ae , and you can use it like so: <!doctype html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> </head> <body> <!-- include latest SDK version --> <script src=\"https://unpkg.com/@aeternity/aepp-sdk/dist/aepp-sdk.browser-script.js\"></script> <script type=\"text/javascript\"> Ae.Node({ url: 'https://testnet.aeternity.io' }).then(node => { Ae.Universal({ nodes: [{ name: 'local', instance: node }] }).then(aeInstance => { aeInstance.height().then(height => { console.log(\"Current Block Height:\" + height) }) }) }) </script> </body> </html>","title":"Browser &lt;script&gt; tag"},{"location":"guides/import-script-tag/#codepen-example","text":"Immediately START playing with our latest SDK release in Codepen.","title":"CodePen Example"},{"location":"guides/import-tree-shaking/","text":"Tree Shaking It is generally advised to use ESM (EcmaScript Modules), whenever possible. At this point however, this requires a modern bundler which understands ES2015 import/export syntax, such as webpack 4 (or newer). In addition, a compiler which translates the subset of ES used by aepp-sdk will have to be used , such as Babel - .babelrc in the project's root directory, shows which transpilation plugins are required, at least. Common Mistakes/Pitfalls Dev Dependencies : Make sure to do not forget to double check the devDependencies of the package.json of this SDK, looking for @babel /packages that might be helping you to correctly transpile the SDK code import ed into your project, as modules. ES Modules Transpilation : Include all the babel packages and plugins needed to transpile your code to the .babelrc (or babel.config.js ) of your project. Bundlers Setup : Do not forget to allow your bundler (eg. webpack ) to scan the SDK files that needs transpilation. This will allow your bundler to transpile the SDK import ed modules correctly ( see following example ). Webpack Example: // ... webpack config entry: { rules: [ { test: /\\.js$/, // standard setting for most bundlers web-app setup // entirely excludes the node_modules folder exclude: [/node_modules/], // ...but when using external ES Modules you need to // include required externals ES modules (eg. our Aepp-SDK) like so: include: [/node_modules\\/@aeternity/, /node_modules\\/rlp/], loader: 'babel-loader' } // ... more rules here (SASS, CSS, etc.) } } Using this method also enables the use of Tree shaking (dead code elimination). In order to ensure that modules are loaded directly, use the following syntax to load your desired part (aka flavor ) of aepp-sdk: // import Universal stamp import Universal from '@aeternity/aepp-sdk/es/ae/universal' // import Node import Node from '@aeternity/aepp-sdk/es/node' // import Account import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' // interact with aeternity's blockchain (async () => { const node = await Node({ url: 'https://testnet.aeternity.io' }) const account = MemoryAccount({ keypair: 'YOUR_KEYPAIR' }) // Init client const client = await Universal({ nodes: [{ name: 'test-net', instance: node }], accounts: [ account ] }) client.height().then(height => { console.log('Current Block', height) }) })()","title":"Tree Shaking"},{"location":"guides/import-tree-shaking/#tree-shaking","text":"It is generally advised to use ESM (EcmaScript Modules), whenever possible. At this point however, this requires a modern bundler which understands ES2015 import/export syntax, such as webpack 4 (or newer). In addition, a compiler which translates the subset of ES used by aepp-sdk will have to be used , such as Babel - .babelrc in the project's root directory, shows which transpilation plugins are required, at least.","title":"Tree Shaking"},{"location":"guides/import-tree-shaking/#common-mistakespitfalls","text":"Dev Dependencies : Make sure to do not forget to double check the devDependencies of the package.json of this SDK, looking for @babel /packages that might be helping you to correctly transpile the SDK code import ed into your project, as modules. ES Modules Transpilation : Include all the babel packages and plugins needed to transpile your code to the .babelrc (or babel.config.js ) of your project. Bundlers Setup : Do not forget to allow your bundler (eg. webpack ) to scan the SDK files that needs transpilation. This will allow your bundler to transpile the SDK import ed modules correctly ( see following example ).","title":"Common Mistakes/Pitfalls"},{"location":"guides/import-tree-shaking/#webpack-example","text":"// ... webpack config entry: { rules: [ { test: /\\.js$/, // standard setting for most bundlers web-app setup // entirely excludes the node_modules folder exclude: [/node_modules/], // ...but when using external ES Modules you need to // include required externals ES modules (eg. our Aepp-SDK) like so: include: [/node_modules\\/@aeternity/, /node_modules\\/rlp/], loader: 'babel-loader' } // ... more rules here (SASS, CSS, etc.) } } Using this method also enables the use of Tree shaking (dead code elimination). In order to ensure that modules are loaded directly, use the following syntax to load your desired part (aka flavor ) of aepp-sdk: // import Universal stamp import Universal from '@aeternity/aepp-sdk/es/ae/universal' // import Node import Node from '@aeternity/aepp-sdk/es/node' // import Account import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' // interact with aeternity's blockchain (async () => { const node = await Node({ url: 'https://testnet.aeternity.io' }) const account = MemoryAccount({ keypair: 'YOUR_KEYPAIR' }) // Init client const client = await Universal({ nodes: [{ name: 'test-net', instance: node }], accounts: [ account ] }) client.height().then(height => { console.log('Current Block', height) }) })()","title":"Webpack Example:"},{"location":"guides/import-vuejs/","text":"Vue.js Adding aepp-sdk to a Vue.js project requires nothing special, but it should be noted that client creation is asynchronous which needs to be taken into account. vue init webpack my-project cd my-project npm install @aeternity/aepp-sdk # src/components/HelloWorld.vue <script> // import Universal stamp import Universal from '@aeternity/aepp-sdk/es/ae/universal' // import Node import Node from '@aeternity/aepp-sdk/es/node' // import Account import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' export default { name: 'HelloWorld', data () { return { msg: 'Welcome to Your Vue.js App' } }, async mounted () { const node = await Node({ url: 'https://testnet.aeternity.io' }) const account = MemoryAccount({ keypair: 'YOUR_KEYPAIR' }) // Init client const client = await Universal({ nodes: [{ name: 'test-net', instance: node }], accounts: [ account ] }) // Start Using client const height = await client.height() this.msg = 'Current Block: ' + height } } </script>","title":"Vue.js"},{"location":"guides/import-vuejs/#vuejs","text":"Adding aepp-sdk to a Vue.js project requires nothing special, but it should be noted that client creation is asynchronous which needs to be taken into account. vue init webpack my-project cd my-project npm install @aeternity/aepp-sdk # src/components/HelloWorld.vue <script> // import Universal stamp import Universal from '@aeternity/aepp-sdk/es/ae/universal' // import Node import Node from '@aeternity/aepp-sdk/es/node' // import Account import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' export default { name: 'HelloWorld', data () { return { msg: 'Welcome to Your Vue.js App' } }, async mounted () { const node = await Node({ url: 'https://testnet.aeternity.io' }) const account = MemoryAccount({ keypair: 'YOUR_KEYPAIR' }) // Init client const client = await Universal({ nodes: [{ name: 'test-net', instance: node }], accounts: [ account ] }) // Start Using client const height = await client.height() this.msg = 'Current Block: ' + height } } </script>","title":"Vue.js"},{"location":"guides/low-vs-high-usage/","text":"Low vs High level API Interactions \"There are two approaches, purist and high-level.\" Alexander Kahl. The purist uses the functions generated out of the Swagger file. After create ing the client and await ing it (or use .then ), it exposes a mapping of all operationId s as functions, converted to camelCase (from PascalCase). So e.g. in order to get a transaction based on its hash, you would invoke client.api.getTx(query) . In this way the SDK is simply a mapping of the raw API calls into Javascript. It's excellent for low-level control, and as a teaching tool to understand the node's operations. Most real-world requirements involves a series of chain operations, so the SDK provides abstractions for these. The Javscript Promises framework makes this somewhat easy: ( Recommended ) High-level SDK usage Example spend function, using aeternity's SDK abstraction // Import necessary Modules by simply importing the Wallet module import Universal from '@aeternity/aepp-sdk/es/ae/wallet' // import from SDK es-modules import Node from '@aeternity/aepp-sdk/es/node' // import from SDK es-modules async function init () { const node = await Node({ url, internalUrl }) const sdkInstance = await Universal({ nodes: [{ name: 'test-net-node', instance: node }], compilerUrl: 'COMPILER_URL_HERE', accounts: [MemoryAccount({keypair: {secretKey: 'PRIV_KEY_HERE', publicKey: 'PUB_KEY_HERE'}})], address: 'SELECTED_ACCOUNT_PUB_KEY_HERE', }) // Spend transaction info console.log(await sdkInstance.spend(parseInt(amount), 'RECEIVER_PUB_KEY')) } Low-level SDK usage (use API endpoints directly) Example spend function, using the SDK, talking directly to the API : // Import necessary Modules import Universal from '@aeternity/aepp-sdk/es/ae/universal' import Node from '@aeternity/aepp-sdk/es/node' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' async function spend (amount, receiver_pub_key) { const node = await Node({ url, internalUrl }) const nodes = [{ name: 'testnet-node', instance: node }] const account = MemoryAccount({ keypair: { secretKey: 'PRIV_KEY_HERE', publicKey: 'PUB_KEY_HERE'} }) const sdkInstance = await Universal({ nodes, accounts: [account] }) const spendTx = await sdkInstance.spendTx({ sender: await sdkInstance.address(), receiver_pub_key, amount }) const signed = await sdkInstance.signTransaction(spendTx) return sdkInstance.sendTransaction(signed, opt) }","title":"Low vs High level API"},{"location":"guides/low-vs-high-usage/#low-vs-high-level-api","text":"","title":"Low vs High level API"},{"location":"guides/low-vs-high-usage/#interactions","text":"\"There are two approaches, purist and high-level.\" Alexander Kahl. The purist uses the functions generated out of the Swagger file. After create ing the client and await ing it (or use .then ), it exposes a mapping of all operationId s as functions, converted to camelCase (from PascalCase). So e.g. in order to get a transaction based on its hash, you would invoke client.api.getTx(query) . In this way the SDK is simply a mapping of the raw API calls into Javascript. It's excellent for low-level control, and as a teaching tool to understand the node's operations. Most real-world requirements involves a series of chain operations, so the SDK provides abstractions for these. The Javscript Promises framework makes this somewhat easy:","title":"Interactions"},{"location":"guides/low-vs-high-usage/#recommended-high-level-sdk-usage","text":"Example spend function, using aeternity's SDK abstraction // Import necessary Modules by simply importing the Wallet module import Universal from '@aeternity/aepp-sdk/es/ae/wallet' // import from SDK es-modules import Node from '@aeternity/aepp-sdk/es/node' // import from SDK es-modules async function init () { const node = await Node({ url, internalUrl }) const sdkInstance = await Universal({ nodes: [{ name: 'test-net-node', instance: node }], compilerUrl: 'COMPILER_URL_HERE', accounts: [MemoryAccount({keypair: {secretKey: 'PRIV_KEY_HERE', publicKey: 'PUB_KEY_HERE'}})], address: 'SELECTED_ACCOUNT_PUB_KEY_HERE', }) // Spend transaction info console.log(await sdkInstance.spend(parseInt(amount), 'RECEIVER_PUB_KEY')) }","title":"(Recommended) High-level SDK usage"},{"location":"guides/low-vs-high-usage/#low-level-sdk-usage-use-api-endpoints-directly","text":"Example spend function, using the SDK, talking directly to the API : // Import necessary Modules import Universal from '@aeternity/aepp-sdk/es/ae/universal' import Node from '@aeternity/aepp-sdk/es/node' import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' async function spend (amount, receiver_pub_key) { const node = await Node({ url, internalUrl }) const nodes = [{ name: 'testnet-node', instance: node }] const account = MemoryAccount({ keypair: { secretKey: 'PRIV_KEY_HERE', publicKey: 'PUB_KEY_HERE'} }) const sdkInstance = await Universal({ nodes, accounts: [account] }) const spendTx = await sdkInstance.spendTx({ sender: await sdkInstance.address(), receiver_pub_key, amount }) const signed = await sdkInstance.signTransaction(spendTx) return sdkInstance.sendTransaction(signed, opt) }","title":"Low-level SDK usage (use API endpoints directly)"},{"location":"guides/oracle-usage/","text":"Oracle Usage This guide describes the basic operations on Oracle using Aeternity JS SDK Main Flow Register an oracle (prepare and broadcast oracle-register ) ```js const sdkInstance = await Universal({ ... }) // Init Universal instance // First argument is oracle query format and second oracle query response format // queryFee is optional and default to 30000 // oracleTll is optional and default to { type: 'delta', value: 500 } const oracle = await client.registerOracle(\"{'city': str}\", \"{'tmp': num}\", { queryFee, oracleTtl }) ``` Extend oracle (prepare and broadcast oracle-extend transaction) ```js const ttlToExtend = { type: 'delta', value: 500 } const oracle = await sdkInstance.getOracleObject(oracleId) // extend oracle ttl to 500 blocks const oracleEntended = await oracle.extendOracle(ttlToExtend) // or const oracleEntended = await sdkInstance.extendOracleTtl(oracleId, ttlToExtend, options) ``` Post query to oracle (prepare and broadcast oracle-query transaction) ```js // queryFee is optional and default to 30000 // queryTtl is optional and default to { type: 'delta', value: 10 } // responseTtl is optional and default to { type: 'delta', value: 10 } const options = { fee, ttl, nonce, queryFee, queryTtl, responseTtl } // Get oracle object const oracle = await sdkInstance.getOracleObject(oracleId) const query = await oracle.postQuery(\"{'city': 'Berlin'}\", options) // or const query = await sdkInstance.postQueryToOracle(oracleId, \"{'city': 'Berlin'}\", options) ``` Poll for queries js const stopPolling = await oracle.pollQueries( (queries) => { console.log(queries) // log all new queries }, { interval: 1000 } // poll every second ) Poll for query response ```js const query = await sdkInstance.getQueryObject(oracleId, queryId) // Poll for query reponse const response = await query.pollForResponse({ attempts: 2, interval: 1000 }) // or const response = await sdkInstance.pollForQueryResponse(oracleId, queryId, { attempts: 2, interval: 1000 }) // decode query response console.log(query.decode()) - Respond to query (prepare and broadcast `oracle-responde` transaction) js const options = { ttl, fee, nonce, onAccount } const query = await sdkInstance.getQueryObject(oracleId, queryId) await query.respond({ tmp: 10 }, options) // or await sdkInstance.respondToQuery(oracleId, queryId, { tmp: 10 }, options) ``` Related links Oracle protocol Oracle SDK API Docs","title":"Oracle Usage"},{"location":"guides/oracle-usage/#oracle-usage","text":"This guide describes the basic operations on Oracle using Aeternity JS SDK","title":"Oracle Usage"},{"location":"guides/oracle-usage/#main-flow","text":"Register an oracle (prepare and broadcast oracle-register ) ```js const sdkInstance = await Universal({ ... }) // Init Universal instance // First argument is oracle query format and second oracle query response format // queryFee is optional and default to 30000 // oracleTll is optional and default to { type: 'delta', value: 500 } const oracle = await client.registerOracle(\"{'city': str}\", \"{'tmp': num}\", { queryFee, oracleTtl }) ``` Extend oracle (prepare and broadcast oracle-extend transaction) ```js const ttlToExtend = { type: 'delta', value: 500 } const oracle = await sdkInstance.getOracleObject(oracleId) // extend oracle ttl to 500 blocks const oracleEntended = await oracle.extendOracle(ttlToExtend) // or const oracleEntended = await sdkInstance.extendOracleTtl(oracleId, ttlToExtend, options) ``` Post query to oracle (prepare and broadcast oracle-query transaction) ```js // queryFee is optional and default to 30000 // queryTtl is optional and default to { type: 'delta', value: 10 } // responseTtl is optional and default to { type: 'delta', value: 10 } const options = { fee, ttl, nonce, queryFee, queryTtl, responseTtl } // Get oracle object const oracle = await sdkInstance.getOracleObject(oracleId) const query = await oracle.postQuery(\"{'city': 'Berlin'}\", options) // or const query = await sdkInstance.postQueryToOracle(oracleId, \"{'city': 'Berlin'}\", options) ``` Poll for queries js const stopPolling = await oracle.pollQueries( (queries) => { console.log(queries) // log all new queries }, { interval: 1000 } // poll every second ) Poll for query response ```js const query = await sdkInstance.getQueryObject(oracleId, queryId) // Poll for query reponse const response = await query.pollForResponse({ attempts: 2, interval: 1000 }) // or const response = await sdkInstance.pollForQueryResponse(oracleId, queryId, { attempts: 2, interval: 1000 }) // decode query response console.log(query.decode()) - Respond to query (prepare and broadcast `oracle-responde` transaction) js const options = { ttl, fee, nonce, onAccount } const query = await sdkInstance.getQueryObject(oracleId, queryId) await query.respond({ tmp: 10 }, options) // or await sdkInstance.respondToQuery(oracleId, queryId, { tmp: 10 }, options) ```","title":"Main Flow"},{"location":"guides/oracle-usage/#related-links","text":"Oracle protocol Oracle SDK API Docs","title":"Related links"},{"location":"guides/quick-start/","text":"Quick Start 1. Install SDK A) Simple Usage: with <script> tag For those not using any JS bundling/complilation or compilation technique or tools like Codepen or similar online Editors, please check our Import SDK bundle with <script> tag . If you're using bundling/compilation techniques (eg. webpack ), please continue reading. B) Advanced Usage: with npm or similar Add the latest @aeternity/aepp-sdk release from npmjs.com to your project using one of these commands # install using npm...or yarn or pnpm npm i @aeternity/aepp-sdk Note: To install a Pre-Release (latest beta or alpha version) using on the latest Node version, you have to install the package appending the @next tag reference, or even use the # symbol and the Repo URL to install a version coming from a specific branch. # install the @next version of the SDK npm i @aeternity/aepp-sdk@next # install the #develop version of the SDK npm i https://github.com/aeternity/aepp-sdk-js#develop Note : If you experience errors during the installation, you might need to install build tools for your OS. Windows: Windows Build Tools npm install -g windows-build-tools Ubuntu / Debian: Build Essential sudo apt-get update sudo apt-get install build-essential Mac: Download Xcode from AppStore, then run xcode-select --install 2. Create an Account You can do many more things now, but you'll probably have to start with: A) Using the Command Line Create an account using the \ud83d\udcbb CLI B) Using the SDK import { Crypto } from '@aeternity/aepp-sdk/es' const keypair = Crypto.generateKeyPair() console.log(`Secret key: ${keypair.secretKey}`) console.log(`Public key: ${keypair.publicKey}`) 3. Give yourself some AE tokens To get yourself some AEs you can use the \ud83d\udeb0 Faucet Aepp . Just add your publicKey, and you'll immediately get some test tokens. 4. Import (a chosen Flavor) Import the right flavor . For this example with get the Universal flavor, which contains all the features of the SDK: // Import Flavor import Ae from '@aeternity/aepp-sdk/es/ae/universal' // or other flavor 5. Play with Aetenity's blockchain features // Use Flavor import Ae from '@aeternity/aepp-sdk/es/ae/universal' // or other flavor import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' // or other flavor import Node from '@aeternity/aepp-sdk/es/node' // or other flavor import { AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter' const NODE_URL = 'https://testnet.aeternity.io' const COMPILER_URL = 'COMPILER_URL' // required for using Contract const ACCOUNT = MemoryAccount({ keypair: { secretKey: 'A_PRIV_KEY', publicKey: 'A_PUB_ADDRESS' } }) (async function () { const nodeInstance = await Node({ url: NODE_URL }) const sdkInstance = await Ae({ compilerUrl: COMPILER_URL, nodes: [ { name: 'test-net', instance: nodeInstance } ], accounts: [ ACCOUNT ] }) await sdkInstance.height() // get top block height console.log('Current Block Height:', height) await sdkInstance.spend(1, 'ak_asd23dasdasda...', { denomination: AE_AMOUNT_FORMATS.AE }) // spend one AE })()","title":"Quick Start"},{"location":"guides/quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"guides/quick-start/#1-install-sdk","text":"","title":"1. Install SDK"},{"location":"guides/quick-start/#a-simple-usage-with-script-tag","text":"For those not using any JS bundling/complilation or compilation technique or tools like Codepen or similar online Editors, please check our Import SDK bundle with <script> tag . If you're using bundling/compilation techniques (eg. webpack ), please continue reading.","title":"A) Simple Usage: with &lt;script&gt; tag"},{"location":"guides/quick-start/#b-advanced-usage-with-npm-or-similar","text":"Add the latest @aeternity/aepp-sdk release from npmjs.com to your project using one of these commands # install using npm...or yarn or pnpm npm i @aeternity/aepp-sdk Note: To install a Pre-Release (latest beta or alpha version) using on the latest Node version, you have to install the package appending the @next tag reference, or even use the # symbol and the Repo URL to install a version coming from a specific branch. # install the @next version of the SDK npm i @aeternity/aepp-sdk@next # install the #develop version of the SDK npm i https://github.com/aeternity/aepp-sdk-js#develop Note : If you experience errors during the installation, you might need to install build tools for your OS. Windows: Windows Build Tools npm install -g windows-build-tools Ubuntu / Debian: Build Essential sudo apt-get update sudo apt-get install build-essential Mac: Download Xcode from AppStore, then run xcode-select --install","title":"B) Advanced Usage: with npm or similar"},{"location":"guides/quick-start/#2-create-an-account","text":"You can do many more things now, but you'll probably have to start with:","title":"2. Create an Account"},{"location":"guides/quick-start/#a-using-the-command-line","text":"Create an account using the \ud83d\udcbb CLI","title":"A) Using the Command Line"},{"location":"guides/quick-start/#b-using-the-sdk","text":"import { Crypto } from '@aeternity/aepp-sdk/es' const keypair = Crypto.generateKeyPair() console.log(`Secret key: ${keypair.secretKey}`) console.log(`Public key: ${keypair.publicKey}`)","title":"B) Using the SDK"},{"location":"guides/quick-start/#3-give-yourself-some-ae-tokens","text":"To get yourself some AEs you can use the \ud83d\udeb0 Faucet Aepp . Just add your publicKey, and you'll immediately get some test tokens.","title":"3. Give yourself some AE tokens"},{"location":"guides/quick-start/#4-import-a-chosen-flavor","text":"Import the right flavor . For this example with get the Universal flavor, which contains all the features of the SDK: // Import Flavor import Ae from '@aeternity/aepp-sdk/es/ae/universal' // or other flavor","title":"4. Import (a chosen Flavor)"},{"location":"guides/quick-start/#5-play-with-aetenitys-blockchain-features","text":"// Use Flavor import Ae from '@aeternity/aepp-sdk/es/ae/universal' // or other flavor import MemoryAccount from '@aeternity/aepp-sdk/es/account/memory' // or other flavor import Node from '@aeternity/aepp-sdk/es/node' // or other flavor import { AE_AMOUNT_FORMATS } from '@aeternity/aepp-sdk/es/utils/amount-formatter' const NODE_URL = 'https://testnet.aeternity.io' const COMPILER_URL = 'COMPILER_URL' // required for using Contract const ACCOUNT = MemoryAccount({ keypair: { secretKey: 'A_PRIV_KEY', publicKey: 'A_PUB_ADDRESS' } }) (async function () { const nodeInstance = await Node({ url: NODE_URL }) const sdkInstance = await Ae({ compilerUrl: COMPILER_URL, nodes: [ { name: 'test-net', instance: nodeInstance } ], accounts: [ ACCOUNT ] }) await sdkInstance.height() // get top block height console.log('Current Block Height:', height) await sdkInstance.spend(1, 'ak_asd23dasdasda...', { denomination: AE_AMOUNT_FORMATS.AE }) // spend one AE })()","title":"5. Play with Aetenity's blockchain features"},{"location":"guides/migration/migration-7.0.0/","text":"Migration to SDK 7.0.0 This guide describes the process of migrating to SDK version 7.0.0 Step 1 SDK will not accept url , internalUrl init arguments anymore: Before Universal({ url, internalUrl }) After const nodeInstance = await Node({ url, internalUrl }) Universal({ nodes: [{ name: 'testnet', instance: nodeInstance }] }) Step 2 Remove deprecated function setKeypair SDK will not accept keypair init argument anymore: Before Universal({ keypair }) After Universal({ accounts: [MemoryAccount({ keypair })] }) Step 3 Change all of AENS method's first argument from nameId to name Before const client = Universal({ ... }) await client.aensUpdate('cm_ad1wdsa...', ...) await client.aensTransfer('cm_ad1wdsa...', ...) await client.aensRevoke('cm_ad1wdsa...', ...) After const client = Universal({ ... }) await client.aensUpdate('testname.chain', ...) await client.aensTransfer('testname.chain', ...) await client.aensRevoke('testname.chain', ...) Other Breaking Changes Add new compiler methods to RPC communication (base-app update required) Drop compiler version to version >= 4.0.0 && version < 5.0.0 Change node compatibility range to node >= 5.0.0 && node < 6.0.0 Always verify transactions before sending them to the node (can be disabled using the option verify: false )","title":"Migration to SDK 7.0.0"},{"location":"guides/migration/migration-7.0.0/#migration-to-sdk-700","text":"This guide describes the process of migrating to SDK version 7.0.0","title":"Migration to SDK 7.0.0"},{"location":"guides/migration/migration-7.0.0/#step-1","text":"SDK will not accept url , internalUrl init arguments anymore:","title":"Step 1"},{"location":"guides/migration/migration-7.0.0/#before","text":"Universal({ url, internalUrl })","title":"Before"},{"location":"guides/migration/migration-7.0.0/#after","text":"const nodeInstance = await Node({ url, internalUrl }) Universal({ nodes: [{ name: 'testnet', instance: nodeInstance }] })","title":"After"},{"location":"guides/migration/migration-7.0.0/#step-2","text":"Remove deprecated function setKeypair SDK will not accept keypair init argument anymore:","title":"Step 2"},{"location":"guides/migration/migration-7.0.0/#before_1","text":"Universal({ keypair })","title":"Before"},{"location":"guides/migration/migration-7.0.0/#after_1","text":"Universal({ accounts: [MemoryAccount({ keypair })] })","title":"After"},{"location":"guides/migration/migration-7.0.0/#step-3","text":"Change all of AENS method's first argument from nameId to name","title":"Step 3"},{"location":"guides/migration/migration-7.0.0/#before_2","text":"const client = Universal({ ... }) await client.aensUpdate('cm_ad1wdsa...', ...) await client.aensTransfer('cm_ad1wdsa...', ...) await client.aensRevoke('cm_ad1wdsa...', ...)","title":"Before"},{"location":"guides/migration/migration-7.0.0/#after_2","text":"const client = Universal({ ... }) await client.aensUpdate('testname.chain', ...) await client.aensTransfer('testname.chain', ...) await client.aensRevoke('testname.chain', ...)","title":"After"},{"location":"guides/migration/migration-7.0.0/#other-breaking-changes","text":"Add new compiler methods to RPC communication (base-app update required) Drop compiler version to version >= 4.0.0 && version < 5.0.0 Change node compatibility range to node >= 5.0.0 && node < 6.0.0 Always verify transactions before sending them to the node (can be disabled using the option verify: false )","title":"Other Breaking Changes"}]}